// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum FullIntegrationEntryMode {
  NotSet,
  Manual,
  Swipe,
  Contactless,
  LaserScanner,
  Chip,
  ChipFallBackSwipe,
  FrontCamera,
  RearCamera,
}

enum FullIntegrationBarcodeType {
  NotSet,
  QrCode,
  TwoDimensionalBarcode,
  ThreeDimensionalBarcode,
}

enum FullIntegrationContactlessTransactionPath {
  NotSet,
  PaypassMsd,
  PaypassMchip,
  PaywaveMsd,
  PaywaveQvsdc,
  PaywaveContact,
  PaywaveWave2,
  PaywaveMsdCvn17,
  PaywaveMsdLegacy,
  PaywaveVsdc,
  DpasMsd,
  DpasEmv,
  DpasZip,
  ExpressPayMsd,
  ExpressPayEmv,
  JcbMsd,
  JcbEmv,
  JcbLegacy,
  JcbWave2,
  QPbocQvsdc,
  QPbocVsdc,
  FlashEmv,
}

enum FullIntegrationFirstGacResult {
  NotSet,
  TransactionOfflineApproved,
  TransactionOfflineDeclined,
  TransactionOnlineAuthorizationNeeded,
}

enum FullIntegrationSignatureFlag {
  NotSet,
  NotNeeded,
  Needed,
}

enum FullIntegrationOnlinePinFlag {
  NotSet,
  NotNeeded,
  Needed,
}

enum FullIntegrationCardholderVerificationMethod {
  NotSet,
  FailCvmProcessing,
  PlaintextOfflinePinVerification,
  OnlinePin,
  PlaintextOfflinePinAndSignature,
  EncipheredOfflinePinVerification,
  EncipheredOfflinePinVerificationAndSignature,
  Signature,
  NoCvmRequired,
  OnDeviceCvm,
}

enum FullIntegrationVasResponseCode {
  NotSet,
  VasOk,
  VasOseError,
  VasGetDataCommandError,
  VasIssueNeedToStartPayment,
  AppVersionTooLow,
  SkipProtocolInVasMode,
  SkipProtocolAndNoDataForthcomingInDualMode,
  SkipProtocolAndNoDataForthcomingInSingleMode,
  VasDataNotFound,
  VasDataNotActive,
  UserInterventionRequiredOnMobileDevice,
  TheMerchantIdIsNull,
  VasGetKeyError,
  VasDataDecryptionError,
  UnknownError,
}

enum FullIntegrationPinpadType {
  NotSet,
  InternalPinpad,
  ExternalPinpad,
  RnibPinpad,
  ExternalPinpadFirst,
}

enum FullIntegrationLuhnValidationResult {
  NotSet,
  NotPerformed,
  Passed,
  Failed,
}

enum FullIntegrationSecondGacResult {
  NotSet,
  TransactionApproved,
  TransactionDeclined,
  PartialEmvApprove,
  PartialEmvDecline,
}

enum FullIntegrationPinBypassStatus {
  NotSet,
  NotBypassed,
  Bypassed,
}

enum FullIntegrationPrompt {
  NotSet,
  NoPrompt,
  NeedPrompt,
  PromptBypassNotAllowed,
}

enum FullIntegrationTlvType {
  NotSet,
  EmvContact,
  EmvContactless,
}

enum FullIntegrationEdcType {
  NotSet,
  All,
  Credit,
  Debit,
  Ebt,
  Gift,
  Loyalty,
  Cash,
  QrPayment,
}

enum FullIntegrationTransactionType {
  NotSet,
  Unknown,
  Sale,
  Return,
  Authorization,
  PostAuthorization,
  ForceAuthorization,
  Adjust,
  Withdrawal,
  Activate,
  Issue,
  Reload,
  Cashout,
  Deactivate,
  Replace,
  Merge,
  ReportLost,
  Void,
  VoidSale,
  VoidReturn,
  VoidAuthorization,
  VoidPostAuthorization,
  VoidForceAuthorization,
  VoidWithdrawal,
  Inquiry,
  Verify,
  Reactivate,
  ForcedIssue,
  ForcedAdd,
  Unload,
  Renew,
  GetConvertDetail,
  Convert,
  Tokenize,
  IncrementalAuthorization,
  BalanceWithLock,
  RedemptionWithUnlock,
  Rewards,
  Reenter,
  TransactionAdjustment,
  Transfer,
  Finalize,
  Deposit,
  AccountPayment,
  Reversal,
}

enum FullIntegrationPinpadEnableFlag {
  NotSet,
  NotAllowed,
  Allowed,
}

enum FullIntegrationPinpadTypeFlag {
  NotSet,
  InternalPinpad,
  ExternalPinpad,
  ExternalPinpadFirst,
}

enum FullIntegrationLaserScannerFlag {
  NotSet,
  NotAllowed,
  Allowed,
}

enum FullIntegrationFrontCameraFlag {
  NotSet,
  NotAllowed,
  Allowed,
}

enum FullIntegrationRearCameraFlag {
  NotSet,
  NotAllowed,
  Allowed,
}

enum FullIntegrationDataEncryptionFlag {
  NotSet,
  NotEncrypted,
  DukptTripleDesKeyWithCbcMode,
  DukptTripleDesKeyWithEcbMode,
  DesOrTdesMethod,
  VoltageE2ee,
  AesCbcDukpt,
  AesEcbDukpt,
  Aes192CbcDukpt,
  Aes192EcbDukpt,
  Aes256CbcDukpt,
  Aes256EcbDukpt,
}

enum FullIntegrationTrackDataSentinel {
  NotSet,
  ExcludeStartEnd,
  IncludeStartEnd,
}

enum FullIntegrationStatusReportFlag {
  NotSet,
  NotToReport,
  ToReport,
}

enum FullIntegrationContinuousScreen {
  NotSet,
  Default,
  NotGoToIdleScreen,
}

enum FullIntegrationKsnFlag {
  NotSet,
  NotIncrease,
  Increase,
}

enum FullIntegrationMacKeyType {
  NotSet,
  Tak,
  DesDukptKey,
  AesDukptKey,
  Hmac,
  Aes192DukptKey,
  Aes256DukptKey,
}

enum FullIntegrationMacWorkMode {
  NotSet,
  AnsiX99,
  HypercomFastMode,
  AnsiX919,
  Sha1,
  Sha256,
}

enum FullIntegrationOnlineAuthorizationResult {
  NotSet,
  TransactionApprovedOnline,
  TransactionDeclinedOnline,
  ConnectHostFailed,
  RequestPartialEmv,
}

enum FullIntegrationMerchantDecision {
  NotSet,
  NoMerchantDecision,
  ForceOnline,
  ForceDecline,
}

enum FullIntegrationEncryptionType {
  NotSet,
  DesDukpt,
  MasterSession,
  AesDukpt,
  Aes192Dukpt,
  Aes256Dukpt,
}

enum FullIntegrationPinBypass {
  NotSet,
  NotAllowPinBypass,
  BypassOfflinePinAutomatically,
  BypassOnlinePinAutomatically,
  BothOfflineAndOnlineAutomatically,
  AllowUserToBypass,
}

enum FullIntegrationPinAlgorithm {
  NotSet,
  Iso9564_0,
  Iso9564_1,
  Iso9564_3,
}

enum FullIntegrationAllowOnlinePinBypass {
  NotSet,
  Yes,
}

class FullIntegrationSetEmvTlvDataRequest {
  FullIntegrationSetEmvTlvDataRequest({
    this.tlvType,
    this.emvTlvData,
  });

  FullIntegrationTlvType? tlvType;

  String? emvTlvData;

  Object encode() {
    return <Object?>[
      tlvType?.index,
      emvTlvData,
    ];
  }

  static FullIntegrationSetEmvTlvDataRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationSetEmvTlvDataRequest(
      tlvType: result[0] != null
          ? FullIntegrationTlvType.values[result[0]! as int]
          : null,
      emvTlvData: result[1] as String?,
    );
  }
}

class FullIntegrationGetPinBlockRequest {
  FullIntegrationGetPinBlockRequest({
    this.accountNumber,
    this.encryptionType,
    this.keySlot,
    this.pinMinLength,
    this.pinMaxLength,
    this.allowOnlinePinBypass,
    this.pinAlgorithm,
    this.timeout,
    this.edcType,
    this.transactionType,
    this.title,
    this.pinpadType,
    this.ksnFlag,
  });

  String? accountNumber;

  FullIntegrationEncryptionType? encryptionType;

  String? keySlot;

  String? pinMinLength;

  String? pinMaxLength;

  FullIntegrationAllowOnlinePinBypass? allowOnlinePinBypass;

  FullIntegrationPinAlgorithm? pinAlgorithm;

  String? timeout;

  FullIntegrationEdcType? edcType;

  FullIntegrationTransactionType? transactionType;

  String? title;

  FullIntegrationPinpadType? pinpadType;

  FullIntegrationKsnFlag? ksnFlag;

  Object encode() {
    return <Object?>[
      accountNumber,
      encryptionType?.index,
      keySlot,
      pinMinLength,
      pinMaxLength,
      allowOnlinePinBypass?.index,
      pinAlgorithm?.index,
      timeout,
      edcType?.index,
      transactionType?.index,
      title,
      pinpadType?.index,
      ksnFlag?.index,
    ];
  }

  static FullIntegrationGetPinBlockRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationGetPinBlockRequest(
      accountNumber: result[0] as String?,
      encryptionType: result[1] != null
          ? FullIntegrationEncryptionType.values[result[1]! as int]
          : null,
      keySlot: result[2] as String?,
      pinMinLength: result[3] as String?,
      pinMaxLength: result[4] as String?,
      allowOnlinePinBypass: result[5] != null
          ? FullIntegrationAllowOnlinePinBypass.values[result[5]! as int]
          : null,
      pinAlgorithm: result[6] != null
          ? FullIntegrationPinAlgorithm.values[result[6]! as int]
          : null,
      timeout: result[7] as String?,
      edcType: result[8] != null
          ? FullIntegrationEdcType.values[result[8]! as int]
          : null,
      transactionType: result[9] != null
          ? FullIntegrationTransactionType.values[result[9]! as int]
          : null,
      title: result[10] as String?,
      pinpadType: result[11] != null
          ? FullIntegrationPinpadType.values[result[11]! as int]
          : null,
      ksnFlag: result[12] != null
          ? FullIntegrationKsnFlag.values[result[12]! as int]
          : null,
    );
  }
}

class FullIntegrationTerminalConfiguration {
  FullIntegrationTerminalConfiguration({
    this.emvKernelConfigurationSelection,
    this.transactionDate,
    this.transactionTime,
    this.currencyCode,
    this.currencyExponent,
    this.merchantCategoryCode,
    this.transactionSequenceNumber,
    this.transactionCvmLimit,
  });

  String? emvKernelConfigurationSelection;

  String? transactionDate;

  String? transactionTime;

  String? currencyCode;

  String? currencyExponent;

  String? merchantCategoryCode;

  String? transactionSequenceNumber;

  String? transactionCvmLimit;

  Object encode() {
    return <Object?>[
      emvKernelConfigurationSelection,
      transactionDate,
      transactionTime,
      currencyCode,
      currencyExponent,
      merchantCategoryCode,
      transactionSequenceNumber,
      transactionCvmLimit,
    ];
  }

  static FullIntegrationTerminalConfiguration decode(Object result) {
    result as List<Object?>;
    return FullIntegrationTerminalConfiguration(
      emvKernelConfigurationSelection: result[0] as String?,
      transactionDate: result[1] as String?,
      transactionTime: result[2] as String?,
      currencyCode: result[3] as String?,
      currencyExponent: result[4] as String?,
      merchantCategoryCode: result[5] as String?,
      transactionSequenceNumber: result[6] as String?,
      transactionCvmLimit: result[7] as String?,
    );
  }
}

class FullIntegrationAmountRequest {
  FullIntegrationAmountRequest({
    this.transactionAmount,
    this.tipAmount,
    this.cashBackAmount,
    this.merchantFee,
    this.taxAmount,
    this.fuelAmount,
    this.serviceFee,
    this.originalAmount,
  });

  String? transactionAmount;

  String? tipAmount;

  String? cashBackAmount;

  String? merchantFee;

  String? taxAmount;

  String? fuelAmount;

  String? serviceFee;

  String? originalAmount;

  Object encode() {
    return <Object?>[
      transactionAmount,
      tipAmount,
      cashBackAmount,
      merchantFee,
      taxAmount,
      fuelAmount,
      serviceFee,
      originalAmount,
    ];
  }

  static FullIntegrationAmountRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationAmountRequest(
      transactionAmount: result[0] as String?,
      tipAmount: result[1] as String?,
      cashBackAmount: result[2] as String?,
      merchantFee: result[3] as String?,
      taxAmount: result[4] as String?,
      fuelAmount: result[5] as String?,
      serviceFee: result[6] as String?,
      originalAmount: result[7] as String?,
    );
  }
}

class FullIntegrationAuthorizeCardRequest {
  FullIntegrationAuthorizeCardRequest({
    this.amountInformation,
    this.merchantDecision,
    this.pinEncryptionType,
    this.pinKeySlot,
    this.pinMinLength,
    this.pinMaxLength,
    this.pinBypass,
    this.pinAlgorithm,
    this.terminalConfiguration,
    this.tagList,
    this.timeout,
    this.continuousScreen,
    this.pinpadType,
    this.ksnFlag,
    this.title,
  });

  FullIntegrationAmountRequest? amountInformation;

  FullIntegrationMerchantDecision? merchantDecision;

  FullIntegrationEncryptionType? pinEncryptionType;

  String? pinKeySlot;

  String? pinMinLength;

  String? pinMaxLength;

  FullIntegrationPinBypass? pinBypass;

  FullIntegrationPinAlgorithm? pinAlgorithm;

  FullIntegrationTerminalConfiguration? terminalConfiguration;

  String? tagList;

  String? timeout;

  FullIntegrationContinuousScreen? continuousScreen;

  FullIntegrationPinpadType? pinpadType;

  FullIntegrationKsnFlag? ksnFlag;

  String? title;

  Object encode() {
    return <Object?>[
      amountInformation?.encode(),
      merchantDecision?.index,
      pinEncryptionType?.index,
      pinKeySlot,
      pinMinLength,
      pinMaxLength,
      pinBypass?.index,
      pinAlgorithm?.index,
      terminalConfiguration?.encode(),
      tagList,
      timeout,
      continuousScreen?.index,
      pinpadType?.index,
      ksnFlag?.index,
      title,
    ];
  }

  static FullIntegrationAuthorizeCardRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationAuthorizeCardRequest(
      amountInformation: result[0] != null
          ? FullIntegrationAmountRequest.decode(result[0]! as List<Object?>)
          : null,
      merchantDecision: result[1] != null
          ? FullIntegrationMerchantDecision.values[result[1]! as int]
          : null,
      pinEncryptionType: result[2] != null
          ? FullIntegrationEncryptionType.values[result[2]! as int]
          : null,
      pinKeySlot: result[3] as String?,
      pinMinLength: result[4] as String?,
      pinMaxLength: result[5] as String?,
      pinBypass: result[6] != null
          ? FullIntegrationPinBypass.values[result[6]! as int]
          : null,
      pinAlgorithm: result[7] != null
          ? FullIntegrationPinAlgorithm.values[result[7]! as int]
          : null,
      terminalConfiguration: result[8] != null
          ? FullIntegrationTerminalConfiguration.decode(result[8]! as List<Object?>)
          : null,
      tagList: result[9] as String?,
      timeout: result[10] as String?,
      continuousScreen: result[11] != null
          ? FullIntegrationContinuousScreen.values[result[11]! as int]
          : null,
      pinpadType: result[12] != null
          ? FullIntegrationPinpadType.values[result[12]! as int]
          : null,
      ksnFlag: result[13] != null
          ? FullIntegrationKsnFlag.values[result[13]! as int]
          : null,
      title: result[14] as String?,
    );
  }
}

class FullIntegrationCompleteOnlineEmvRequest {
  FullIntegrationCompleteOnlineEmvRequest({
    this.onlineAuthorizationResult,
    this.responseCode,
    this.authorizationCode,
    this.issuerAuthenticationData,
    this.issuerScript1,
    this.issuerScript2,
    this.tagList,
    this.continuousScreen,
  });

  FullIntegrationOnlineAuthorizationResult? onlineAuthorizationResult;

  String? responseCode;

  String? authorizationCode;

  String? issuerAuthenticationData;

  String? issuerScript1;

  String? issuerScript2;

  String? tagList;

  FullIntegrationContinuousScreen? continuousScreen;

  Object encode() {
    return <Object?>[
      onlineAuthorizationResult?.index,
      responseCode,
      authorizationCode,
      issuerAuthenticationData,
      issuerScript1,
      issuerScript2,
      tagList,
      continuousScreen?.index,
    ];
  }

  static FullIntegrationCompleteOnlineEmvRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationCompleteOnlineEmvRequest(
      onlineAuthorizationResult: result[0] != null
          ? FullIntegrationOnlineAuthorizationResult.values[result[0]! as int]
          : null,
      responseCode: result[1] as String?,
      authorizationCode: result[2] as String?,
      issuerAuthenticationData: result[3] as String?,
      issuerScript1: result[4] as String?,
      issuerScript2: result[5] as String?,
      tagList: result[6] as String?,
      continuousScreen: result[7] != null
          ? FullIntegrationContinuousScreen.values[result[7]! as int]
          : null,
    );
  }
}

class FullIntegrationCustomMacInformationRequest {
  FullIntegrationCustomMacInformationRequest({
    this.keyType,
    this.workMode,
    this.keySlot,
    this.data,
  });

  FullIntegrationMacKeyType? keyType;

  FullIntegrationMacWorkMode? workMode;

  String? keySlot;

  List<String?>? data;

  Object encode() {
    return <Object?>[
      keyType?.index,
      workMode?.index,
      keySlot,
      data,
    ];
  }

  static FullIntegrationCustomMacInformationRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationCustomMacInformationRequest(
      keyType: result[0] != null
          ? FullIntegrationMacKeyType.values[result[0]! as int]
          : null,
      workMode: result[1] != null
          ? FullIntegrationMacWorkMode.values[result[1]! as int]
          : null,
      keySlot: result[2] as String?,
      data: (result[3] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class FullIntegrationAdditionalPrompts {
  FullIntegrationAdditionalPrompts({
    this.expiryDatePrompt,
    this.cvvPrompt,
    this.zipCodePrompt,
  });

  FullIntegrationPrompt? expiryDatePrompt;

  FullIntegrationPrompt? cvvPrompt;

  FullIntegrationPrompt? zipCodePrompt;

  Object encode() {
    return <Object?>[
      expiryDatePrompt?.index,
      cvvPrompt?.index,
      zipCodePrompt?.index,
    ];
  }

  static FullIntegrationAdditionalPrompts decode(Object result) {
    result as List<Object?>;
    return FullIntegrationAdditionalPrompts(
      expiryDatePrompt: result[0] != null
          ? FullIntegrationPrompt.values[result[0]! as int]
          : null,
      cvvPrompt: result[1] != null
          ? FullIntegrationPrompt.values[result[1]! as int]
          : null,
      zipCodePrompt: result[2] != null
          ? FullIntegrationPrompt.values[result[2]! as int]
          : null,
    );
  }
}

class FullIntegrationInputAccountWithEmvRequest {
  FullIntegrationInputAccountWithEmvRequest({
    this.edcType,
    this.transactionType,
    this.amountInformation,
    this.magneticSwipePinpadEnableFlag,
    this.magneticSwipePinpadTypeFlag,
    this.manualPinpadEnableFlag,
    this.contactlessPinpadEnableFlag,
    this.contactlessPinpadTypeFlag,
    this.contactEmvPinpadEnableFlag,
    this.contactEmvPinpadTypeFlag,
    this.fallbackSwipePinpadEnableFlag,
    this.laserScannerFlag,
    this.frontCameraFlag,
    this.rearCameraFlag,
    this.additionalPrompts,
    this.encryptionFlag,
    this.keySlot,
    this.paddingChar,
    this.trackDataSentinel,
    this.minAccountLength,
    this.maxAccountLength,
    this.terminalConfiguration,
    this.tagList,
    this.timeout,
    this.statusReportFlag,
    this.continuousScreen,
    this.fallbackInsertPinpadEnableFlag,
    this.ksnFlag,
    this.customData,
    this.fallbackToManualPinpadEnableFlag,
    this.customMacInformation,
  });

  FullIntegrationEdcType? edcType;

  FullIntegrationTransactionType? transactionType;

  FullIntegrationAmountRequest? amountInformation;

  FullIntegrationPinpadEnableFlag? magneticSwipePinpadEnableFlag;

  FullIntegrationPinpadTypeFlag? magneticSwipePinpadTypeFlag;

  FullIntegrationPinpadEnableFlag? manualPinpadEnableFlag;

  FullIntegrationPinpadEnableFlag? contactlessPinpadEnableFlag;

  FullIntegrationPinpadTypeFlag? contactlessPinpadTypeFlag;

  FullIntegrationPinpadEnableFlag? contactEmvPinpadEnableFlag;

  FullIntegrationPinpadTypeFlag? contactEmvPinpadTypeFlag;

  FullIntegrationPinpadEnableFlag? fallbackSwipePinpadEnableFlag;

  FullIntegrationLaserScannerFlag? laserScannerFlag;

  FullIntegrationFrontCameraFlag? frontCameraFlag;

  FullIntegrationRearCameraFlag? rearCameraFlag;

  FullIntegrationAdditionalPrompts? additionalPrompts;

  FullIntegrationDataEncryptionFlag? encryptionFlag;

  String? keySlot;

  String? paddingChar;

  FullIntegrationTrackDataSentinel? trackDataSentinel;

  String? minAccountLength;

  String? maxAccountLength;

  FullIntegrationTerminalConfiguration? terminalConfiguration;

  String? tagList;

  String? timeout;

  FullIntegrationStatusReportFlag? statusReportFlag;

  FullIntegrationContinuousScreen? continuousScreen;

  FullIntegrationPinpadEnableFlag? fallbackInsertPinpadEnableFlag;

  FullIntegrationKsnFlag? ksnFlag;

  List<String?>? customData;

  FullIntegrationPinpadEnableFlag? fallbackToManualPinpadEnableFlag;

  FullIntegrationCustomMacInformationRequest? customMacInformation;

  Object encode() {
    return <Object?>[
      edcType?.index,
      transactionType?.index,
      amountInformation?.encode(),
      magneticSwipePinpadEnableFlag?.index,
      magneticSwipePinpadTypeFlag?.index,
      manualPinpadEnableFlag?.index,
      contactlessPinpadEnableFlag?.index,
      contactlessPinpadTypeFlag?.index,
      contactEmvPinpadEnableFlag?.index,
      contactEmvPinpadTypeFlag?.index,
      fallbackSwipePinpadEnableFlag?.index,
      laserScannerFlag?.index,
      frontCameraFlag?.index,
      rearCameraFlag?.index,
      additionalPrompts?.encode(),
      encryptionFlag?.index,
      keySlot,
      paddingChar,
      trackDataSentinel?.index,
      minAccountLength,
      maxAccountLength,
      terminalConfiguration?.encode(),
      tagList,
      timeout,
      statusReportFlag?.index,
      continuousScreen?.index,
      fallbackInsertPinpadEnableFlag?.index,
      ksnFlag?.index,
      customData,
      fallbackToManualPinpadEnableFlag?.index,
      customMacInformation?.encode(),
    ];
  }

  static FullIntegrationInputAccountWithEmvRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationInputAccountWithEmvRequest(
      edcType: result[0] != null
          ? FullIntegrationEdcType.values[result[0]! as int]
          : null,
      transactionType: result[1] != null
          ? FullIntegrationTransactionType.values[result[1]! as int]
          : null,
      amountInformation: result[2] != null
          ? FullIntegrationAmountRequest.decode(result[2]! as List<Object?>)
          : null,
      magneticSwipePinpadEnableFlag: result[3] != null
          ? FullIntegrationPinpadEnableFlag.values[result[3]! as int]
          : null,
      magneticSwipePinpadTypeFlag: result[4] != null
          ? FullIntegrationPinpadTypeFlag.values[result[4]! as int]
          : null,
      manualPinpadEnableFlag: result[5] != null
          ? FullIntegrationPinpadEnableFlag.values[result[5]! as int]
          : null,
      contactlessPinpadEnableFlag: result[6] != null
          ? FullIntegrationPinpadEnableFlag.values[result[6]! as int]
          : null,
      contactlessPinpadTypeFlag: result[7] != null
          ? FullIntegrationPinpadTypeFlag.values[result[7]! as int]
          : null,
      contactEmvPinpadEnableFlag: result[8] != null
          ? FullIntegrationPinpadEnableFlag.values[result[8]! as int]
          : null,
      contactEmvPinpadTypeFlag: result[9] != null
          ? FullIntegrationPinpadTypeFlag.values[result[9]! as int]
          : null,
      fallbackSwipePinpadEnableFlag: result[10] != null
          ? FullIntegrationPinpadEnableFlag.values[result[10]! as int]
          : null,
      laserScannerFlag: result[11] != null
          ? FullIntegrationLaserScannerFlag.values[result[11]! as int]
          : null,
      frontCameraFlag: result[12] != null
          ? FullIntegrationFrontCameraFlag.values[result[12]! as int]
          : null,
      rearCameraFlag: result[13] != null
          ? FullIntegrationRearCameraFlag.values[result[13]! as int]
          : null,
      additionalPrompts: result[14] != null
          ? FullIntegrationAdditionalPrompts.decode(result[14]! as List<Object?>)
          : null,
      encryptionFlag: result[15] != null
          ? FullIntegrationDataEncryptionFlag.values[result[15]! as int]
          : null,
      keySlot: result[16] as String?,
      paddingChar: result[17] as String?,
      trackDataSentinel: result[18] != null
          ? FullIntegrationTrackDataSentinel.values[result[18]! as int]
          : null,
      minAccountLength: result[19] as String?,
      maxAccountLength: result[20] as String?,
      terminalConfiguration: result[21] != null
          ? FullIntegrationTerminalConfiguration.decode(result[21]! as List<Object?>)
          : null,
      tagList: result[22] as String?,
      timeout: result[23] as String?,
      statusReportFlag: result[24] != null
          ? FullIntegrationStatusReportFlag.values[result[24]! as int]
          : null,
      continuousScreen: result[25] != null
          ? FullIntegrationContinuousScreen.values[result[25]! as int]
          : null,
      fallbackInsertPinpadEnableFlag: result[26] != null
          ? FullIntegrationPinpadEnableFlag.values[result[26]! as int]
          : null,
      ksnFlag: result[27] != null
          ? FullIntegrationKsnFlag.values[result[27]! as int]
          : null,
      customData: (result[28] as List<Object?>?)?.cast<String?>(),
      fallbackToManualPinpadEnableFlag: result[29] != null
          ? FullIntegrationPinpadEnableFlag.values[result[29]! as int]
          : null,
      customMacInformation: result[30] != null
          ? FullIntegrationCustomMacInformationRequest.decode(result[30]! as List<Object?>)
          : null,
    );
  }
}

class FullIntegrationGetEmvTlvDataRequest {
  FullIntegrationGetEmvTlvDataRequest({
    this.tlvType,
    this.tagList,
  });

  FullIntegrationTlvType? tlvType;

  String? tagList;

  Object encode() {
    return <Object?>[
      tlvType?.index,
      tagList,
    ];
  }

  static FullIntegrationGetEmvTlvDataRequest decode(Object result) {
    result as List<Object?>;
    return FullIntegrationGetEmvTlvDataRequest(
      tlvType: result[0] != null
          ? FullIntegrationTlvType.values[result[0]! as int]
          : null,
      tagList: result[1] as String?,
    );
  }
}

class FullIntegrationAuthorizeCardResponse {
  FullIntegrationAuthorizeCardResponse({
    this.responseCode,
    this.responseMessage,
    this.authorizationResult,
    this.signatureFlag,
    this.pinBypassStatus,
    this.pinBlock,
    this.ksn,
    this.emvTlvData,
    this.cvm,
    this.pinpadType,
  });

  String? responseCode;

  String? responseMessage;

  FullIntegrationFirstGacResult? authorizationResult;

  FullIntegrationSignatureFlag? signatureFlag;

  FullIntegrationPinBypassStatus? pinBypassStatus;

  String? pinBlock;

  String? ksn;

  String? emvTlvData;

  FullIntegrationCardholderVerificationMethod? cvm;

  FullIntegrationPinpadType? pinpadType;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      authorizationResult?.index,
      signatureFlag?.index,
      pinBypassStatus?.index,
      pinBlock,
      ksn,
      emvTlvData,
      cvm?.index,
      pinpadType?.index,
    ];
  }

  static FullIntegrationAuthorizeCardResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationAuthorizeCardResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      authorizationResult: result[2] != null
          ? FullIntegrationFirstGacResult.values[result[2]! as int]
          : null,
      signatureFlag: result[3] != null
          ? FullIntegrationSignatureFlag.values[result[3]! as int]
          : null,
      pinBypassStatus: result[4] != null
          ? FullIntegrationPinBypassStatus.values[result[4]! as int]
          : null,
      pinBlock: result[5] as String?,
      ksn: result[6] as String?,
      emvTlvData: result[7] as String?,
      cvm: result[8] != null
          ? FullIntegrationCardholderVerificationMethod.values[result[8]! as int]
          : null,
      pinpadType: result[9] != null
          ? FullIntegrationPinpadType.values[result[9]! as int]
          : null,
    );
  }
}

class FullIntegrationCompleteOnlineEmvResponse {
  FullIntegrationCompleteOnlineEmvResponse({
    this.responseCode,
    this.responseMessage,
    this.authorizationResult,
    this.emvTlvData,
    this.issuerScriptResults,
  });

  String? responseCode;

  String? responseMessage;

  FullIntegrationSecondGacResult? authorizationResult;

  String? emvTlvData;

  String? issuerScriptResults;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      authorizationResult?.index,
      emvTlvData,
      issuerScriptResults,
    ];
  }

  static FullIntegrationCompleteOnlineEmvResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationCompleteOnlineEmvResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      authorizationResult: result[2] != null
          ? FullIntegrationSecondGacResult.values[result[2]! as int]
          : null,
      emvTlvData: result[3] as String?,
      issuerScriptResults: result[4] as String?,
    );
  }
}

class FullIntegrationSetEmvTlvDataResponse {
  FullIntegrationSetEmvTlvDataResponse({
    this.responseCode,
    this.responseMessage,
    this.tagList,
  });

  String? responseCode;

  String? responseMessage;

  String? tagList;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      tagList,
    ];
  }

  static FullIntegrationSetEmvTlvDataResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationSetEmvTlvDataResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      tagList: result[2] as String?,
    );
  }
}

class FullIntegrationGetPinBlockResponse {
  FullIntegrationGetPinBlockResponse({
    this.responseCode,
    this.responseMessage,
    this.pinBlock,
    this.ksn,
    this.pinpadType,
  });

  String? responseCode;

  String? responseMessage;

  String? pinBlock;

  String? ksn;

  FullIntegrationPinpadType? pinpadType;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      pinBlock,
      ksn,
      pinpadType?.index,
    ];
  }

  static FullIntegrationGetPinBlockResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationGetPinBlockResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      pinBlock: result[2] as String?,
      ksn: result[3] as String?,
      pinpadType: result[4] != null
          ? FullIntegrationPinpadType.values[result[4]! as int]
          : null,
    );
  }
}

class FullIntegrationCustomMacDataResponse {
  FullIntegrationCustomMacDataResponse({
    this.data,
    this.ksn,
  });

  List<String?>? data;

  String? ksn;

  Object encode() {
    return <Object?>[
      data,
      ksn,
    ];
  }

  static FullIntegrationCustomMacDataResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationCustomMacDataResponse(
      data: (result[0] as List<Object?>?)?.cast<String?>(),
      ksn: result[1] as String?,
    );
  }
}

class FullIntegrationVasResponse {
  FullIntegrationVasResponse({
    this.vasCode,
    this.vasData,
    this.ndefData,
  });

  FullIntegrationVasResponseCode? vasCode;

  List<String?>? vasData;

  String? ndefData;

  Object encode() {
    return <Object?>[
      vasCode?.index,
      vasData,
      ndefData,
    ];
  }

  static FullIntegrationVasResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationVasResponse(
      vasCode: result[0] != null
          ? FullIntegrationVasResponseCode.values[result[0]! as int]
          : null,
      vasData: (result[1] as List<Object?>?)?.cast<String?>(),
      ndefData: result[2] as String?,
    );
  }
}

class FullIntegrationAdditionalAccountResponse {
  FullIntegrationAdditionalAccountResponse({
    this.expiryDate,
    this.cardHolderName,
    this.serviceCode,
    this.cvvCode,
    this.zipCode,
  });

  String? expiryDate;

  String? cardHolderName;

  String? serviceCode;

  String? cvvCode;

  String? zipCode;

  Object encode() {
    return <Object?>[
      expiryDate,
      cardHolderName,
      serviceCode,
      cvvCode,
      zipCode,
    ];
  }

  static FullIntegrationAdditionalAccountResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationAdditionalAccountResponse(
      expiryDate: result[0] as String?,
      cardHolderName: result[1] as String?,
      serviceCode: result[2] as String?,
      cvvCode: result[3] as String?,
      zipCode: result[4] as String?,
    );
  }
}

class FullIntegrationInputAccountWithEmvResponse {
  FullIntegrationInputAccountWithEmvResponse({
    this.responseCode,
    this.responseMessage,
    this.entryMode,
    this.track1Data,
    this.track2Data,
    this.track3Data,
    this.pan,
    this.maskedPan,
    this.barcodeType,
    this.barcodeData,
    this.ksn,
    this.etb,
    this.contactlessTransactionPath,
    this.authorizationResult,
    this.signatureFlag,
    this.onlinePinFlag,
    this.emvTlvData,
    this.encryptedEmvTlvData,
    this.encryptedSensitiveTlvData,
    this.additionalAccountInformation,
    this.cvm,
    this.vasInformation,
    this.pinpadType,
    this.luhnValidationResult,
    this.customEncryptedData,
    this.customMacData,
  });

  String? responseCode;

  String? responseMessage;

  FullIntegrationEntryMode? entryMode;

  String? track1Data;

  String? track2Data;

  String? track3Data;

  String? pan;

  String? maskedPan;

  FullIntegrationBarcodeType? barcodeType;

  String? barcodeData;

  String? ksn;

  String? etb;

  FullIntegrationContactlessTransactionPath? contactlessTransactionPath;

  FullIntegrationFirstGacResult? authorizationResult;

  FullIntegrationSignatureFlag? signatureFlag;

  FullIntegrationOnlinePinFlag? onlinePinFlag;

  String? emvTlvData;

  String? encryptedEmvTlvData;

  String? encryptedSensitiveTlvData;

  FullIntegrationAdditionalAccountResponse? additionalAccountInformation;

  FullIntegrationCardholderVerificationMethod? cvm;

  FullIntegrationVasResponse? vasInformation;

  FullIntegrationPinpadType? pinpadType;

  FullIntegrationLuhnValidationResult? luhnValidationResult;

  List<String?>? customEncryptedData;

  FullIntegrationCustomMacDataResponse? customMacData;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      entryMode?.index,
      track1Data,
      track2Data,
      track3Data,
      pan,
      maskedPan,
      barcodeType?.index,
      barcodeData,
      ksn,
      etb,
      contactlessTransactionPath?.index,
      authorizationResult?.index,
      signatureFlag?.index,
      onlinePinFlag?.index,
      emvTlvData,
      encryptedEmvTlvData,
      encryptedSensitiveTlvData,
      additionalAccountInformation?.encode(),
      cvm?.index,
      vasInformation?.encode(),
      pinpadType?.index,
      luhnValidationResult?.index,
      customEncryptedData,
      customMacData?.encode(),
    ];
  }

  static FullIntegrationInputAccountWithEmvResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationInputAccountWithEmvResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      entryMode: result[2] != null
          ? FullIntegrationEntryMode.values[result[2]! as int]
          : null,
      track1Data: result[3] as String?,
      track2Data: result[4] as String?,
      track3Data: result[5] as String?,
      pan: result[6] as String?,
      maskedPan: result[7] as String?,
      barcodeType: result[8] != null
          ? FullIntegrationBarcodeType.values[result[8]! as int]
          : null,
      barcodeData: result[9] as String?,
      ksn: result[10] as String?,
      etb: result[11] as String?,
      contactlessTransactionPath: result[12] != null
          ? FullIntegrationContactlessTransactionPath.values[result[12]! as int]
          : null,
      authorizationResult: result[13] != null
          ? FullIntegrationFirstGacResult.values[result[13]! as int]
          : null,
      signatureFlag: result[14] != null
          ? FullIntegrationSignatureFlag.values[result[14]! as int]
          : null,
      onlinePinFlag: result[15] != null
          ? FullIntegrationOnlinePinFlag.values[result[15]! as int]
          : null,
      emvTlvData: result[16] as String?,
      encryptedEmvTlvData: result[17] as String?,
      encryptedSensitiveTlvData: result[18] as String?,
      additionalAccountInformation: result[19] != null
          ? FullIntegrationAdditionalAccountResponse.decode(result[19]! as List<Object?>)
          : null,
      cvm: result[20] != null
          ? FullIntegrationCardholderVerificationMethod.values[result[20]! as int]
          : null,
      vasInformation: result[21] != null
          ? FullIntegrationVasResponse.decode(result[21]! as List<Object?>)
          : null,
      pinpadType: result[22] != null
          ? FullIntegrationPinpadType.values[result[22]! as int]
          : null,
      luhnValidationResult: result[23] != null
          ? FullIntegrationLuhnValidationResult.values[result[23]! as int]
          : null,
      customEncryptedData: (result[24] as List<Object?>?)?.cast<String?>(),
      customMacData: result[25] != null
          ? FullIntegrationCustomMacDataResponse.decode(result[25]! as List<Object?>)
          : null,
    );
  }
}

class FullIntegrationGetEmvTlvDataResponse {
  FullIntegrationGetEmvTlvDataResponse({
    this.responseCode,
    this.responseMessage,
    this.emvTlvData,
  });

  String? responseCode;

  String? responseMessage;

  String? emvTlvData;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      emvTlvData,
    ];
  }

  static FullIntegrationGetEmvTlvDataResponse decode(Object result) {
    result as List<Object?>;
    return FullIntegrationGetEmvTlvDataResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      emvTlvData: result[2] as String?,
    );
  }
}

class _POSLinkFullIntegrationApiCodec extends StandardMessageCodec {
  const _POSLinkFullIntegrationApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FullIntegrationAdditionalAccountResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationAdditionalPrompts) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationAmountRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationAuthorizeCardRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationAuthorizeCardResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationCompleteOnlineEmvRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationCompleteOnlineEmvResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationCustomMacDataResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationCustomMacInformationRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationGetEmvTlvDataRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationGetEmvTlvDataResponse) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationGetPinBlockRequest) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationGetPinBlockResponse) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationInputAccountWithEmvRequest) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationInputAccountWithEmvResponse) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationSetEmvTlvDataRequest) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationSetEmvTlvDataResponse) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationTerminalConfiguration) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is FullIntegrationVasResponse) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FullIntegrationAdditionalAccountResponse.decode(readValue(buffer)!);
      case 129: 
        return FullIntegrationAdditionalPrompts.decode(readValue(buffer)!);
      case 130: 
        return FullIntegrationAmountRequest.decode(readValue(buffer)!);
      case 131: 
        return FullIntegrationAuthorizeCardRequest.decode(readValue(buffer)!);
      case 132: 
        return FullIntegrationAuthorizeCardResponse.decode(readValue(buffer)!);
      case 133: 
        return FullIntegrationCompleteOnlineEmvRequest.decode(readValue(buffer)!);
      case 134: 
        return FullIntegrationCompleteOnlineEmvResponse.decode(readValue(buffer)!);
      case 135: 
        return FullIntegrationCustomMacDataResponse.decode(readValue(buffer)!);
      case 136: 
        return FullIntegrationCustomMacInformationRequest.decode(readValue(buffer)!);
      case 137: 
        return FullIntegrationGetEmvTlvDataRequest.decode(readValue(buffer)!);
      case 138: 
        return FullIntegrationGetEmvTlvDataResponse.decode(readValue(buffer)!);
      case 139: 
        return FullIntegrationGetPinBlockRequest.decode(readValue(buffer)!);
      case 140: 
        return FullIntegrationGetPinBlockResponse.decode(readValue(buffer)!);
      case 141: 
        return FullIntegrationInputAccountWithEmvRequest.decode(readValue(buffer)!);
      case 142: 
        return FullIntegrationInputAccountWithEmvResponse.decode(readValue(buffer)!);
      case 143: 
        return FullIntegrationSetEmvTlvDataRequest.decode(readValue(buffer)!);
      case 144: 
        return FullIntegrationSetEmvTlvDataResponse.decode(readValue(buffer)!);
      case 145: 
        return FullIntegrationTerminalConfiguration.decode(readValue(buffer)!);
      case 146: 
        return FullIntegrationVasResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkFullIntegrationApi {
  /// Constructor for [POSLinkFullIntegrationApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkFullIntegrationApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkFullIntegrationApiCodec();

  Future<FullIntegrationGetEmvTlvDataResponse> getEmvTlvData(FullIntegrationGetEmvTlvDataRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFullIntegrationApi.getEmvTlvData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FullIntegrationGetEmvTlvDataResponse?)!;
    }
  }

  Future<FullIntegrationInputAccountWithEmvResponse> inputAccountWithEmv(FullIntegrationInputAccountWithEmvRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFullIntegrationApi.inputAccountWithEmv', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FullIntegrationInputAccountWithEmvResponse?)!;
    }
  }

  Future<FullIntegrationCompleteOnlineEmvResponse> completeOnlineEmv(FullIntegrationCompleteOnlineEmvRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFullIntegrationApi.completeOnlineEmv', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FullIntegrationCompleteOnlineEmvResponse?)!;
    }
  }

  Future<FullIntegrationAuthorizeCardResponse> authorizeCard(FullIntegrationAuthorizeCardRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFullIntegrationApi.authorizeCard', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FullIntegrationAuthorizeCardResponse?)!;
    }
  }

  Future<FullIntegrationGetPinBlockResponse> getPinBlock(FullIntegrationGetPinBlockRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFullIntegrationApi.getPinBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FullIntegrationGetPinBlockResponse?)!;
    }
  }

  Future<FullIntegrationSetEmvTlvDataResponse> setEmvTlvData(FullIntegrationSetEmvTlvDataRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFullIntegrationApi.setEmvTlvData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FullIntegrationSetEmvTlvDataResponse?)!;
    }
  }
}
