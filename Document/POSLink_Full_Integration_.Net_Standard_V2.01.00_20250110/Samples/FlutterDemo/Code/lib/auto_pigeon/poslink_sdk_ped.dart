// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum PedKeyType {
  NotSet,
  MasterKey,
  SessionKey,
  DesDukptKey,
  AesDukptKey,
}

enum PedDestinationKeyType {
  NotSet,
  Tpk,
  Tak,
  Tdk,
}

enum PedCheckMode {
  NotSet,
  NoKcvCheck,
  DesOrTdesEncryptionAndCheckKcv,
}

enum PedMacWorkMode {
  NotSet,
  AnsiX99,
  HypercomFastMode,
  AnsiX919,
  Sha1,
  Sha256,
}

enum PedMacCalculationKeyType {
  NotSet,
  Tak,
  DesDukptKey,
  AesDukptKey,
  Aes192DukptKey,
  Aes256DukptKey,
}

enum PedKsnFlag {
  NotSet,
  NotIncrease,
  Increase,
}

class PedMacCalculationRequest {
  PedMacCalculationRequest({
    this.inputData,
    this.encryptionBitmap,
    this.macKeySlot,
    this.macWorkMode,
    this.encryptionKeySlot,
    this.paddingChar,
    this.macKeyType,
    this.ksnFlag,
  });

  String? inputData;

  String? encryptionBitmap;

  String? macKeySlot;

  PedMacWorkMode? macWorkMode;

  String? encryptionKeySlot;

  String? paddingChar;

  PedMacCalculationKeyType? macKeyType;

  PedKsnFlag? ksnFlag;

  Object encode() {
    return <Object?>[
      inputData,
      encryptionBitmap,
      macKeySlot,
      macWorkMode?.index,
      encryptionKeySlot,
      paddingChar,
      macKeyType?.index,
      ksnFlag?.index,
    ];
  }

  static PedMacCalculationRequest decode(Object result) {
    result as List<Object?>;
    return PedMacCalculationRequest(
      inputData: result[0] as String?,
      encryptionBitmap: result[1] as String?,
      macKeySlot: result[2] as String?,
      macWorkMode: result[3] != null
          ? PedMacWorkMode.values[result[3]! as int]
          : null,
      encryptionKeySlot: result[4] as String?,
      paddingChar: result[5] as String?,
      macKeyType: result[6] != null
          ? PedMacCalculationKeyType.values[result[6]! as int]
          : null,
      ksnFlag: result[7] != null
          ? PedKsnFlag.values[result[7]! as int]
          : null,
    );
  }
}

class PedSessionKeyInjectionRequest {
  PedSessionKeyInjectionRequest({
    this.sourceKeyType,
    this.sourceKeyIndex,
    this.destinationKeyType,
    this.destinationKeyIndex,
    this.destinationKeyValue,
    this.checkMode,
    this.checkBuffer,
  });

  String? sourceKeyType;

  String? sourceKeyIndex;

  PedDestinationKeyType? destinationKeyType;

  String? destinationKeyIndex;

  String? destinationKeyValue;

  PedCheckMode? checkMode;

  String? checkBuffer;

  Object encode() {
    return <Object?>[
      sourceKeyType,
      sourceKeyIndex,
      destinationKeyType?.index,
      destinationKeyIndex,
      destinationKeyValue,
      checkMode?.index,
      checkBuffer,
    ];
  }

  static PedSessionKeyInjectionRequest decode(Object result) {
    result as List<Object?>;
    return PedSessionKeyInjectionRequest(
      sourceKeyType: result[0] as String?,
      sourceKeyIndex: result[1] as String?,
      destinationKeyType: result[2] != null
          ? PedDestinationKeyType.values[result[2]! as int]
          : null,
      destinationKeyIndex: result[3] as String?,
      destinationKeyValue: result[4] as String?,
      checkMode: result[5] != null
          ? PedCheckMode.values[result[5]! as int]
          : null,
      checkBuffer: result[6] as String?,
    );
  }
}

class PedIncreaseKsnRequest {
  PedIncreaseKsnRequest({
    this.keyType,
    this.keySlot,
  });

  PedKeyType? keyType;

  String? keySlot;

  Object encode() {
    return <Object?>[
      keyType?.index,
      keySlot,
    ];
  }

  static PedIncreaseKsnRequest decode(Object result) {
    result as List<Object?>;
    return PedIncreaseKsnRequest(
      keyType: result[0] != null
          ? PedKeyType.values[result[0]! as int]
          : null,
      keySlot: result[1] as String?,
    );
  }
}

class PedGetPedInformationRequest {
  PedGetPedInformationRequest({
    this.keyType,
    this.keySlot,
  });

  PedKeyType? keyType;

  String? keySlot;

  Object encode() {
    return <Object?>[
      keyType?.index,
      keySlot,
    ];
  }

  static PedGetPedInformationRequest decode(Object result) {
    result as List<Object?>;
    return PedGetPedInformationRequest(
      keyType: result[0] != null
          ? PedKeyType.values[result[0]! as int]
          : null,
      keySlot: result[1] as String?,
    );
  }
}

class PedMasterSessionKeyInformation {
  PedMasterSessionKeyInformation({
    this.keySlot,
    this.kcv,
  });

  String? keySlot;

  String? kcv;

  Object encode() {
    return <Object?>[
      keySlot,
      kcv,
    ];
  }

  static PedMasterSessionKeyInformation decode(Object result) {
    result as List<Object?>;
    return PedMasterSessionKeyInformation(
      keySlot: result[0] as String?,
      kcv: result[1] as String?,
    );
  }
}

class PedDukptKeyInformation {
  PedDukptKeyInformation({
    this.keySlot,
    this.ksn,
    this.kcv,
  });

  String? keySlot;

  String? ksn;

  String? kcv;

  Object encode() {
    return <Object?>[
      keySlot,
      ksn,
      kcv,
    ];
  }

  static PedDukptKeyInformation decode(Object result) {
    result as List<Object?>;
    return PedDukptKeyInformation(
      keySlot: result[0] as String?,
      ksn: result[1] as String?,
      kcv: result[2] as String?,
    );
  }
}

class PedGetPedInformationResponse {
  PedGetPedInformationResponse({
    this.responseCode,
    this.responseMessage,
    this.masterAvailableKeySlotCount,
    this.sessionAvailableKeySlotCount,
    this.dukptAvailableKeySlotCount,
    this.aesDukptAvailableKeySlotCount,
    this.tmk,
    this.tpk,
    this.tak,
    this.tdk,
    this.dukptKey,
    this.aesDukptKey,
  });

  String? responseCode;

  String? responseMessage;

  String? masterAvailableKeySlotCount;

  String? sessionAvailableKeySlotCount;

  String? dukptAvailableKeySlotCount;

  String? aesDukptAvailableKeySlotCount;

  List<PedMasterSessionKeyInformation?>? tmk;

  List<PedMasterSessionKeyInformation?>? tpk;

  List<PedMasterSessionKeyInformation?>? tak;

  List<PedMasterSessionKeyInformation?>? tdk;

  List<PedDukptKeyInformation?>? dukptKey;

  List<PedDukptKeyInformation?>? aesDukptKey;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      masterAvailableKeySlotCount,
      sessionAvailableKeySlotCount,
      dukptAvailableKeySlotCount,
      aesDukptAvailableKeySlotCount,
      tmk,
      tpk,
      tak,
      tdk,
      dukptKey,
      aesDukptKey,
    ];
  }

  static PedGetPedInformationResponse decode(Object result) {
    result as List<Object?>;
    return PedGetPedInformationResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      masterAvailableKeySlotCount: result[2] as String?,
      sessionAvailableKeySlotCount: result[3] as String?,
      dukptAvailableKeySlotCount: result[4] as String?,
      aesDukptAvailableKeySlotCount: result[5] as String?,
      tmk: (result[6] as List<Object?>?)?.cast<PedMasterSessionKeyInformation?>(),
      tpk: (result[7] as List<Object?>?)?.cast<PedMasterSessionKeyInformation?>(),
      tak: (result[8] as List<Object?>?)?.cast<PedMasterSessionKeyInformation?>(),
      tdk: (result[9] as List<Object?>?)?.cast<PedMasterSessionKeyInformation?>(),
      dukptKey: (result[10] as List<Object?>?)?.cast<PedDukptKeyInformation?>(),
      aesDukptKey: (result[11] as List<Object?>?)?.cast<PedDukptKeyInformation?>(),
    );
  }
}

class PedMacCalculationResponse {
  PedMacCalculationResponse({
    this.responseCode,
    this.responseMessage,
    this.resultData,
    this.ksn,
  });

  String? responseCode;

  String? responseMessage;

  String? resultData;

  String? ksn;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      resultData,
      ksn,
    ];
  }

  static PedMacCalculationResponse decode(Object result) {
    result as List<Object?>;
    return PedMacCalculationResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      resultData: result[2] as String?,
      ksn: result[3] as String?,
    );
  }
}

class PedSessionKeyInjectionResponse {
  PedSessionKeyInjectionResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static PedSessionKeyInjectionResponse decode(Object result) {
    result as List<Object?>;
    return PedSessionKeyInjectionResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class PedIncreaseKsnResponse {
  PedIncreaseKsnResponse({
    this.responseCode,
    this.responseMessage,
    this.ksn,
  });

  String? responseCode;

  String? responseMessage;

  String? ksn;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      ksn,
    ];
  }

  static PedIncreaseKsnResponse decode(Object result) {
    result as List<Object?>;
    return PedIncreaseKsnResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      ksn: result[2] as String?,
    );
  }
}

class _POSLinkPedApiCodec extends StandardMessageCodec {
  const _POSLinkPedApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PedDukptKeyInformation) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PedGetPedInformationRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PedGetPedInformationResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PedIncreaseKsnRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PedIncreaseKsnResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PedMacCalculationRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PedMacCalculationResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PedMasterSessionKeyInformation) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PedSessionKeyInjectionRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PedSessionKeyInjectionResponse) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PedDukptKeyInformation.decode(readValue(buffer)!);
      case 129: 
        return PedGetPedInformationRequest.decode(readValue(buffer)!);
      case 130: 
        return PedGetPedInformationResponse.decode(readValue(buffer)!);
      case 131: 
        return PedIncreaseKsnRequest.decode(readValue(buffer)!);
      case 132: 
        return PedIncreaseKsnResponse.decode(readValue(buffer)!);
      case 133: 
        return PedMacCalculationRequest.decode(readValue(buffer)!);
      case 134: 
        return PedMacCalculationResponse.decode(readValue(buffer)!);
      case 135: 
        return PedMasterSessionKeyInformation.decode(readValue(buffer)!);
      case 136: 
        return PedSessionKeyInjectionRequest.decode(readValue(buffer)!);
      case 137: 
        return PedSessionKeyInjectionResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkPedApi {
  /// Constructor for [POSLinkPedApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkPedApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkPedApiCodec();

  Future<PedGetPedInformationResponse> getPedInformation(PedGetPedInformationRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkPedApi.getPedInformation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PedGetPedInformationResponse?)!;
    }
  }

  Future<PedIncreaseKsnResponse> increaseKsn(PedIncreaseKsnRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkPedApi.increaseKsn', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PedIncreaseKsnResponse?)!;
    }
  }

  Future<PedSessionKeyInjectionResponse> sessionKeyInjection(PedSessionKeyInjectionRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkPedApi.sessionKeyInjection', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PedSessionKeyInjectionResponse?)!;
    }
  }

  Future<PedMacCalculationResponse> macCalculation(PedMacCalculationRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkPedApi.macCalculation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PedMacCalculationResponse?)!;
    }
  }
}
