// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ManageTouchscreenStatus {
  NotSet,
  Use,
  NotUse,
}

enum ManageAppActivated {
  NotSet,
  Activated,
  NotActivated,
}

enum ManageProtocolFlag {
  NotSet,
  Visa1,
  Json,
}

enum ManageUploadFlag {
  NotUploadToHost,
  UploadToHost,
}

enum ManageEdcType {
  NotSet,
  All,
  Credit,
  Debit,
  Ebt,
  Gift,
  Loyalty,
  Cash,
  QrPayment,
}

enum ManageContinuousScreen {
  NotSet,
  Default,
  NotGoToIdleScreen,
}

enum ManageVasMode {
  NotSet,
  VasOnly,
  VasAndPayment,
  VasOrPayment,
  PaymentOnly,
}

enum ManageSecurity {
  NotSet,
  Normal,
  Securely,
  PreSignature,
  NeedNotARightAuth,
}

enum ManageServiceState {
  NotSet,
  Unspecified,
  Success,
  InvalidFormat,
  InvalidValue,
}

enum ManageUpdateOperation {
  NotSet,
  NoOperation,
  RemoveServiceObject,
  SetBalance,
  AddBalance,
  SubtractBalance,
  Free,
}

enum ManageNewServiceType {
  NotSet,
  Unspecified,
  Valuable,
  Receipt,
  Survey,
  Goods,
  Signup,
}

enum ManageEndTap {
  NotSet,
  NormalFlow,
  StopTapSession,
}

enum ManageOseToPpse {
  NotSet,
  NormalFlow,
  StopVasAndDoPaymentDirectly,
}

enum ManageUrlMode {
  NotSet,
  FullVasMode,
  UrlMode,
}

enum ManageFileType {
  NotSet,
  ResourceFile,
  OfflineRkiKeyFile,
  InstallationPackageFile,
  licenseFile,
}

enum ManageTargetDevice {
  NotSet,
  Terminal,
  ExternalPinpad,
}

class ManageMultiMerchant {
  ManageMultiMerchant({
    this.multiMerchantId,
    this.multiMerchantName,
  });

  String? multiMerchantId;

  String? multiMerchantName;

  Object encode() {
    return <Object?>[
      multiMerchantId,
      multiMerchantName,
    ];
  }

  static ManageMultiMerchant decode(Object result) {
    result as List<Object?>;
    return ManageMultiMerchant(
      multiMerchantId: result[0] as String?,
      multiMerchantName: result[1] as String?,
    );
  }
}

class ManageSetVariableRequest {
  ManageSetVariableRequest({
    this.edcType,
    this.variableName1,
    this.variableValue1,
    this.variableName2,
    this.variableValue2,
    this.variableName3,
    this.variableValue3,
    this.variableName4,
    this.variableValue4,
    this.variableName5,
    this.variableValue5,
    this.multiMerchant,
  });

  ManageEdcType? edcType;

  String? variableName1;

  String? variableValue1;

  String? variableName2;

  String? variableValue2;

  String? variableName3;

  String? variableValue3;

  String? variableName4;

  String? variableValue4;

  String? variableName5;

  String? variableValue5;

  ManageMultiMerchant? multiMerchant;

  Object encode() {
    return <Object?>[
      edcType?.index,
      variableName1,
      variableValue1,
      variableName2,
      variableValue2,
      variableName3,
      variableValue3,
      variableName4,
      variableValue4,
      variableName5,
      variableValue5,
      multiMerchant?.encode(),
    ];
  }

  static ManageSetVariableRequest decode(Object result) {
    result as List<Object?>;
    return ManageSetVariableRequest(
      edcType: result[0] != null
          ? ManageEdcType.values[result[0]! as int]
          : null,
      variableName1: result[1] as String?,
      variableValue1: result[2] as String?,
      variableName2: result[3] as String?,
      variableValue2: result[4] as String?,
      variableName3: result[5] as String?,
      variableValue3: result[6] as String?,
      variableName4: result[7] as String?,
      variableValue4: result[8] as String?,
      variableName5: result[9] as String?,
      variableValue5: result[10] as String?,
      multiMerchant: result[11] != null
          ? ManageMultiMerchant.decode(result[11]! as List<Object?>)
          : null,
    );
  }
}

class ManageNewService {
  ManageNewService({
    this.type,
    this.title,
    this.url,
  });

  ManageNewServiceType? type;

  String? title;

  String? url;

  Object encode() {
    return <Object?>[
      type?.index,
      title,
      url,
    ];
  }

  static ManageNewService decode(Object result) {
    result as List<Object?>;
    return ManageNewService(
      type: result[0] != null
          ? ManageNewServiceType.values[result[0]! as int]
          : null,
      title: result[1] as String?,
      url: result[2] as String?,
    );
  }
}

class ManageServiceUpdate {
  ManageServiceUpdate({
    this.updateId,
    this.updateOperation,
    this.updatePayload,
  });

  String? updateId;

  ManageUpdateOperation? updateOperation;

  String? updatePayload;

  Object encode() {
    return <Object?>[
      updateId,
      updateOperation?.index,
      updatePayload,
    ];
  }

  static ManageServiceUpdate decode(Object result) {
    result as List<Object?>;
    return ManageServiceUpdate(
      updateId: result[0] as String?,
      updateOperation: result[1] != null
          ? ManageUpdateOperation.values[result[1]! as int]
          : null,
      updatePayload: result[2] as String?,
    );
  }
}

class ManageServiceUsage {
  ManageServiceUsage({
    this.usageId,
    this.state,
    this.title,
    this.describe,
  });

  String? usageId;

  ManageServiceState? state;

  String? title;

  String? describe;

  Object encode() {
    return <Object?>[
      usageId,
      state?.index,
      title,
      describe,
    ];
  }

  static ManageServiceUsage decode(Object result) {
    result as List<Object?>;
    return ManageServiceUsage(
      usageId: result[0] as String?,
      state: result[1] != null
          ? ManageServiceState.values[result[1]! as int]
          : null,
      title: result[2] as String?,
      describe: result[3] as String?,
    );
  }
}

class ManageGoogleSmartTapCapBitmap {
  ManageGoogleSmartTapCapBitmap({
    this.standAlone,
    this.semiIntegrated,
    this.unattended,
    this.online,
    this.offline,
    this.mmp,
    this.zlibSupport,
    this.printer,
    this.printerGraphics,
    this.display,
    this.images,
    this.audio,
    this.animation,
    this.video,
    this.supportPayment,
    this.supportDigitalReceipt,
    this.supportServiceIssuance,
    this.supportOtaPosData,
    this.onlinePin,
    this.cdPin,
    this.signature,
    this.noCvm,
    this.deviceGeneratedCode,
    this.spGeneratedCode,
    this.idCapture,
    this.bioMetric,
  });

  bool? standAlone;

  bool? semiIntegrated;

  bool? unattended;

  bool? online;

  bool? offline;

  bool? mmp;

  bool? zlibSupport;

  bool? printer;

  bool? printerGraphics;

  bool? display;

  bool? images;

  bool? audio;

  bool? animation;

  bool? video;

  bool? supportPayment;

  bool? supportDigitalReceipt;

  bool? supportServiceIssuance;

  bool? supportOtaPosData;

  bool? onlinePin;

  bool? cdPin;

  bool? signature;

  bool? noCvm;

  bool? deviceGeneratedCode;

  bool? spGeneratedCode;

  bool? idCapture;

  bool? bioMetric;

  Object encode() {
    return <Object?>[
      standAlone,
      semiIntegrated,
      unattended,
      online,
      offline,
      mmp,
      zlibSupport,
      printer,
      printerGraphics,
      display,
      images,
      audio,
      animation,
      video,
      supportPayment,
      supportDigitalReceipt,
      supportServiceIssuance,
      supportOtaPosData,
      onlinePin,
      cdPin,
      signature,
      noCvm,
      deviceGeneratedCode,
      spGeneratedCode,
      idCapture,
      bioMetric,
    ];
  }

  static ManageGoogleSmartTapCapBitmap decode(Object result) {
    result as List<Object?>;
    return ManageGoogleSmartTapCapBitmap(
      standAlone: result[0] as bool?,
      semiIntegrated: result[1] as bool?,
      unattended: result[2] as bool?,
      online: result[3] as bool?,
      offline: result[4] as bool?,
      mmp: result[5] as bool?,
      zlibSupport: result[6] as bool?,
      printer: result[7] as bool?,
      printerGraphics: result[8] as bool?,
      display: result[9] as bool?,
      images: result[10] as bool?,
      audio: result[11] as bool?,
      animation: result[12] as bool?,
      video: result[13] as bool?,
      supportPayment: result[14] as bool?,
      supportDigitalReceipt: result[15] as bool?,
      supportServiceIssuance: result[16] as bool?,
      supportOtaPosData: result[17] as bool?,
      onlinePin: result[18] as bool?,
      cdPin: result[19] as bool?,
      signature: result[20] as bool?,
      noCvm: result[21] as bool?,
      deviceGeneratedCode: result[22] as bool?,
      spGeneratedCode: result[23] as bool?,
      idCapture: result[24] as bool?,
      bioMetric: result[25] as bool?,
    );
  }
}

class ManageGoogleSmartTapPushService {
  ManageGoogleSmartTapPushService({
    this.security,
    this.googleSmartTapCap,
    this.collectId,
    this.googleServiceUsage,
    this.googleServiceUpdate,
    this.googleNewService,
    this.endTap,
  });

  ManageSecurity? security;

  ManageGoogleSmartTapCapBitmap? googleSmartTapCap;

  String? collectId;

  List<ManageServiceUsage?>? googleServiceUsage;

  List<ManageServiceUpdate?>? googleServiceUpdate;

  List<ManageNewService?>? googleNewService;

  ManageEndTap? endTap;

  Object encode() {
    return <Object?>[
      security?.index,
      googleSmartTapCap?.encode(),
      collectId,
      googleServiceUsage,
      googleServiceUpdate,
      googleNewService,
      endTap?.index,
    ];
  }

  static ManageGoogleSmartTapPushService decode(Object result) {
    result as List<Object?>;
    return ManageGoogleSmartTapPushService(
      security: result[0] != null
          ? ManageSecurity.values[result[0]! as int]
          : null,
      googleSmartTapCap: result[1] != null
          ? ManageGoogleSmartTapCapBitmap.decode(result[1]! as List<Object?>)
          : null,
      collectId: result[2] as String?,
      googleServiceUsage: (result[3] as List<Object?>?)?.cast<ManageServiceUsage?>(),
      googleServiceUpdate: (result[4] as List<Object?>?)?.cast<ManageServiceUpdate?>(),
      googleNewService: (result[5] as List<Object?>?)?.cast<ManageNewService?>(),
      endTap: result[6] != null
          ? ManageEndTap.values[result[6]! as int]
          : null,
    );
  }
}

class ManageRebootRequest {
  ManageRebootRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static ManageRebootRequest decode(Object result) {
    result as List<Object?>;
    return ManageRebootRequest(
      classID: result[0] as String?,
    );
  }
}

class ManageUpdateResourceFileRequest {
  ManageUpdateResourceFileRequest({
    this.fileUrl,
    this.fileType,
    this.targetDevice,
  });

  String? fileUrl;

  ManageFileType? fileType;

  ManageTargetDevice? targetDevice;

  Object encode() {
    return <Object?>[
      fileUrl,
      fileType?.index,
      targetDevice?.index,
    ];
  }

  static ManageUpdateResourceFileRequest decode(Object result) {
    result as List<Object?>;
    return ManageUpdateResourceFileRequest(
      fileUrl: result[0] as String?,
      fileType: result[1] != null
          ? ManageFileType.values[result[1]! as int]
          : null,
      targetDevice: result[2] != null
          ? ManageTargetDevice.values[result[2]! as int]
          : null,
    );
  }
}

class ManageGetVariableRequest {
  ManageGetVariableRequest({
    this.edcType,
    this.variableName1,
    this.variableName2,
    this.variableName3,
    this.variableName4,
    this.variableName5,
    this.multiMerchant,
  });

  ManageEdcType? edcType;

  String? variableName1;

  String? variableName2;

  String? variableName3;

  String? variableName4;

  String? variableName5;

  ManageMultiMerchant? multiMerchant;

  Object encode() {
    return <Object?>[
      edcType?.index,
      variableName1,
      variableName2,
      variableName3,
      variableName4,
      variableName5,
      multiMerchant?.encode(),
    ];
  }

  static ManageGetVariableRequest decode(Object result) {
    result as List<Object?>;
    return ManageGetVariableRequest(
      edcType: result[0] != null
          ? ManageEdcType.values[result[0]! as int]
          : null,
      variableName1: result[1] as String?,
      variableName2: result[2] as String?,
      variableName3: result[3] as String?,
      variableName4: result[4] as String?,
      variableName5: result[5] as String?,
      multiMerchant: result[6] != null
          ? ManageMultiMerchant.decode(result[6]! as List<Object?>)
          : null,
    );
  }
}

class ManageResetScreenRequest {
  ManageResetScreenRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static ManageResetScreenRequest decode(Object result) {
    result as List<Object?>;
    return ManageResetScreenRequest(
      classID: result[0] as String?,
    );
  }
}

class ManageApplePayVas {
  ManageApplePayVas({
    this.merchantId,
    this.urlMode,
    this.url,
    this.keyFileMapping,
  });

  String? merchantId;

  ManageUrlMode? urlMode;

  String? url;

  List<String?>? keyFileMapping;

  Object encode() {
    return <Object?>[
      merchantId,
      urlMode?.index,
      url,
      keyFileMapping,
    ];
  }

  static ManageApplePayVas decode(Object result) {
    result as List<Object?>;
    return ManageApplePayVas(
      merchantId: result[0] as String?,
      urlMode: result[1] != null
          ? ManageUrlMode.values[result[1]! as int]
          : null,
      url: result[2] as String?,
      keyFileMapping: (result[3] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class ManageGetSignatureRequest {
  ManageGetSignatureRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static ManageGetSignatureRequest decode(Object result) {
    result as List<Object?>;
    return ManageGetSignatureRequest(
      classID: result[0] as String?,
    );
  }
}

class ManageSetApplePayVasParametersRequest {
  ManageSetApplePayVasParametersRequest({
    this.vasMode,
    this.applePayVasData,
  });

  ManageVasMode? vasMode;

  ManageApplePayVas? applePayVasData;

  Object encode() {
    return <Object?>[
      vasMode?.index,
      applePayVasData?.encode(),
    ];
  }

  static ManageSetApplePayVasParametersRequest decode(Object result) {
    result as List<Object?>;
    return ManageSetApplePayVasParametersRequest(
      vasMode: result[0] != null
          ? ManageVasMode.values[result[0]! as int]
          : null,
      applePayVasData: result[1] != null
          ? ManageApplePayVas.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class ManageClearCardBufferRequest {
  ManageClearCardBufferRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static ManageClearCardBufferRequest decode(Object result) {
    result as List<Object?>;
    return ManageClearCardBufferRequest(
      classID: result[0] as String?,
    );
  }
}

class ManageCheckFileRequest {
  ManageCheckFileRequest({
    this.fileName,
  });

  String? fileName;

  Object encode() {
    return <Object?>[
      fileName,
    ];
  }

  static ManageCheckFileRequest decode(Object result) {
    result as List<Object?>;
    return ManageCheckFileRequest(
      fileName: result[0] as String?,
    );
  }
}

class ManageGoogleServiceTypeBitmap {
  ManageGoogleServiceTypeBitmap({
    this.allServices,
    this.allServicesExceptPpse,
    this.ppse,
    this.loyalty,
    this.offer,
    this.giftCard1,
    this.privateLabelCard,
    this.cloudBasedWallet,
    this.mobileMarketingPlatform,
    this.walletCustomer,
  });

  bool? allServices;

  bool? allServicesExceptPpse;

  bool? ppse;

  bool? loyalty;

  bool? offer;

  bool? giftCard1;

  bool? privateLabelCard;

  bool? cloudBasedWallet;

  bool? mobileMarketingPlatform;

  bool? walletCustomer;

  Object encode() {
    return <Object?>[
      allServices,
      allServicesExceptPpse,
      ppse,
      loyalty,
      offer,
      giftCard1,
      privateLabelCard,
      cloudBasedWallet,
      mobileMarketingPlatform,
      walletCustomer,
    ];
  }

  static ManageGoogleServiceTypeBitmap decode(Object result) {
    result as List<Object?>;
    return ManageGoogleServiceTypeBitmap(
      allServices: result[0] as bool?,
      allServicesExceptPpse: result[1] as bool?,
      ppse: result[2] as bool?,
      loyalty: result[3] as bool?,
      offer: result[4] as bool?,
      giftCard1: result[5] as bool?,
      privateLabelCard: result[6] as bool?,
      cloudBasedWallet: result[7] as bool?,
      mobileMarketingPlatform: result[8] as bool?,
      walletCustomer: result[9] as bool?,
    );
  }
}

class ManageGoogleSmartTap {
  ManageGoogleSmartTap({
    this.googleSmartTapCap,
    this.collectId,
    this.storeLocalId,
    this.terminalId,
    this.merchantName,
    this.merchantCategory,
    this.serviceType,
    this.security,
    this.endTap,
    this.oseToPpse,
  });

  ManageGoogleSmartTapCapBitmap? googleSmartTapCap;

  String? collectId;

  String? storeLocalId;

  String? terminalId;

  String? merchantName;

  String? merchantCategory;

  ManageGoogleServiceTypeBitmap? serviceType;

  ManageSecurity? security;

  ManageEndTap? endTap;

  ManageOseToPpse? oseToPpse;

  Object encode() {
    return <Object?>[
      googleSmartTapCap?.encode(),
      collectId,
      storeLocalId,
      terminalId,
      merchantName,
      merchantCategory,
      serviceType?.encode(),
      security?.index,
      endTap?.index,
      oseToPpse?.index,
    ];
  }

  static ManageGoogleSmartTap decode(Object result) {
    result as List<Object?>;
    return ManageGoogleSmartTap(
      googleSmartTapCap: result[0] != null
          ? ManageGoogleSmartTapCapBitmap.decode(result[0]! as List<Object?>)
          : null,
      collectId: result[1] as String?,
      storeLocalId: result[2] as String?,
      terminalId: result[3] as String?,
      merchantName: result[4] as String?,
      merchantCategory: result[5] as String?,
      serviceType: result[6] != null
          ? ManageGoogleServiceTypeBitmap.decode(result[6]! as List<Object?>)
          : null,
      security: result[7] != null
          ? ManageSecurity.values[result[7]! as int]
          : null,
      endTap: result[8] != null
          ? ManageEndTap.values[result[8]! as int]
          : null,
      oseToPpse: result[9] != null
          ? ManageOseToPpse.values[result[9]! as int]
          : null,
    );
  }
}

class ManageSetGoogleSmartTapParametersRequest {
  ManageSetGoogleSmartTapParametersRequest({
    this.vasMode,
    this.googleSmartTapData,
  });

  ManageVasMode? vasMode;

  ManageGoogleSmartTap? googleSmartTapData;

  Object encode() {
    return <Object?>[
      vasMode?.index,
      googleSmartTapData?.encode(),
    ];
  }

  static ManageSetGoogleSmartTapParametersRequest decode(Object result) {
    result as List<Object?>;
    return ManageSetGoogleSmartTapParametersRequest(
      vasMode: result[0] != null
          ? ManageVasMode.values[result[0]! as int]
          : null,
      googleSmartTapData: result[1] != null
          ? ManageGoogleSmartTap.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class ManageInitRequest {
  ManageInitRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static ManageInitRequest decode(Object result) {
    result as List<Object?>;
    return ManageInitRequest(
      classID: result[0] as String?,
    );
  }
}

class ManageVasPushDataRequest {
  ManageVasPushDataRequest({
    this.vasMode,
    this.googleSmartTapPushService,
  });

  ManageVasMode? vasMode;

  ManageGoogleSmartTapPushService? googleSmartTapPushService;

  Object encode() {
    return <Object?>[
      vasMode?.index,
      googleSmartTapPushService?.encode(),
    ];
  }

  static ManageVasPushDataRequest decode(Object result) {
    result as List<Object?>;
    return ManageVasPushDataRequest(
      vasMode: result[0] != null
          ? ManageVasMode.values[result[0]! as int]
          : null,
      googleSmartTapPushService: result[1] != null
          ? ManageGoogleSmartTapPushService.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class ManageDoSignatureRequest {
  ManageDoSignatureRequest({
    this.uploadFlag,
    this.hostReferenceNumber,
    this.edcType,
    this.timeout,
    this.continuousScreen,
  });

  ManageUploadFlag? uploadFlag;

  String? hostReferenceNumber;

  ManageEdcType? edcType;

  String? timeout;

  ManageContinuousScreen? continuousScreen;

  Object encode() {
    return <Object?>[
      uploadFlag?.index,
      hostReferenceNumber,
      edcType?.index,
      timeout,
      continuousScreen?.index,
    ];
  }

  static ManageDoSignatureRequest decode(Object result) {
    result as List<Object?>;
    return ManageDoSignatureRequest(
      uploadFlag: result[0] != null
          ? ManageUploadFlag.values[result[0]! as int]
          : null,
      hostReferenceNumber: result[1] as String?,
      edcType: result[2] != null
          ? ManageEdcType.values[result[2]! as int]
          : null,
      timeout: result[3] as String?,
      continuousScreen: result[4] != null
          ? ManageContinuousScreen.values[result[4]! as int]
          : null,
    );
  }
}

class ManageDeleteImageRequest {
  ManageDeleteImageRequest({
    this.imageName,
  });

  String? imageName;

  Object encode() {
    return <Object?>[
      imageName,
    ];
  }

  static ManageDeleteImageRequest decode(Object result) {
    result as List<Object?>;
    return ManageDeleteImageRequest(
      imageName: result[0] as String?,
    );
  }
}

class ManageSetGoogleSmartTapParametersResponse {
  ManageSetGoogleSmartTapParametersResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageSetGoogleSmartTapParametersResponse decode(Object result) {
    result as List<Object?>;
    return ManageSetGoogleSmartTapParametersResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageGetVariableResponse {
  ManageGetVariableResponse({
    this.responseCode,
    this.responseMessage,
    this.variableValue1,
    this.variableValue2,
    this.variableValue3,
    this.variableValue4,
    this.variableValue5,
    this.multiMerchant,
  });

  String? responseCode;

  String? responseMessage;

  String? variableValue1;

  String? variableValue2;

  String? variableValue3;

  String? variableValue4;

  String? variableValue5;

  ManageMultiMerchant? multiMerchant;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      variableValue1,
      variableValue2,
      variableValue3,
      variableValue4,
      variableValue5,
      multiMerchant?.encode(),
    ];
  }

  static ManageGetVariableResponse decode(Object result) {
    result as List<Object?>;
    return ManageGetVariableResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      variableValue1: result[2] as String?,
      variableValue2: result[3] as String?,
      variableValue3: result[4] as String?,
      variableValue4: result[5] as String?,
      variableValue5: result[6] as String?,
      multiMerchant: result[7] != null
          ? ManageMultiMerchant.decode(result[7]! as List<Object?>)
          : null,
    );
  }
}

class ManageRebootResponse {
  ManageRebootResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageRebootResponse decode(Object result) {
    result as List<Object?>;
    return ManageRebootResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageDeleteImageResponse {
  ManageDeleteImageResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageDeleteImageResponse decode(Object result) {
    result as List<Object?>;
    return ManageDeleteImageResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageResetScreenResponse {
  ManageResetScreenResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageResetScreenResponse decode(Object result) {
    result as List<Object?>;
    return ManageResetScreenResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageVasPushDataResponse {
  ManageVasPushDataResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageVasPushDataResponse decode(Object result) {
    result as List<Object?>;
    return ManageVasPushDataResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageDoSignatureResponse {
  ManageDoSignatureResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageDoSignatureResponse decode(Object result) {
    result as List<Object?>;
    return ManageDoSignatureResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageClearCardBufferResponse {
  ManageClearCardBufferResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageClearCardBufferResponse decode(Object result) {
    result as List<Object?>;
    return ManageClearCardBufferResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageCheckFileResponse {
  ManageCheckFileResponse({
    this.responseCode,
    this.responseMessage,
    this.checkSum,
  });

  String? responseCode;

  String? responseMessage;

  String? checkSum;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      checkSum,
    ];
  }

  static ManageCheckFileResponse decode(Object result) {
    result as List<Object?>;
    return ManageCheckFileResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      checkSum: result[2] as String?,
    );
  }
}

class ManageHardwareConfigurationBitmap {
  ManageHardwareConfigurationBitmap({
    this.magstripe,
    this.emvChip,
    this.emvContactless,
    this.cameraFront,
    this.laserScanner,
    this.cameraRear,
    this.printer,
    this.touchscreen,
  });

  bool? magstripe;

  bool? emvChip;

  bool? emvContactless;

  bool? cameraFront;

  bool? laserScanner;

  bool? cameraRear;

  bool? printer;

  bool? touchscreen;

  Object encode() {
    return <Object?>[
      magstripe,
      emvChip,
      emvContactless,
      cameraFront,
      laserScanner,
      cameraRear,
      printer,
      touchscreen,
    ];
  }

  static ManageHardwareConfigurationBitmap decode(Object result) {
    result as List<Object?>;
    return ManageHardwareConfigurationBitmap(
      magstripe: result[0] as bool?,
      emvChip: result[1] as bool?,
      emvContactless: result[2] as bool?,
      cameraFront: result[3] as bool?,
      laserScanner: result[4] as bool?,
      cameraRear: result[5] as bool?,
      printer: result[6] as bool?,
      touchscreen: result[7] as bool?,
    );
  }
}

class ManageInitResponse {
  ManageInitResponse({
    this.responseCode,
    this.responseMessage,
    this.sn,
    this.modelName,
    this.osVersion,
    this.macAddress,
    this.linesPerScreen,
    this.charsPerLine,
    this.appName,
    this.appVersion,
    this.wifiMac,
    this.touchscreen,
    this.hardwareConfigurationBitmap,
    this.appActivated,
    this.licenseExpiry,
    this.protocolFlag,
  });

  String? responseCode;

  String? responseMessage;

  String? sn;

  String? modelName;

  String? osVersion;

  String? macAddress;

  String? linesPerScreen;

  String? charsPerLine;

  String? appName;

  String? appVersion;

  String? wifiMac;

  ManageTouchscreenStatus? touchscreen;

  ManageHardwareConfigurationBitmap? hardwareConfigurationBitmap;

  ManageAppActivated? appActivated;

  String? licenseExpiry;

  ManageProtocolFlag? protocolFlag;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      sn,
      modelName,
      osVersion,
      macAddress,
      linesPerScreen,
      charsPerLine,
      appName,
      appVersion,
      wifiMac,
      touchscreen?.index,
      hardwareConfigurationBitmap?.encode(),
      appActivated?.index,
      licenseExpiry,
      protocolFlag?.index,
    ];
  }

  static ManageInitResponse decode(Object result) {
    result as List<Object?>;
    return ManageInitResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      sn: result[2] as String?,
      modelName: result[3] as String?,
      osVersion: result[4] as String?,
      macAddress: result[5] as String?,
      linesPerScreen: result[6] as String?,
      charsPerLine: result[7] as String?,
      appName: result[8] as String?,
      appVersion: result[9] as String?,
      wifiMac: result[10] as String?,
      touchscreen: result[11] != null
          ? ManageTouchscreenStatus.values[result[11]! as int]
          : null,
      hardwareConfigurationBitmap: result[12] != null
          ? ManageHardwareConfigurationBitmap.decode(result[12]! as List<Object?>)
          : null,
      appActivated: result[13] != null
          ? ManageAppActivated.values[result[13]! as int]
          : null,
      licenseExpiry: result[14] as String?,
      protocolFlag: result[15] != null
          ? ManageProtocolFlag.values[result[15]! as int]
          : null,
    );
  }
}

class ManageGetSignatureResponse {
  ManageGetSignatureResponse({
    this.responseCode,
    this.responseMessage,
    this.signatureData,
  });

  String? responseCode;

  String? responseMessage;

  String? signatureData;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      signatureData,
    ];
  }

  static ManageGetSignatureResponse decode(Object result) {
    result as List<Object?>;
    return ManageGetSignatureResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      signatureData: result[2] as String?,
    );
  }
}

class ManageUpdateResourceFileResponse {
  ManageUpdateResourceFileResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageUpdateResourceFileResponse decode(Object result) {
    result as List<Object?>;
    return ManageUpdateResourceFileResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageSetApplePayVasParametersResponse {
  ManageSetApplePayVasParametersResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static ManageSetApplePayVasParametersResponse decode(Object result) {
    result as List<Object?>;
    return ManageSetApplePayVasParametersResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class ManageSetVariableResponse {
  ManageSetVariableResponse({
    this.responseCode,
    this.responseMessage,
    this.multiMerchant,
  });

  String? responseCode;

  String? responseMessage;

  ManageMultiMerchant? multiMerchant;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      multiMerchant?.encode(),
    ];
  }

  static ManageSetVariableResponse decode(Object result) {
    result as List<Object?>;
    return ManageSetVariableResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      multiMerchant: result[2] != null
          ? ManageMultiMerchant.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class _POSLinkManageApiCodec extends StandardMessageCodec {
  const _POSLinkManageApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ManageApplePayVas) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ManageCheckFileRequest) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ManageCheckFileResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ManageClearCardBufferRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ManageClearCardBufferResponse) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ManageDeleteImageRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ManageDeleteImageResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ManageDoSignatureRequest) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ManageDoSignatureResponse) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ManageGetSignatureRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ManageGetSignatureResponse) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ManageGetVariableRequest) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ManageGetVariableResponse) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is ManageGoogleServiceTypeBitmap) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is ManageGoogleSmartTap) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is ManageGoogleSmartTapCapBitmap) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is ManageGoogleSmartTapPushService) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is ManageHardwareConfigurationBitmap) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is ManageInitRequest) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is ManageInitResponse) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is ManageMultiMerchant) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is ManageNewService) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is ManageRebootRequest) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is ManageRebootResponse) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is ManageResetScreenRequest) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is ManageResetScreenResponse) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is ManageServiceUpdate) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is ManageServiceUsage) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is ManageSetApplePayVasParametersRequest) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is ManageSetApplePayVasParametersResponse) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is ManageSetGoogleSmartTapParametersRequest) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else if (value is ManageSetGoogleSmartTapParametersResponse) {
      buffer.putUint8(159);
      writeValue(buffer, value.encode());
    } else if (value is ManageSetVariableRequest) {
      buffer.putUint8(160);
      writeValue(buffer, value.encode());
    } else if (value is ManageSetVariableResponse) {
      buffer.putUint8(161);
      writeValue(buffer, value.encode());
    } else if (value is ManageUpdateResourceFileRequest) {
      buffer.putUint8(162);
      writeValue(buffer, value.encode());
    } else if (value is ManageUpdateResourceFileResponse) {
      buffer.putUint8(163);
      writeValue(buffer, value.encode());
    } else if (value is ManageVasPushDataRequest) {
      buffer.putUint8(164);
      writeValue(buffer, value.encode());
    } else if (value is ManageVasPushDataResponse) {
      buffer.putUint8(165);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ManageApplePayVas.decode(readValue(buffer)!);
      case 129: 
        return ManageCheckFileRequest.decode(readValue(buffer)!);
      case 130: 
        return ManageCheckFileResponse.decode(readValue(buffer)!);
      case 131: 
        return ManageClearCardBufferRequest.decode(readValue(buffer)!);
      case 132: 
        return ManageClearCardBufferResponse.decode(readValue(buffer)!);
      case 133: 
        return ManageDeleteImageRequest.decode(readValue(buffer)!);
      case 134: 
        return ManageDeleteImageResponse.decode(readValue(buffer)!);
      case 135: 
        return ManageDoSignatureRequest.decode(readValue(buffer)!);
      case 136: 
        return ManageDoSignatureResponse.decode(readValue(buffer)!);
      case 137: 
        return ManageGetSignatureRequest.decode(readValue(buffer)!);
      case 138: 
        return ManageGetSignatureResponse.decode(readValue(buffer)!);
      case 139: 
        return ManageGetVariableRequest.decode(readValue(buffer)!);
      case 140: 
        return ManageGetVariableResponse.decode(readValue(buffer)!);
      case 141: 
        return ManageGoogleServiceTypeBitmap.decode(readValue(buffer)!);
      case 142: 
        return ManageGoogleSmartTap.decode(readValue(buffer)!);
      case 143: 
        return ManageGoogleSmartTapCapBitmap.decode(readValue(buffer)!);
      case 144: 
        return ManageGoogleSmartTapPushService.decode(readValue(buffer)!);
      case 145: 
        return ManageHardwareConfigurationBitmap.decode(readValue(buffer)!);
      case 146: 
        return ManageInitRequest.decode(readValue(buffer)!);
      case 147: 
        return ManageInitResponse.decode(readValue(buffer)!);
      case 148: 
        return ManageMultiMerchant.decode(readValue(buffer)!);
      case 149: 
        return ManageNewService.decode(readValue(buffer)!);
      case 150: 
        return ManageRebootRequest.decode(readValue(buffer)!);
      case 151: 
        return ManageRebootResponse.decode(readValue(buffer)!);
      case 152: 
        return ManageResetScreenRequest.decode(readValue(buffer)!);
      case 153: 
        return ManageResetScreenResponse.decode(readValue(buffer)!);
      case 154: 
        return ManageServiceUpdate.decode(readValue(buffer)!);
      case 155: 
        return ManageServiceUsage.decode(readValue(buffer)!);
      case 156: 
        return ManageSetApplePayVasParametersRequest.decode(readValue(buffer)!);
      case 157: 
        return ManageSetApplePayVasParametersResponse.decode(readValue(buffer)!);
      case 158: 
        return ManageSetGoogleSmartTapParametersRequest.decode(readValue(buffer)!);
      case 159: 
        return ManageSetGoogleSmartTapParametersResponse.decode(readValue(buffer)!);
      case 160: 
        return ManageSetVariableRequest.decode(readValue(buffer)!);
      case 161: 
        return ManageSetVariableResponse.decode(readValue(buffer)!);
      case 162: 
        return ManageUpdateResourceFileRequest.decode(readValue(buffer)!);
      case 163: 
        return ManageUpdateResourceFileResponse.decode(readValue(buffer)!);
      case 164: 
        return ManageVasPushDataRequest.decode(readValue(buffer)!);
      case 165: 
        return ManageVasPushDataResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkManageApi {
  /// Constructor for [POSLinkManageApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkManageApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkManageApiCodec();

  Future<ManageDeleteImageResponse> deleteImage(ManageDeleteImageRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.deleteImage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageDeleteImageResponse?)!;
    }
  }

  Future<ManageDoSignatureResponse> doSignature(ManageDoSignatureRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.doSignature', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageDoSignatureResponse?)!;
    }
  }

  Future<ManageVasPushDataResponse> vasPushData(ManageVasPushDataRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.vasPushData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageVasPushDataResponse?)!;
    }
  }

  Future<ManageInitResponse> init(ManageInitRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.init', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageInitResponse?)!;
    }
  }

  Future<ManageSetGoogleSmartTapParametersResponse> setGoogleSmartTapParameters(ManageSetGoogleSmartTapParametersRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.setGoogleSmartTapParameters', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageSetGoogleSmartTapParametersResponse?)!;
    }
  }

  Future<ManageCheckFileResponse> checkFile(ManageCheckFileRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.checkFile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageCheckFileResponse?)!;
    }
  }

  Future<ManageClearCardBufferResponse> clearCardBuffer(ManageClearCardBufferRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.clearCardBuffer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageClearCardBufferResponse?)!;
    }
  }

  Future<ManageSetApplePayVasParametersResponse> setApplePayVasParameters(ManageSetApplePayVasParametersRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.setApplePayVasParameters', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageSetApplePayVasParametersResponse?)!;
    }
  }

  Future<ManageGetSignatureResponse> getSignature(ManageGetSignatureRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.getSignature', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageGetSignatureResponse?)!;
    }
  }

  Future<ManageResetScreenResponse> resetScreen(ManageResetScreenRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.resetScreen', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageResetScreenResponse?)!;
    }
  }

  Future<ManageGetVariableResponse> getVariable(ManageGetVariableRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.getVariable', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageGetVariableResponse?)!;
    }
  }

  Future<ManageUpdateResourceFileResponse> updateResourceFile(ManageUpdateResourceFileRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.updateResourceFile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageUpdateResourceFileResponse?)!;
    }
  }

  Future<ManageRebootResponse> reboot(ManageRebootRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.reboot', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageRebootResponse?)!;
    }
  }

  Future<ManageSetVariableResponse> setVariable(ManageSetVariableRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkManageApi.setVariable', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as ManageSetVariableResponse?)!;
    }
  }
}
