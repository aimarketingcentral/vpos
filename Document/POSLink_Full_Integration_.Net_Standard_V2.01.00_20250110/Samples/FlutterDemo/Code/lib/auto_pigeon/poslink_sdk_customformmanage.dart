// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum CustomFormManageFormType {
  NotSet,
  External,
  Internal,
}

enum CustomFormManageContinuousScreen {
  NotSet,
  Default,
  NotGoToIdleScreen,
}

class CustomFormManageRunFormRequest {
  CustomFormManageRunFormRequest({
    this.formName,
    this.timeout,
    this.continuousScreen,
  });

  String? formName;

  String? timeout;

  CustomFormManageContinuousScreen? continuousScreen;

  Object encode() {
    return <Object?>[
      formName,
      timeout,
      continuousScreen?.index,
    ];
  }

  static CustomFormManageRunFormRequest decode(Object result) {
    result as List<Object?>;
    return CustomFormManageRunFormRequest(
      formName: result[0] as String?,
      timeout: result[1] as String?,
      continuousScreen: result[2] != null
          ? CustomFormManageContinuousScreen.values[result[2]! as int]
          : null,
    );
  }
}

class CustomFormManageSetVarListRequest {
  CustomFormManageSetVarListRequest({
    this.varList,
  });

  String? varList;

  Object encode() {
    return <Object?>[
      varList,
    ];
  }

  static CustomFormManageSetVarListRequest decode(Object result) {
    result as List<Object?>;
    return CustomFormManageSetVarListRequest(
      varList: result[0] as String?,
    );
  }
}

class CustomFormManageGetVarListRequest {
  CustomFormManageGetVarListRequest({
    this.varNameList,
  });

  String? varNameList;

  Object encode() {
    return <Object?>[
      varNameList,
    ];
  }

  static CustomFormManageGetVarListRequest decode(Object result) {
    result as List<Object?>;
    return CustomFormManageGetVarListRequest(
      varNameList: result[0] as String?,
    );
  }
}

class CustomFormManageGetFormListRequest {
  CustomFormManageGetFormListRequest({
    this.formType,
  });

  CustomFormManageFormType? formType;

  Object encode() {
    return <Object?>[
      formType?.index,
    ];
  }

  static CustomFormManageGetFormListRequest decode(Object result) {
    result as List<Object?>;
    return CustomFormManageGetFormListRequest(
      formType: result[0] != null
          ? CustomFormManageFormType.values[result[0]! as int]
          : null,
    );
  }
}

class CustomFormManageGetVarListResponse {
  CustomFormManageGetVarListResponse({
    this.responseCode,
    this.responseMessage,
    this.varList,
  });

  String? responseCode;

  String? responseMessage;

  String? varList;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      varList,
    ];
  }

  static CustomFormManageGetVarListResponse decode(Object result) {
    result as List<Object?>;
    return CustomFormManageGetVarListResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      varList: result[2] as String?,
    );
  }
}

class CustomFormManageGetFormListResponse {
  CustomFormManageGetFormListResponse({
    this.responseCode,
    this.responseMessage,
    this.formList,
  });

  String? responseCode;

  String? responseMessage;

  String? formList;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      formList,
    ];
  }

  static CustomFormManageGetFormListResponse decode(Object result) {
    result as List<Object?>;
    return CustomFormManageGetFormListResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      formList: result[2] as String?,
    );
  }
}

class CustomFormManageRunFormResponse {
  CustomFormManageRunFormResponse({
    this.responseCode,
    this.responseMessage,
    this.runFormResult,
  });

  String? responseCode;

  String? responseMessage;

  String? runFormResult;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      runFormResult,
    ];
  }

  static CustomFormManageRunFormResponse decode(Object result) {
    result as List<Object?>;
    return CustomFormManageRunFormResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      runFormResult: result[2] as String?,
    );
  }
}

class CustomFormManageSetVarListResponse {
  CustomFormManageSetVarListResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static CustomFormManageSetVarListResponse decode(Object result) {
    result as List<Object?>;
    return CustomFormManageSetVarListResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class _POSLinkCustomFormManageApiCodec extends StandardMessageCodec {
  const _POSLinkCustomFormManageApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CustomFormManageGetFormListRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageGetFormListResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageGetVarListRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageGetVarListResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageRunFormRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageRunFormResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageSetVarListRequest) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is CustomFormManageSetVarListResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CustomFormManageGetFormListRequest.decode(readValue(buffer)!);
      case 129: 
        return CustomFormManageGetFormListResponse.decode(readValue(buffer)!);
      case 130: 
        return CustomFormManageGetVarListRequest.decode(readValue(buffer)!);
      case 131: 
        return CustomFormManageGetVarListResponse.decode(readValue(buffer)!);
      case 132: 
        return CustomFormManageRunFormRequest.decode(readValue(buffer)!);
      case 133: 
        return CustomFormManageRunFormResponse.decode(readValue(buffer)!);
      case 134: 
        return CustomFormManageSetVarListRequest.decode(readValue(buffer)!);
      case 135: 
        return CustomFormManageSetVarListResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkCustomFormManageApi {
  /// Constructor for [POSLinkCustomFormManageApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkCustomFormManageApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkCustomFormManageApiCodec();

  Future<CustomFormManageGetFormListResponse> getFormList(CustomFormManageGetFormListRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkCustomFormManageApi.getFormList', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CustomFormManageGetFormListResponse?)!;
    }
  }

  Future<CustomFormManageGetVarListResponse> getVarList(CustomFormManageGetVarListRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkCustomFormManageApi.getVarList', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CustomFormManageGetVarListResponse?)!;
    }
  }

  Future<CustomFormManageSetVarListResponse> setVarList(CustomFormManageSetVarListRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkCustomFormManageApi.setVarList', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CustomFormManageSetVarListResponse?)!;
    }
  }

  Future<CustomFormManageRunFormResponse> runForm(CustomFormManageRunFormRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkCustomFormManageApi.runForm', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CustomFormManageRunFormResponse?)!;
    }
  }
}
