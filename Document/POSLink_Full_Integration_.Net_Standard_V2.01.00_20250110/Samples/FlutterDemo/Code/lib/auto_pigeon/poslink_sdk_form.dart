// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum FormHardKey {
  NotSet,
  Key0,
  Key1,
  Key2,
  Key3,
  Key4,
  Key5,
  Key6,
  Key7,
  Key8,
  Key9,
  Clear,
  Cancel,
  Ok,
}

enum FormSignatureStatus {
  NotSet,
  SignatureNotProvided,
  SignatureProvided,
}

enum FormPinpadType {
  NotSet,
  InternalPinpad,
  ExternalPinpad,
  RnibPinpad,
  ExternalPinpadFirst,
}

enum FormInputTextPrompt {
  NotSet,
  EnterAmount,
  EnterPoints,
  EnterTableNumber,
  EnterTheNumberOfGuests,
  EnterOrderNumber,
  EnterTicketNumber,
  EnterVoucherNumber,
  EnterAuthCode,
  EnterTip,
  EnterCashBack,
  EnterMerchantFee,
  EnterSurchargeFee,
  EnterYourAddress,
  EnterYourZipCode,
  EnterCustomerCode,
  EnterPoNumber,
  EnterDestinationZip,
  EnterProductDescription,
  EnterMerchantTaxId,
  EnterTaxAmount,
  EnterTaxExemptId,
  EnterReferenceNumber,
  EnterPhoneNumber,
  EnterSocialSecurity,
  EnterUserName,
  EnterCustomerServicePhone,
  EnterOriginalTransactionDate,
  EnterOriginalTransactionTime,
  EnterDate,
  EnterTime,
  EnterPassword,
}

enum FormInputType {
  NotSet,
  AlphaNumeric,
  Numeric,
  Date,
  Time,
  Currency,
  Password,
  PhoneNumber,
  SocialSecurity,
}

enum FormContinuousScreen {
  NotSet,
  Default,
  NotGoToIdleScreen,
}

enum FormTextPushedMode {
  NotSet,
  Topdown,
  BottomUp,
}

enum FormItemDetailUnit {
  NotSet,
  PerItem,
  PerPound,
  PerFoot,
}

enum FormLineItemAction {
  NotSet,
  Add,
  Update,
  Delete,
}

enum FormEnableKeyType {
  NotSet,
  EnableVirtualButtonAndHardKeys,
  EnableHardKeyOnly,
}

enum FormSignatureBoxType {
  NotSet,
  NoSignatureBox,
  TerminalPreference,
  HorizontalDisplay,
  VerticalDisplay,
}

enum FormBarcodeName {
  NotSet,
  Code39,
  Code128,
  Ean13,
  Ean128,
  Pdf417,
  GridMatrix,
  QrCode,
}

enum FormInputTextType {
  NotSet,
  NoInputText,
  ShowInputText,
}

enum FormLabelProperty {
  NotSet,
  Unchecked,
  Checked,
}

enum FormButtonType {
  NotSet,
  RadioButton,
  CheckBox,
}

class FormRemoveCardRequest {
  FormRemoveCardRequest({
    this.message1,
    this.message2,
    this.continuousScreen,
    this.pinpadType,
    this.icon,
  });

  String? message1;

  String? message2;

  FormContinuousScreen? continuousScreen;

  FormPinpadType? pinpadType;

  String? icon;

  Object encode() {
    return <Object?>[
      message1,
      message2,
      continuousScreen?.index,
      pinpadType?.index,
      icon,
    ];
  }

  static FormRemoveCardRequest decode(Object result) {
    result as List<Object?>;
    return FormRemoveCardRequest(
      message1: result[0] as String?,
      message2: result[1] as String?,
      continuousScreen: result[2] != null
          ? FormContinuousScreen.values[result[2]! as int]
          : null,
      pinpadType: result[3] != null
          ? FormPinpadType.values[result[3]! as int]
          : null,
      icon: result[4] as String?,
    );
  }
}

class FormShowDialogFormRequest {
  FormShowDialogFormRequest({
    this.title,
    this.label1,
    this.label1Property,
    this.label2,
    this.label2Property,
    this.label3,
    this.label3Property,
    this.label4,
    this.label4Property,
    this.buttonType,
    this.timeout,
    this.continuousScreen,
  });

  String? title;

  String? label1;

  FormLabelProperty? label1Property;

  String? label2;

  FormLabelProperty? label2Property;

  String? label3;

  FormLabelProperty? label3Property;

  String? label4;

  FormLabelProperty? label4Property;

  FormButtonType? buttonType;

  String? timeout;

  FormContinuousScreen? continuousScreen;

  Object encode() {
    return <Object?>[
      title,
      label1,
      label1Property?.index,
      label2,
      label2Property?.index,
      label3,
      label3Property?.index,
      label4,
      label4Property?.index,
      buttonType?.index,
      timeout,
      continuousScreen?.index,
    ];
  }

  static FormShowDialogFormRequest decode(Object result) {
    result as List<Object?>;
    return FormShowDialogFormRequest(
      title: result[0] as String?,
      label1: result[1] as String?,
      label1Property: result[2] != null
          ? FormLabelProperty.values[result[2]! as int]
          : null,
      label2: result[3] as String?,
      label2Property: result[4] != null
          ? FormLabelProperty.values[result[4]! as int]
          : null,
      label3: result[5] as String?,
      label3Property: result[6] != null
          ? FormLabelProperty.values[result[6]! as int]
          : null,
      label4: result[7] as String?,
      label4Property: result[8] != null
          ? FormLabelProperty.values[result[8]! as int]
          : null,
      buttonType: result[9] != null
          ? FormButtonType.values[result[9]! as int]
          : null,
      timeout: result[10] as String?,
      continuousScreen: result[11] != null
          ? FormContinuousScreen.values[result[11]! as int]
          : null,
    );
  }
}

class FormStbButton {
  FormStbButton({
    this.name,
    this.color,
    this.hardKey,
  });

  String? name;

  String? color;

  FormHardKey? hardKey;

  Object encode() {
    return <Object?>[
      name,
      color,
      hardKey?.index,
    ];
  }

  static FormStbButton decode(Object result) {
    result as List<Object?>;
    return FormStbButton(
      name: result[0] as String?,
      color: result[1] as String?,
      hardKey: result[2] != null
          ? FormHardKey.values[result[2]! as int]
          : null,
    );
  }
}

class FormShowTextBoxRequest {
  FormShowTextBoxRequest({
    this.title,
    this.text,
    this.button1,
    this.button2,
    this.button3,
    this.timeout,
    this.enableKeyType,
    this.hardKeyList,
    this.signatureBox,
    this.continuousScreen,
    this.barcodeName,
    this.barcodeData,
    this.inputTextTitle,
    this.inputText,
    this.inputType,
    this.minLength,
    this.maxLength,
  });

  String? title;

  String? text;

  FormStbButton? button1;

  FormStbButton? button2;

  FormStbButton? button3;

  String? timeout;

  FormEnableKeyType? enableKeyType;

  List<String?>? hardKeyList;

  FormSignatureBoxType? signatureBox;

  FormContinuousScreen? continuousScreen;

  FormBarcodeName? barcodeName;

  String? barcodeData;

  String? inputTextTitle;

  FormInputTextType? inputText;

  FormInputType? inputType;

  String? minLength;

  String? maxLength;

  Object encode() {
    return <Object?>[
      title,
      text,
      button1?.encode(),
      button2?.encode(),
      button3?.encode(),
      timeout,
      enableKeyType?.index,
      hardKeyList,
      signatureBox?.index,
      continuousScreen?.index,
      barcodeName?.index,
      barcodeData,
      inputTextTitle,
      inputText?.index,
      inputType?.index,
      minLength,
      maxLength,
    ];
  }

  static FormShowTextBoxRequest decode(Object result) {
    result as List<Object?>;
    return FormShowTextBoxRequest(
      title: result[0] as String?,
      text: result[1] as String?,
      button1: result[2] != null
          ? FormStbButton.decode(result[2]! as List<Object?>)
          : null,
      button2: result[3] != null
          ? FormStbButton.decode(result[3]! as List<Object?>)
          : null,
      button3: result[4] != null
          ? FormStbButton.decode(result[4]! as List<Object?>)
          : null,
      timeout: result[5] as String?,
      enableKeyType: result[6] != null
          ? FormEnableKeyType.values[result[6]! as int]
          : null,
      hardKeyList: (result[7] as List<Object?>?)?.cast<String?>(),
      signatureBox: result[8] != null
          ? FormSignatureBoxType.values[result[8]! as int]
          : null,
      continuousScreen: result[9] != null
          ? FormContinuousScreen.values[result[9]! as int]
          : null,
      barcodeName: result[10] != null
          ? FormBarcodeName.values[result[10]! as int]
          : null,
      barcodeData: result[11] as String?,
      inputTextTitle: result[12] as String?,
      inputText: result[13] != null
          ? FormInputTextType.values[result[13]! as int]
          : null,
      inputType: result[14] != null
          ? FormInputType.values[result[14]! as int]
          : null,
      minLength: result[15] as String?,
      maxLength: result[16] as String?,
    );
  }
}

class FormSdButton {
  FormSdButton({
    this.name,
  });

  String? name;

  Object encode() {
    return <Object?>[
      name,
    ];
  }

  static FormSdButton decode(Object result) {
    result as List<Object?>;
    return FormSdButton(
      name: result[0] as String?,
    );
  }
}

class FormShowDialogRequest {
  FormShowDialogRequest({
    this.title,
    this.button1,
    this.button2,
    this.button3,
    this.button4,
    this.timeout,
    this.continuousScreen,
  });

  String? title;

  FormSdButton? button1;

  FormSdButton? button2;

  FormSdButton? button3;

  FormSdButton? button4;

  String? timeout;

  FormContinuousScreen? continuousScreen;

  Object encode() {
    return <Object?>[
      title,
      button1?.encode(),
      button2?.encode(),
      button3?.encode(),
      button4?.encode(),
      timeout,
      continuousScreen?.index,
    ];
  }

  static FormShowDialogRequest decode(Object result) {
    result as List<Object?>;
    return FormShowDialogRequest(
      title: result[0] as String?,
      button1: result[1] != null
          ? FormSdButton.decode(result[1]! as List<Object?>)
          : null,
      button2: result[2] != null
          ? FormSdButton.decode(result[2]! as List<Object?>)
          : null,
      button3: result[3] != null
          ? FormSdButton.decode(result[3]! as List<Object?>)
          : null,
      button4: result[4] != null
          ? FormSdButton.decode(result[4]! as List<Object?>)
          : null,
      timeout: result[5] as String?,
      continuousScreen: result[6] != null
          ? FormContinuousScreen.values[result[6]! as int]
          : null,
    );
  }
}

class FormShowMessageRequest {
  FormShowMessageRequest({
    this.displayMessage1,
    this.title,
    this.displayMessage2,
    this.textPushedMode,
    this.taxLine,
    this.totalLine,
    this.imageName,
    this.imageDescription,
    this.lineItemAction,
    this.itemIndices,
  });

  String? displayMessage1;

  String? title;

  String? displayMessage2;

  FormTextPushedMode? textPushedMode;

  String? taxLine;

  String? totalLine;

  String? imageName;

  String? imageDescription;

  FormLineItemAction? lineItemAction;

  List<String?>? itemIndices;

  Object encode() {
    return <Object?>[
      displayMessage1,
      title,
      displayMessage2,
      textPushedMode?.index,
      taxLine,
      totalLine,
      imageName,
      imageDescription,
      lineItemAction?.index,
      itemIndices,
    ];
  }

  static FormShowMessageRequest decode(Object result) {
    result as List<Object?>;
    return FormShowMessageRequest(
      displayMessage1: result[0] as String?,
      title: result[1] as String?,
      displayMessage2: result[2] as String?,
      textPushedMode: result[3] != null
          ? FormTextPushedMode.values[result[3]! as int]
          : null,
      taxLine: result[4] as String?,
      totalLine: result[5] as String?,
      imageName: result[6] as String?,
      imageDescription: result[7] as String?,
      lineItemAction: result[8] != null
          ? FormLineItemAction.values[result[8]! as int]
          : null,
      itemIndices: (result[9] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class FormItemDetail {
  FormItemDetail({
    this.productName,
    this.pluCode,
    this.price,
    this.unit,
    this.unitPrice,
    this.tax,
    this.quantity,
    this.productImageName,
    this.productImageDescription,
  });

  String? productName;

  String? pluCode;

  String? price;

  FormItemDetailUnit? unit;

  String? unitPrice;

  String? tax;

  String? quantity;

  String? productImageName;

  String? productImageDescription;

  Object encode() {
    return <Object?>[
      productName,
      pluCode,
      price,
      unit?.index,
      unitPrice,
      tax,
      quantity,
      productImageName,
      productImageDescription,
    ];
  }

  static FormItemDetail decode(Object result) {
    result as List<Object?>;
    return FormItemDetail(
      productName: result[0] as String?,
      pluCode: result[1] as String?,
      price: result[2] as String?,
      unit: result[3] != null
          ? FormItemDetailUnit.values[result[3]! as int]
          : null,
      unitPrice: result[4] as String?,
      tax: result[5] as String?,
      quantity: result[6] as String?,
      productImageName: result[7] as String?,
      productImageDescription: result[8] as String?,
    );
  }
}

class FormShowItemRequest {
  FormShowItemRequest({
    this.title,
    this.textPushedMode,
    this.taxLine,
    this.totalLine,
    this.itemDetails,
    this.lineItemAction,
    this.itemIndices,
  });

  String? title;

  FormTextPushedMode? textPushedMode;

  String? taxLine;

  String? totalLine;

  List<FormItemDetail?>? itemDetails;

  FormLineItemAction? lineItemAction;

  List<String?>? itemIndices;

  Object encode() {
    return <Object?>[
      title,
      textPushedMode?.index,
      taxLine,
      totalLine,
      itemDetails,
      lineItemAction?.index,
      itemIndices,
    ];
  }

  static FormShowItemRequest decode(Object result) {
    result as List<Object?>;
    return FormShowItemRequest(
      title: result[0] as String?,
      textPushedMode: result[1] != null
          ? FormTextPushedMode.values[result[1]! as int]
          : null,
      taxLine: result[2] as String?,
      totalLine: result[3] as String?,
      itemDetails: (result[4] as List<Object?>?)?.cast<FormItemDetail?>(),
      lineItemAction: result[5] != null
          ? FormLineItemAction.values[result[5]! as int]
          : null,
      itemIndices: (result[6] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class FormClearMessageRequest {
  FormClearMessageRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static FormClearMessageRequest decode(Object result) {
    result as List<Object?>;
    return FormClearMessageRequest(
      classID: result[0] as String?,
    );
  }
}

class FormInputTextRequest {
  FormInputTextRequest({
    this.title,
    this.inputType,
    this.minLength,
    this.maxLength,
    this.defaultValue,
    this.timeout,
    this.continuousScreen,
  });

  FormInputTextPrompt? title;

  FormInputType? inputType;

  String? minLength;

  String? maxLength;

  String? defaultValue;

  String? timeout;

  FormContinuousScreen? continuousScreen;

  Object encode() {
    return <Object?>[
      title?.index,
      inputType?.index,
      minLength,
      maxLength,
      defaultValue,
      timeout,
      continuousScreen?.index,
    ];
  }

  static FormInputTextRequest decode(Object result) {
    result as List<Object?>;
    return FormInputTextRequest(
      title: result[0] != null
          ? FormInputTextPrompt.values[result[0]! as int]
          : null,
      inputType: result[1] != null
          ? FormInputType.values[result[1]! as int]
          : null,
      minLength: result[2] as String?,
      maxLength: result[3] as String?,
      defaultValue: result[4] as String?,
      timeout: result[5] as String?,
      continuousScreen: result[6] != null
          ? FormContinuousScreen.values[result[6]! as int]
          : null,
    );
  }
}

class FormShowMessageCenterRequest {
  FormShowMessageCenterRequest({
    this.title,
    this.message1,
    this.message2,
    this.timeout,
    this.pinpadType,
    this.iconName,
  });

  String? title;

  String? message1;

  String? message2;

  String? timeout;

  FormPinpadType? pinpadType;

  String? iconName;

  Object encode() {
    return <Object?>[
      title,
      message1,
      message2,
      timeout,
      pinpadType?.index,
      iconName,
    ];
  }

  static FormShowMessageCenterRequest decode(Object result) {
    result as List<Object?>;
    return FormShowMessageCenterRequest(
      title: result[0] as String?,
      message1: result[1] as String?,
      message2: result[2] as String?,
      timeout: result[3] as String?,
      pinpadType: result[4] != null
          ? FormPinpadType.values[result[4]! as int]
          : null,
      iconName: result[5] as String?,
    );
  }
}

class FormShowMessageCenterResponse {
  FormShowMessageCenterResponse({
    this.responseCode,
    this.responseMessage,
    this.pinpadType,
  });

  String? responseCode;

  String? responseMessage;

  FormPinpadType? pinpadType;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      pinpadType?.index,
    ];
  }

  static FormShowMessageCenterResponse decode(Object result) {
    result as List<Object?>;
    return FormShowMessageCenterResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      pinpadType: result[2] != null
          ? FormPinpadType.values[result[2]! as int]
          : null,
    );
  }
}

class FormClearMessageResponse {
  FormClearMessageResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static FormClearMessageResponse decode(Object result) {
    result as List<Object?>;
    return FormClearMessageResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class FormInputTextResponse {
  FormInputTextResponse({
    this.responseCode,
    this.responseMessage,
    this.text,
  });

  String? responseCode;

  String? responseMessage;

  String? text;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      text,
    ];
  }

  static FormInputTextResponse decode(Object result) {
    result as List<Object?>;
    return FormInputTextResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      text: result[2] as String?,
    );
  }
}

class FormRemoveCardResponse {
  FormRemoveCardResponse({
    this.responseCode,
    this.responseMessage,
    this.pinpadType,
  });

  String? responseCode;

  String? responseMessage;

  FormPinpadType? pinpadType;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      pinpadType?.index,
    ];
  }

  static FormRemoveCardResponse decode(Object result) {
    result as List<Object?>;
    return FormRemoveCardResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      pinpadType: result[2] != null
          ? FormPinpadType.values[result[2]! as int]
          : null,
    );
  }
}

class FormShowDialogFormResponse {
  FormShowDialogFormResponse({
    this.responseCode,
    this.responseMessage,
    this.labelSelected,
  });

  String? responseCode;

  String? responseMessage;

  String? labelSelected;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      labelSelected,
    ];
  }

  static FormShowDialogFormResponse decode(Object result) {
    result as List<Object?>;
    return FormShowDialogFormResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      labelSelected: result[2] as String?,
    );
  }
}

class FormShowDialogResponse {
  FormShowDialogResponse({
    this.responseCode,
    this.responseMessage,
    this.buttonNumber,
  });

  String? responseCode;

  String? responseMessage;

  String? buttonNumber;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      buttonNumber,
    ];
  }

  static FormShowDialogResponse decode(Object result) {
    result as List<Object?>;
    return FormShowDialogResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      buttonNumber: result[2] as String?,
    );
  }
}

class FormShowMessageResponse {
  FormShowMessageResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static FormShowMessageResponse decode(Object result) {
    result as List<Object?>;
    return FormShowMessageResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class FormShowItemResponse {
  FormShowItemResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static FormShowItemResponse decode(Object result) {
    result as List<Object?>;
    return FormShowItemResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class FormShowTextBoxResponse {
  FormShowTextBoxResponse({
    this.responseCode,
    this.responseMessage,
    this.buttonNumber,
    this.signStatus,
    this.signatureData,
    this.text,
  });

  String? responseCode;

  String? responseMessage;

  String? buttonNumber;

  FormSignatureStatus? signStatus;

  String? signatureData;

  String? text;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      buttonNumber,
      signStatus?.index,
      signatureData,
      text,
    ];
  }

  static FormShowTextBoxResponse decode(Object result) {
    result as List<Object?>;
    return FormShowTextBoxResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      buttonNumber: result[2] as String?,
      signStatus: result[3] != null
          ? FormSignatureStatus.values[result[3]! as int]
          : null,
      signatureData: result[4] as String?,
      text: result[5] as String?,
    );
  }
}

class _POSLinkFormApiCodec extends StandardMessageCodec {
  const _POSLinkFormApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FormClearMessageRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is FormClearMessageResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is FormInputTextRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is FormInputTextResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is FormItemDetail) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is FormRemoveCardRequest) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is FormRemoveCardResponse) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is FormSdButton) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is FormShowDialogFormRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is FormShowDialogFormResponse) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is FormShowDialogRequest) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is FormShowDialogResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is FormShowItemRequest) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is FormShowItemResponse) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is FormShowMessageCenterRequest) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is FormShowMessageCenterResponse) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is FormShowMessageRequest) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is FormShowMessageResponse) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is FormShowTextBoxRequest) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is FormShowTextBoxResponse) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is FormStbButton) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FormClearMessageRequest.decode(readValue(buffer)!);
      case 129: 
        return FormClearMessageResponse.decode(readValue(buffer)!);
      case 130: 
        return FormInputTextRequest.decode(readValue(buffer)!);
      case 131: 
        return FormInputTextResponse.decode(readValue(buffer)!);
      case 132: 
        return FormItemDetail.decode(readValue(buffer)!);
      case 133: 
        return FormRemoveCardRequest.decode(readValue(buffer)!);
      case 134: 
        return FormRemoveCardResponse.decode(readValue(buffer)!);
      case 135: 
        return FormSdButton.decode(readValue(buffer)!);
      case 136: 
        return FormShowDialogFormRequest.decode(readValue(buffer)!);
      case 137: 
        return FormShowDialogFormResponse.decode(readValue(buffer)!);
      case 138: 
        return FormShowDialogRequest.decode(readValue(buffer)!);
      case 139: 
        return FormShowDialogResponse.decode(readValue(buffer)!);
      case 140: 
        return FormShowItemRequest.decode(readValue(buffer)!);
      case 141: 
        return FormShowItemResponse.decode(readValue(buffer)!);
      case 142: 
        return FormShowMessageCenterRequest.decode(readValue(buffer)!);
      case 143: 
        return FormShowMessageCenterResponse.decode(readValue(buffer)!);
      case 144: 
        return FormShowMessageRequest.decode(readValue(buffer)!);
      case 145: 
        return FormShowMessageResponse.decode(readValue(buffer)!);
      case 146: 
        return FormShowTextBoxRequest.decode(readValue(buffer)!);
      case 147: 
        return FormShowTextBoxResponse.decode(readValue(buffer)!);
      case 148: 
        return FormStbButton.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkFormApi {
  /// Constructor for [POSLinkFormApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkFormApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkFormApiCodec();

  Future<FormShowMessageCenterResponse> showMessageCenter(FormShowMessageCenterRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.showMessageCenter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormShowMessageCenterResponse?)!;
    }
  }

  Future<FormInputTextResponse> inputText(FormInputTextRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.inputText', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormInputTextResponse?)!;
    }
  }

  Future<FormClearMessageResponse> clearMessage(FormClearMessageRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.clearMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormClearMessageResponse?)!;
    }
  }

  Future<FormShowItemResponse> showItem(FormShowItemRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.showItem', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormShowItemResponse?)!;
    }
  }

  Future<FormShowMessageResponse> showMessage(FormShowMessageRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.showMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormShowMessageResponse?)!;
    }
  }

  Future<FormShowDialogResponse> showDialog(FormShowDialogRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.showDialog', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormShowDialogResponse?)!;
    }
  }

  Future<FormShowTextBoxResponse> showTextBox(FormShowTextBoxRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.showTextBox', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormShowTextBoxResponse?)!;
    }
  }

  Future<FormShowDialogFormResponse> showDialogForm(FormShowDialogFormRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.showDialogForm', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormShowDialogFormResponse?)!;
    }
  }

  Future<FormRemoveCardResponse> removeCard(FormRemoveCardRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkFormApi.removeCard', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as FormRemoveCardResponse?)!;
    }
  }
}
