// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum DeviceCardInsertStatus {
  NotSet,
  NoCardInserted,
  EmvCardInserted,
  CardInserted,
}

enum DeviceBarcodeType {
  NotSet,
  QrCode,
  TwoDimensionalBarcode,
  ThreeDimensionalBarcode,
}

enum DeviceM1CommandType {
  NotSet,
  Read,
  Write,
  OperateWithIncreaseValue,
  OperateWithDecreaseValue,
  OperateWithBackupValue,
  ReadTheSerialNumber,
}

enum DevicePasswordType {
  NotSet,
  AType,
  BType,
}

enum DeviceReaderType {
  NotSet,
  RearCamera,
  FrontCamera,
}

class DeviceCardInsertDetectionRequest {
  DeviceCardInsertDetectionRequest({
    this.classID,
  });

  String? classID;

  Object encode() {
    return <Object?>[
      classID,
    ];
  }

  static DeviceCardInsertDetectionRequest decode(Object result) {
    result as List<Object?>;
    return DeviceCardInsertDetectionRequest(
      classID: result[0] as String?,
    );
  }
}

class DevicePrinterRequest {
  DevicePrinterRequest({
    this.printCopy,
    this.printData,
  });

  String? printCopy;

  String? printData;

  Object encode() {
    return <Object?>[
      printCopy,
      printData,
    ];
  }

  static DevicePrinterRequest decode(Object result) {
    result as List<Object?>;
    return DevicePrinterRequest(
      printCopy: result[0] as String?,
      printData: result[1] as String?,
    );
  }
}

class DeviceCameraScanRequest {
  DeviceCameraScanRequest({
    this.reader,
    this.timeout,
  });

  DeviceReaderType? reader;

  String? timeout;

  Object encode() {
    return <Object?>[
      reader?.index,
      timeout,
    ];
  }

  static DeviceCameraScanRequest decode(Object result) {
    result as List<Object?>;
    return DeviceCameraScanRequest(
      reader: result[0] != null
          ? DeviceReaderType.values[result[0]! as int]
          : null,
      timeout: result[1] as String?,
    );
  }
}

class DeviceMifareCardRequest {
  DeviceMifareCardRequest({
    this.m1Command,
    this.blockNumber,
    this.password,
    this.passwordType,
    this.blockValue,
    this.updateBlockNumber,
    this.timeout,
  });

  DeviceM1CommandType? m1Command;

  String? blockNumber;

  String? password;

  DevicePasswordType? passwordType;

  String? blockValue;

  String? updateBlockNumber;

  String? timeout;

  Object encode() {
    return <Object?>[
      m1Command?.index,
      blockNumber,
      password,
      passwordType?.index,
      blockValue,
      updateBlockNumber,
      timeout,
    ];
  }

  static DeviceMifareCardRequest decode(Object result) {
    result as List<Object?>;
    return DeviceMifareCardRequest(
      m1Command: result[0] != null
          ? DeviceM1CommandType.values[result[0]! as int]
          : null,
      blockNumber: result[1] as String?,
      password: result[2] as String?,
      passwordType: result[3] != null
          ? DevicePasswordType.values[result[3]! as int]
          : null,
      blockValue: result[4] as String?,
      updateBlockNumber: result[5] as String?,
      timeout: result[6] as String?,
    );
  }
}

class DeviceCameraScanResponse {
  DeviceCameraScanResponse({
    this.responseCode,
    this.responseMessage,
    this.barcodeData,
    this.barcodeType,
  });

  String? responseCode;

  String? responseMessage;

  String? barcodeData;

  DeviceBarcodeType? barcodeType;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      barcodeData,
      barcodeType?.index,
    ];
  }

  static DeviceCameraScanResponse decode(Object result) {
    result as List<Object?>;
    return DeviceCameraScanResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      barcodeData: result[2] as String?,
      barcodeType: result[3] != null
          ? DeviceBarcodeType.values[result[3]! as int]
          : null,
    );
  }
}

class DeviceCardInsertDetectionResponse {
  DeviceCardInsertDetectionResponse({
    this.responseCode,
    this.responseMessage,
    this.cardInsertStatus,
  });

  String? responseCode;

  String? responseMessage;

  DeviceCardInsertStatus? cardInsertStatus;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      cardInsertStatus?.index,
    ];
  }

  static DeviceCardInsertDetectionResponse decode(Object result) {
    result as List<Object?>;
    return DeviceCardInsertDetectionResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      cardInsertStatus: result[2] != null
          ? DeviceCardInsertStatus.values[result[2]! as int]
          : null,
    );
  }
}

class DeviceMifareCardResponse {
  DeviceMifareCardResponse({
    this.responseCode,
    this.responseMessage,
    this.blockValue,
  });

  String? responseCode;

  String? responseMessage;

  String? blockValue;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
      blockValue,
    ];
  }

  static DeviceMifareCardResponse decode(Object result) {
    result as List<Object?>;
    return DeviceMifareCardResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
      blockValue: result[2] as String?,
    );
  }
}

class DevicePrinterResponse {
  DevicePrinterResponse({
    this.responseCode,
    this.responseMessage,
  });

  String? responseCode;

  String? responseMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      responseMessage,
    ];
  }

  static DevicePrinterResponse decode(Object result) {
    result as List<Object?>;
    return DevicePrinterResponse(
      responseCode: result[0] as String?,
      responseMessage: result[1] as String?,
    );
  }
}

class _POSLinkDeviceApiCodec extends StandardMessageCodec {
  const _POSLinkDeviceApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DeviceCameraScanRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DeviceCameraScanResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is DeviceCardInsertDetectionRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is DeviceCardInsertDetectionResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is DeviceMifareCardRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is DeviceMifareCardResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is DevicePrinterRequest) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is DevicePrinterResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DeviceCameraScanRequest.decode(readValue(buffer)!);
      case 129: 
        return DeviceCameraScanResponse.decode(readValue(buffer)!);
      case 130: 
        return DeviceCardInsertDetectionRequest.decode(readValue(buffer)!);
      case 131: 
        return DeviceCardInsertDetectionResponse.decode(readValue(buffer)!);
      case 132: 
        return DeviceMifareCardRequest.decode(readValue(buffer)!);
      case 133: 
        return DeviceMifareCardResponse.decode(readValue(buffer)!);
      case 134: 
        return DevicePrinterRequest.decode(readValue(buffer)!);
      case 135: 
        return DevicePrinterResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class POSLinkDeviceApi {
  /// Constructor for [POSLinkDeviceApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  POSLinkDeviceApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _POSLinkDeviceApiCodec();

  Future<DeviceMifareCardResponse> mifareCard(DeviceMifareCardRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkDeviceApi.mifareCard', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DeviceMifareCardResponse?)!;
    }
  }

  Future<DeviceCameraScanResponse> cameraScan(DeviceCameraScanRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkDeviceApi.cameraScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DeviceCameraScanResponse?)!;
    }
  }

  Future<DevicePrinterResponse> printer(DevicePrinterRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkDeviceApi.printer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DevicePrinterResponse?)!;
    }
  }

  Future<DeviceCardInsertDetectionResponse> cardInsertDetection(DeviceCardInsertDetectionRequest arg_req) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.POSLinkDeviceApi.cardInsertDetection', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_req]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DeviceCardInsertDetectionResponse?)!;
    }
  }
}
