// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkSet.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkSet {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// TCPSetting

TCPSetting::TCPSetting() {}

TCPSetting::TCPSetting(
  const int64_t* timeout,
  const std::string* ip,
  const std::string* port)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    ip_(ip ? std::optional<std::string>(*ip) : std::nullopt),
    port_(port ? std::optional<std::string>(*port) : std::nullopt) {}

const int64_t* TCPSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void TCPSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void TCPSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* TCPSetting::ip() const {
  return ip_ ? &(*ip_) : nullptr;
}

void TCPSetting::set_ip(const std::string_view* value_arg) {
  ip_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void TCPSetting::set_ip(std::string_view value_arg) {
  ip_ = value_arg;
}


const std::string* TCPSetting::port() const {
  return port_ ? &(*port_) : nullptr;
}

void TCPSetting::set_port(const std::string_view* value_arg) {
  port_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void TCPSetting::set_port(std::string_view value_arg) {
  port_ = value_arg;
}


EncodableList TCPSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(ip_ ? EncodableValue(*ip_) : EncodableValue());
  list.push_back(port_ ? EncodableValue(*port_) : EncodableValue());
  return list;
}

TCPSetting TCPSetting::FromEncodableList(const EncodableList& list) {
  TCPSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_ip = list[1];
  if (!encodable_ip.IsNull()) {
    decoded.set_ip(std::get<std::string>(encodable_ip));
  }
  auto& encodable_port = list[2];
  if (!encodable_port.IsNull()) {
    decoded.set_port(std::get<std::string>(encodable_port));
  }
  return decoded;
}

// HttpSetting

HttpSetting::HttpSetting() {}

HttpSetting::HttpSetting(
  const int64_t* timeout,
  const std::string* ip,
  const std::string* port)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    ip_(ip ? std::optional<std::string>(*ip) : std::nullopt),
    port_(port ? std::optional<std::string>(*port) : std::nullopt) {}

const int64_t* HttpSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void HttpSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void HttpSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* HttpSetting::ip() const {
  return ip_ ? &(*ip_) : nullptr;
}

void HttpSetting::set_ip(const std::string_view* value_arg) {
  ip_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void HttpSetting::set_ip(std::string_view value_arg) {
  ip_ = value_arg;
}


const std::string* HttpSetting::port() const {
  return port_ ? &(*port_) : nullptr;
}

void HttpSetting::set_port(const std::string_view* value_arg) {
  port_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void HttpSetting::set_port(std::string_view value_arg) {
  port_ = value_arg;
}


EncodableList HttpSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(ip_ ? EncodableValue(*ip_) : EncodableValue());
  list.push_back(port_ ? EncodableValue(*port_) : EncodableValue());
  return list;
}

HttpSetting HttpSetting::FromEncodableList(const EncodableList& list) {
  HttpSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_ip = list[1];
  if (!encodable_ip.IsNull()) {
    decoded.set_ip(std::get<std::string>(encodable_ip));
  }
  auto& encodable_port = list[2];
  if (!encodable_port.IsNull()) {
    decoded.set_port(std::get<std::string>(encodable_port));
  }
  return decoded;
}

// HttpsSetting

HttpsSetting::HttpsSetting() {}

HttpsSetting::HttpsSetting(
  const int64_t* timeout,
  const std::string* ip,
  const std::string* port)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    ip_(ip ? std::optional<std::string>(*ip) : std::nullopt),
    port_(port ? std::optional<std::string>(*port) : std::nullopt) {}

const int64_t* HttpsSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void HttpsSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void HttpsSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* HttpsSetting::ip() const {
  return ip_ ? &(*ip_) : nullptr;
}

void HttpsSetting::set_ip(const std::string_view* value_arg) {
  ip_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void HttpsSetting::set_ip(std::string_view value_arg) {
  ip_ = value_arg;
}


const std::string* HttpsSetting::port() const {
  return port_ ? &(*port_) : nullptr;
}

void HttpsSetting::set_port(const std::string_view* value_arg) {
  port_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void HttpsSetting::set_port(std::string_view value_arg) {
  port_ = value_arg;
}


EncodableList HttpsSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(ip_ ? EncodableValue(*ip_) : EncodableValue());
  list.push_back(port_ ? EncodableValue(*port_) : EncodableValue());
  return list;
}

HttpsSetting HttpsSetting::FromEncodableList(const EncodableList& list) {
  HttpsSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_ip = list[1];
  if (!encodable_ip.IsNull()) {
    decoded.set_ip(std::get<std::string>(encodable_ip));
  }
  auto& encodable_port = list[2];
  if (!encodable_port.IsNull()) {
    decoded.set_port(std::get<std::string>(encodable_port));
  }
  return decoded;
}

// SslSetting

SslSetting::SslSetting() {}

SslSetting::SslSetting(
  const int64_t* timeout,
  const std::string* ip,
  const std::string* port)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    ip_(ip ? std::optional<std::string>(*ip) : std::nullopt),
    port_(port ? std::optional<std::string>(*port) : std::nullopt) {}

const int64_t* SslSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void SslSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void SslSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* SslSetting::ip() const {
  return ip_ ? &(*ip_) : nullptr;
}

void SslSetting::set_ip(const std::string_view* value_arg) {
  ip_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SslSetting::set_ip(std::string_view value_arg) {
  ip_ = value_arg;
}


const std::string* SslSetting::port() const {
  return port_ ? &(*port_) : nullptr;
}

void SslSetting::set_port(const std::string_view* value_arg) {
  port_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void SslSetting::set_port(std::string_view value_arg) {
  port_ = value_arg;
}


EncodableList SslSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(ip_ ? EncodableValue(*ip_) : EncodableValue());
  list.push_back(port_ ? EncodableValue(*port_) : EncodableValue());
  return list;
}

SslSetting SslSetting::FromEncodableList(const EncodableList& list) {
  SslSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_ip = list[1];
  if (!encodable_ip.IsNull()) {
    decoded.set_ip(std::get<std::string>(encodable_ip));
  }
  auto& encodable_port = list[2];
  if (!encodable_port.IsNull()) {
    decoded.set_port(std::get<std::string>(encodable_port));
  }
  return decoded;
}

// UsbSetting

UsbSetting::UsbSetting() {}

UsbSetting::UsbSetting(
  const int64_t* timeout,
  const std::string* channel,
  const std::string* device_name)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    channel_(channel ? std::optional<std::string>(*channel) : std::nullopt),
    device_name_(device_name ? std::optional<std::string>(*device_name) : std::nullopt) {}

const int64_t* UsbSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void UsbSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void UsbSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* UsbSetting::channel() const {
  return channel_ ? &(*channel_) : nullptr;
}

void UsbSetting::set_channel(const std::string_view* value_arg) {
  channel_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UsbSetting::set_channel(std::string_view value_arg) {
  channel_ = value_arg;
}


const std::string* UsbSetting::device_name() const {
  return device_name_ ? &(*device_name_) : nullptr;
}

void UsbSetting::set_device_name(const std::string_view* value_arg) {
  device_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UsbSetting::set_device_name(std::string_view value_arg) {
  device_name_ = value_arg;
}


EncodableList UsbSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(channel_ ? EncodableValue(*channel_) : EncodableValue());
  list.push_back(device_name_ ? EncodableValue(*device_name_) : EncodableValue());
  return list;
}

UsbSetting UsbSetting::FromEncodableList(const EncodableList& list) {
  UsbSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_channel = list[1];
  if (!encodable_channel.IsNull()) {
    decoded.set_channel(std::get<std::string>(encodable_channel));
  }
  auto& encodable_device_name = list[2];
  if (!encodable_device_name.IsNull()) {
    decoded.set_device_name(std::get<std::string>(encodable_device_name));
  }
  return decoded;
}

// UartSetting

UartSetting::UartSetting() {}

UartSetting::UartSetting(
  const int64_t* timeout,
  const std::string* serial_port,
  const std::string* baud_rate)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    serial_port_(serial_port ? std::optional<std::string>(*serial_port) : std::nullopt),
    baud_rate_(baud_rate ? std::optional<std::string>(*baud_rate) : std::nullopt) {}

const int64_t* UartSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void UartSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void UartSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* UartSetting::serial_port() const {
  return serial_port_ ? &(*serial_port_) : nullptr;
}

void UartSetting::set_serial_port(const std::string_view* value_arg) {
  serial_port_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UartSetting::set_serial_port(std::string_view value_arg) {
  serial_port_ = value_arg;
}


const std::string* UartSetting::baud_rate() const {
  return baud_rate_ ? &(*baud_rate_) : nullptr;
}

void UartSetting::set_baud_rate(const std::string_view* value_arg) {
  baud_rate_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UartSetting::set_baud_rate(std::string_view value_arg) {
  baud_rate_ = value_arg;
}


EncodableList UartSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(serial_port_ ? EncodableValue(*serial_port_) : EncodableValue());
  list.push_back(baud_rate_ ? EncodableValue(*baud_rate_) : EncodableValue());
  return list;
}

UartSetting UartSetting::FromEncodableList(const EncodableList& list) {
  UartSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_serial_port = list[1];
  if (!encodable_serial_port.IsNull()) {
    decoded.set_serial_port(std::get<std::string>(encodable_serial_port));
  }
  auto& encodable_baud_rate = list[2];
  if (!encodable_baud_rate.IsNull()) {
    decoded.set_baud_rate(std::get<std::string>(encodable_baud_rate));
  }
  return decoded;
}

// BTSetting

BTSetting::BTSetting() {}

BTSetting::BTSetting(
  const int64_t* timeout,
  const std::string* mac_addr)
 : timeout_(timeout ? std::optional<int64_t>(*timeout) : std::nullopt),
    mac_addr_(mac_addr ? std::optional<std::string>(*mac_addr) : std::nullopt) {}

const int64_t* BTSetting::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void BTSetting::set_timeout(const int64_t* value_arg) {
  timeout_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void BTSetting::set_timeout(int64_t value_arg) {
  timeout_ = value_arg;
}


const std::string* BTSetting::mac_addr() const {
  return mac_addr_ ? &(*mac_addr_) : nullptr;
}

void BTSetting::set_mac_addr(const std::string_view* value_arg) {
  mac_addr_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void BTSetting::set_mac_addr(std::string_view value_arg) {
  mac_addr_ = value_arg;
}


EncodableList BTSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(mac_addr_ ? EncodableValue(*mac_addr_) : EncodableValue());
  return list;
}

BTSetting BTSetting::FromEncodableList(const EncodableList& list) {
  BTSetting decoded;
  auto& encodable_timeout = list[0];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(encodable_timeout.LongValue());
  }
  auto& encodable_mac_addr = list[1];
  if (!encodable_mac_addr.IsNull()) {
    decoded.set_mac_addr(std::get<std::string>(encodable_mac_addr));
  }
  return decoded;
}


POSLinkSetApiCodecSerializer::POSLinkSetApiCodecSerializer() {}

EncodableValue POSLinkSetApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(BTSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(HttpSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(HttpsSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(SslSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(TCPSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(UartSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(UsbSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkSetApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(BTSetting)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<BTSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(HttpSetting)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<HttpSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(HttpsSetting)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<HttpsSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(SslSetting)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<SslSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(TCPSetting)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<TCPSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(UartSetting)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<UartSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(UsbSetting)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<UsbSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkSetApi.
const flutter::StandardMessageCodec& POSLinkSetApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkSetApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkSetApi` to handle messages through the `binary_messenger`.
void POSLinkSetApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkSetApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setAIDLSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->SetAIDLSetting();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setTCPSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const TCPSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetTCPSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setHttpSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const HttpSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetHttpSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setHttpsSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const HttpsSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetHttpsSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setSslSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const SslSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetSslSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setUsbSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const UsbSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetUsbSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setUartSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const UartSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetUartSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.getUartDevices", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          ErrorOr<EncodableList> output = api->GetUartDevices();
          if (output.has_error()) {
            reply(WrapError(output.error()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.setBTSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_setting_arg = args.at(0);
          if (encodable_setting_arg.IsNull()) {
            reply(WrapError("setting_arg unexpectedly null."));
            return;
          }
          const auto& setting_arg = std::any_cast<const BTSetting&>(std::get<CustomEncodableValue>(encodable_setting_arg));
          std::optional<FlutterError> output = api->SetBTSetting(setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.cancel", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->Cancel();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.handshake", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Handshake([reply](ErrorOr<bool>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkSetApi.remove", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          std::optional<FlutterError> output = api->Remove();
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkSetApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkSetApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkSet
