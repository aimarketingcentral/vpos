// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkPed.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkPed {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// PedMacCalculationRequest

PedMacCalculationRequest::PedMacCalculationRequest() {}

PedMacCalculationRequest::PedMacCalculationRequest(
  const std::string* input_data,
  const std::string* encryption_bitmap,
  const std::string* mac_key_slot,
  const PedMacWorkMode* mac_work_mode,
  const std::string* encryption_key_slot,
  const std::string* padding_char,
  const PedMacCalculationKeyType* mac_key_type,
  const PedKsnFlag* ksn_flag)
 : input_data_(input_data ? std::optional<std::string>(*input_data) : std::nullopt),
    encryption_bitmap_(encryption_bitmap ? std::optional<std::string>(*encryption_bitmap) : std::nullopt),
    mac_key_slot_(mac_key_slot ? std::optional<std::string>(*mac_key_slot) : std::nullopt),
    mac_work_mode_(mac_work_mode ? std::optional<PedMacWorkMode>(*mac_work_mode) : std::nullopt),
    encryption_key_slot_(encryption_key_slot ? std::optional<std::string>(*encryption_key_slot) : std::nullopt),
    padding_char_(padding_char ? std::optional<std::string>(*padding_char) : std::nullopt),
    mac_key_type_(mac_key_type ? std::optional<PedMacCalculationKeyType>(*mac_key_type) : std::nullopt),
    ksn_flag_(ksn_flag ? std::optional<PedKsnFlag>(*ksn_flag) : std::nullopt) {}

const std::string* PedMacCalculationRequest::input_data() const {
  return input_data_ ? &(*input_data_) : nullptr;
}

void PedMacCalculationRequest::set_input_data(const std::string_view* value_arg) {
  input_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_input_data(std::string_view value_arg) {
  input_data_ = value_arg;
}


const std::string* PedMacCalculationRequest::encryption_bitmap() const {
  return encryption_bitmap_ ? &(*encryption_bitmap_) : nullptr;
}

void PedMacCalculationRequest::set_encryption_bitmap(const std::string_view* value_arg) {
  encryption_bitmap_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_encryption_bitmap(std::string_view value_arg) {
  encryption_bitmap_ = value_arg;
}


const std::string* PedMacCalculationRequest::mac_key_slot() const {
  return mac_key_slot_ ? &(*mac_key_slot_) : nullptr;
}

void PedMacCalculationRequest::set_mac_key_slot(const std::string_view* value_arg) {
  mac_key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_mac_key_slot(std::string_view value_arg) {
  mac_key_slot_ = value_arg;
}


const PedMacWorkMode* PedMacCalculationRequest::mac_work_mode() const {
  return mac_work_mode_ ? &(*mac_work_mode_) : nullptr;
}

void PedMacCalculationRequest::set_mac_work_mode(const PedMacWorkMode* value_arg) {
  mac_work_mode_ = value_arg ? std::optional<PedMacWorkMode>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_mac_work_mode(const PedMacWorkMode& value_arg) {
  mac_work_mode_ = value_arg;
}


const std::string* PedMacCalculationRequest::encryption_key_slot() const {
  return encryption_key_slot_ ? &(*encryption_key_slot_) : nullptr;
}

void PedMacCalculationRequest::set_encryption_key_slot(const std::string_view* value_arg) {
  encryption_key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_encryption_key_slot(std::string_view value_arg) {
  encryption_key_slot_ = value_arg;
}


const std::string* PedMacCalculationRequest::padding_char() const {
  return padding_char_ ? &(*padding_char_) : nullptr;
}

void PedMacCalculationRequest::set_padding_char(const std::string_view* value_arg) {
  padding_char_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_padding_char(std::string_view value_arg) {
  padding_char_ = value_arg;
}


const PedMacCalculationKeyType* PedMacCalculationRequest::mac_key_type() const {
  return mac_key_type_ ? &(*mac_key_type_) : nullptr;
}

void PedMacCalculationRequest::set_mac_key_type(const PedMacCalculationKeyType* value_arg) {
  mac_key_type_ = value_arg ? std::optional<PedMacCalculationKeyType>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_mac_key_type(const PedMacCalculationKeyType& value_arg) {
  mac_key_type_ = value_arg;
}


const PedKsnFlag* PedMacCalculationRequest::ksn_flag() const {
  return ksn_flag_ ? &(*ksn_flag_) : nullptr;
}

void PedMacCalculationRequest::set_ksn_flag(const PedKsnFlag* value_arg) {
  ksn_flag_ = value_arg ? std::optional<PedKsnFlag>(*value_arg) : std::nullopt;
}

void PedMacCalculationRequest::set_ksn_flag(const PedKsnFlag& value_arg) {
  ksn_flag_ = value_arg;
}


EncodableList PedMacCalculationRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(input_data_ ? EncodableValue(*input_data_) : EncodableValue());
  list.push_back(encryption_bitmap_ ? EncodableValue(*encryption_bitmap_) : EncodableValue());
  list.push_back(mac_key_slot_ ? EncodableValue(*mac_key_slot_) : EncodableValue());
  list.push_back(mac_work_mode_ ? EncodableValue((int)(*mac_work_mode_)) : EncodableValue());
  list.push_back(encryption_key_slot_ ? EncodableValue(*encryption_key_slot_) : EncodableValue());
  list.push_back(padding_char_ ? EncodableValue(*padding_char_) : EncodableValue());
  list.push_back(mac_key_type_ ? EncodableValue((int)(*mac_key_type_)) : EncodableValue());
  list.push_back(ksn_flag_ ? EncodableValue((int)(*ksn_flag_)) : EncodableValue());
  return list;
}

PedMacCalculationRequest PedMacCalculationRequest::FromEncodableList(const EncodableList& list) {
  PedMacCalculationRequest decoded;
  auto& encodable_input_data = list[0];
  if (!encodable_input_data.IsNull()) {
    decoded.set_input_data(std::get<std::string>(encodable_input_data));
  }
  auto& encodable_encryption_bitmap = list[1];
  if (!encodable_encryption_bitmap.IsNull()) {
    decoded.set_encryption_bitmap(std::get<std::string>(encodable_encryption_bitmap));
  }
  auto& encodable_mac_key_slot = list[2];
  if (!encodable_mac_key_slot.IsNull()) {
    decoded.set_mac_key_slot(std::get<std::string>(encodable_mac_key_slot));
  }
  auto& encodable_mac_work_mode = list[3];
  if (!encodable_mac_work_mode.IsNull()) {
    decoded.set_mac_work_mode((PedMacWorkMode)(std::get<int32_t>(encodable_mac_work_mode)));
  }
  auto& encodable_encryption_key_slot = list[4];
  if (!encodable_encryption_key_slot.IsNull()) {
    decoded.set_encryption_key_slot(std::get<std::string>(encodable_encryption_key_slot));
  }
  auto& encodable_padding_char = list[5];
  if (!encodable_padding_char.IsNull()) {
    decoded.set_padding_char(std::get<std::string>(encodable_padding_char));
  }
  auto& encodable_mac_key_type = list[6];
  if (!encodable_mac_key_type.IsNull()) {
    decoded.set_mac_key_type((PedMacCalculationKeyType)(std::get<int32_t>(encodable_mac_key_type)));
  }
  auto& encodable_ksn_flag = list[7];
  if (!encodable_ksn_flag.IsNull()) {
    decoded.set_ksn_flag((PedKsnFlag)(std::get<int32_t>(encodable_ksn_flag)));
  }
  return decoded;
}

// PedSessionKeyInjectionRequest

PedSessionKeyInjectionRequest::PedSessionKeyInjectionRequest() {}

PedSessionKeyInjectionRequest::PedSessionKeyInjectionRequest(
  const std::string* source_key_type,
  const std::string* source_key_index,
  const PedDestinationKeyType* destination_key_type,
  const std::string* destination_key_index,
  const std::string* destination_key_value,
  const PedCheckMode* check_mode,
  const std::string* check_buffer)
 : source_key_type_(source_key_type ? std::optional<std::string>(*source_key_type) : std::nullopt),
    source_key_index_(source_key_index ? std::optional<std::string>(*source_key_index) : std::nullopt),
    destination_key_type_(destination_key_type ? std::optional<PedDestinationKeyType>(*destination_key_type) : std::nullopt),
    destination_key_index_(destination_key_index ? std::optional<std::string>(*destination_key_index) : std::nullopt),
    destination_key_value_(destination_key_value ? std::optional<std::string>(*destination_key_value) : std::nullopt),
    check_mode_(check_mode ? std::optional<PedCheckMode>(*check_mode) : std::nullopt),
    check_buffer_(check_buffer ? std::optional<std::string>(*check_buffer) : std::nullopt) {}

const std::string* PedSessionKeyInjectionRequest::source_key_type() const {
  return source_key_type_ ? &(*source_key_type_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_source_key_type(const std::string_view* value_arg) {
  source_key_type_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_source_key_type(std::string_view value_arg) {
  source_key_type_ = value_arg;
}


const std::string* PedSessionKeyInjectionRequest::source_key_index() const {
  return source_key_index_ ? &(*source_key_index_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_source_key_index(const std::string_view* value_arg) {
  source_key_index_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_source_key_index(std::string_view value_arg) {
  source_key_index_ = value_arg;
}


const PedDestinationKeyType* PedSessionKeyInjectionRequest::destination_key_type() const {
  return destination_key_type_ ? &(*destination_key_type_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_destination_key_type(const PedDestinationKeyType* value_arg) {
  destination_key_type_ = value_arg ? std::optional<PedDestinationKeyType>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_destination_key_type(const PedDestinationKeyType& value_arg) {
  destination_key_type_ = value_arg;
}


const std::string* PedSessionKeyInjectionRequest::destination_key_index() const {
  return destination_key_index_ ? &(*destination_key_index_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_destination_key_index(const std::string_view* value_arg) {
  destination_key_index_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_destination_key_index(std::string_view value_arg) {
  destination_key_index_ = value_arg;
}


const std::string* PedSessionKeyInjectionRequest::destination_key_value() const {
  return destination_key_value_ ? &(*destination_key_value_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_destination_key_value(const std::string_view* value_arg) {
  destination_key_value_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_destination_key_value(std::string_view value_arg) {
  destination_key_value_ = value_arg;
}


const PedCheckMode* PedSessionKeyInjectionRequest::check_mode() const {
  return check_mode_ ? &(*check_mode_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_check_mode(const PedCheckMode* value_arg) {
  check_mode_ = value_arg ? std::optional<PedCheckMode>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_check_mode(const PedCheckMode& value_arg) {
  check_mode_ = value_arg;
}


const std::string* PedSessionKeyInjectionRequest::check_buffer() const {
  return check_buffer_ ? &(*check_buffer_) : nullptr;
}

void PedSessionKeyInjectionRequest::set_check_buffer(const std::string_view* value_arg) {
  check_buffer_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionRequest::set_check_buffer(std::string_view value_arg) {
  check_buffer_ = value_arg;
}


EncodableList PedSessionKeyInjectionRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(source_key_type_ ? EncodableValue(*source_key_type_) : EncodableValue());
  list.push_back(source_key_index_ ? EncodableValue(*source_key_index_) : EncodableValue());
  list.push_back(destination_key_type_ ? EncodableValue((int)(*destination_key_type_)) : EncodableValue());
  list.push_back(destination_key_index_ ? EncodableValue(*destination_key_index_) : EncodableValue());
  list.push_back(destination_key_value_ ? EncodableValue(*destination_key_value_) : EncodableValue());
  list.push_back(check_mode_ ? EncodableValue((int)(*check_mode_)) : EncodableValue());
  list.push_back(check_buffer_ ? EncodableValue(*check_buffer_) : EncodableValue());
  return list;
}

PedSessionKeyInjectionRequest PedSessionKeyInjectionRequest::FromEncodableList(const EncodableList& list) {
  PedSessionKeyInjectionRequest decoded;
  auto& encodable_source_key_type = list[0];
  if (!encodable_source_key_type.IsNull()) {
    decoded.set_source_key_type(std::get<std::string>(encodable_source_key_type));
  }
  auto& encodable_source_key_index = list[1];
  if (!encodable_source_key_index.IsNull()) {
    decoded.set_source_key_index(std::get<std::string>(encodable_source_key_index));
  }
  auto& encodable_destination_key_type = list[2];
  if (!encodable_destination_key_type.IsNull()) {
    decoded.set_destination_key_type((PedDestinationKeyType)(std::get<int32_t>(encodable_destination_key_type)));
  }
  auto& encodable_destination_key_index = list[3];
  if (!encodable_destination_key_index.IsNull()) {
    decoded.set_destination_key_index(std::get<std::string>(encodable_destination_key_index));
  }
  auto& encodable_destination_key_value = list[4];
  if (!encodable_destination_key_value.IsNull()) {
    decoded.set_destination_key_value(std::get<std::string>(encodable_destination_key_value));
  }
  auto& encodable_check_mode = list[5];
  if (!encodable_check_mode.IsNull()) {
    decoded.set_check_mode((PedCheckMode)(std::get<int32_t>(encodable_check_mode)));
  }
  auto& encodable_check_buffer = list[6];
  if (!encodable_check_buffer.IsNull()) {
    decoded.set_check_buffer(std::get<std::string>(encodable_check_buffer));
  }
  return decoded;
}

// PedIncreaseKsnRequest

PedIncreaseKsnRequest::PedIncreaseKsnRequest() {}

PedIncreaseKsnRequest::PedIncreaseKsnRequest(
  const PedKeyType* key_type,
  const std::string* key_slot)
 : key_type_(key_type ? std::optional<PedKeyType>(*key_type) : std::nullopt),
    key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt) {}

const PedKeyType* PedIncreaseKsnRequest::key_type() const {
  return key_type_ ? &(*key_type_) : nullptr;
}

void PedIncreaseKsnRequest::set_key_type(const PedKeyType* value_arg) {
  key_type_ = value_arg ? std::optional<PedKeyType>(*value_arg) : std::nullopt;
}

void PedIncreaseKsnRequest::set_key_type(const PedKeyType& value_arg) {
  key_type_ = value_arg;
}


const std::string* PedIncreaseKsnRequest::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void PedIncreaseKsnRequest::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedIncreaseKsnRequest::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


EncodableList PedIncreaseKsnRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(key_type_ ? EncodableValue((int)(*key_type_)) : EncodableValue());
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  return list;
}

PedIncreaseKsnRequest PedIncreaseKsnRequest::FromEncodableList(const EncodableList& list) {
  PedIncreaseKsnRequest decoded;
  auto& encodable_key_type = list[0];
  if (!encodable_key_type.IsNull()) {
    decoded.set_key_type((PedKeyType)(std::get<int32_t>(encodable_key_type)));
  }
  auto& encodable_key_slot = list[1];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  return decoded;
}

// PedGetPedInformationRequest

PedGetPedInformationRequest::PedGetPedInformationRequest() {}

PedGetPedInformationRequest::PedGetPedInformationRequest(
  const PedKeyType* key_type,
  const std::string* key_slot)
 : key_type_(key_type ? std::optional<PedKeyType>(*key_type) : std::nullopt),
    key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt) {}

const PedKeyType* PedGetPedInformationRequest::key_type() const {
  return key_type_ ? &(*key_type_) : nullptr;
}

void PedGetPedInformationRequest::set_key_type(const PedKeyType* value_arg) {
  key_type_ = value_arg ? std::optional<PedKeyType>(*value_arg) : std::nullopt;
}

void PedGetPedInformationRequest::set_key_type(const PedKeyType& value_arg) {
  key_type_ = value_arg;
}


const std::string* PedGetPedInformationRequest::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void PedGetPedInformationRequest::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationRequest::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


EncodableList PedGetPedInformationRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(key_type_ ? EncodableValue((int)(*key_type_)) : EncodableValue());
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  return list;
}

PedGetPedInformationRequest PedGetPedInformationRequest::FromEncodableList(const EncodableList& list) {
  PedGetPedInformationRequest decoded;
  auto& encodable_key_type = list[0];
  if (!encodable_key_type.IsNull()) {
    decoded.set_key_type((PedKeyType)(std::get<int32_t>(encodable_key_type)));
  }
  auto& encodable_key_slot = list[1];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  return decoded;
}

// PedMasterSessionKeyInformation

PedMasterSessionKeyInformation::PedMasterSessionKeyInformation() {}

PedMasterSessionKeyInformation::PedMasterSessionKeyInformation(
  const std::string* key_slot,
  const std::string* kcv)
 : key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt),
    kcv_(kcv ? std::optional<std::string>(*kcv) : std::nullopt) {}

const std::string* PedMasterSessionKeyInformation::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void PedMasterSessionKeyInformation::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMasterSessionKeyInformation::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


const std::string* PedMasterSessionKeyInformation::kcv() const {
  return kcv_ ? &(*kcv_) : nullptr;
}

void PedMasterSessionKeyInformation::set_kcv(const std::string_view* value_arg) {
  kcv_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMasterSessionKeyInformation::set_kcv(std::string_view value_arg) {
  kcv_ = value_arg;
}


EncodableList PedMasterSessionKeyInformation::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  list.push_back(kcv_ ? EncodableValue(*kcv_) : EncodableValue());
  return list;
}

PedMasterSessionKeyInformation PedMasterSessionKeyInformation::FromEncodableList(const EncodableList& list) {
  PedMasterSessionKeyInformation decoded;
  auto& encodable_key_slot = list[0];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  auto& encodable_kcv = list[1];
  if (!encodable_kcv.IsNull()) {
    decoded.set_kcv(std::get<std::string>(encodable_kcv));
  }
  return decoded;
}

// PedDukptKeyInformation

PedDukptKeyInformation::PedDukptKeyInformation() {}

PedDukptKeyInformation::PedDukptKeyInformation(
  const std::string* key_slot,
  const std::string* ksn,
  const std::string* kcv)
 : key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt),
    kcv_(kcv ? std::optional<std::string>(*kcv) : std::nullopt) {}

const std::string* PedDukptKeyInformation::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void PedDukptKeyInformation::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedDukptKeyInformation::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


const std::string* PedDukptKeyInformation::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void PedDukptKeyInformation::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedDukptKeyInformation::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


const std::string* PedDukptKeyInformation::kcv() const {
  return kcv_ ? &(*kcv_) : nullptr;
}

void PedDukptKeyInformation::set_kcv(const std::string_view* value_arg) {
  kcv_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedDukptKeyInformation::set_kcv(std::string_view value_arg) {
  kcv_ = value_arg;
}


EncodableList PedDukptKeyInformation::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  list.push_back(kcv_ ? EncodableValue(*kcv_) : EncodableValue());
  return list;
}

PedDukptKeyInformation PedDukptKeyInformation::FromEncodableList(const EncodableList& list) {
  PedDukptKeyInformation decoded;
  auto& encodable_key_slot = list[0];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  auto& encodable_ksn = list[1];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  auto& encodable_kcv = list[2];
  if (!encodable_kcv.IsNull()) {
    decoded.set_kcv(std::get<std::string>(encodable_kcv));
  }
  return decoded;
}

// PedGetPedInformationResponse

PedGetPedInformationResponse::PedGetPedInformationResponse() {}

PedGetPedInformationResponse::PedGetPedInformationResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* master_available_key_slot_count,
  const std::string* session_available_key_slot_count,
  const std::string* dukpt_available_key_slot_count,
  const std::string* aes_dukpt_available_key_slot_count,
  const EncodableList* tmk,
  const EncodableList* tpk,
  const EncodableList* tak,
  const EncodableList* tdk,
  const EncodableList* dukpt_key,
  const EncodableList* aes_dukpt_key)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    master_available_key_slot_count_(master_available_key_slot_count ? std::optional<std::string>(*master_available_key_slot_count) : std::nullopt),
    session_available_key_slot_count_(session_available_key_slot_count ? std::optional<std::string>(*session_available_key_slot_count) : std::nullopt),
    dukpt_available_key_slot_count_(dukpt_available_key_slot_count ? std::optional<std::string>(*dukpt_available_key_slot_count) : std::nullopt),
    aes_dukpt_available_key_slot_count_(aes_dukpt_available_key_slot_count ? std::optional<std::string>(*aes_dukpt_available_key_slot_count) : std::nullopt),
    tmk_(tmk ? std::optional<EncodableList>(*tmk) : std::nullopt),
    tpk_(tpk ? std::optional<EncodableList>(*tpk) : std::nullopt),
    tak_(tak ? std::optional<EncodableList>(*tak) : std::nullopt),
    tdk_(tdk ? std::optional<EncodableList>(*tdk) : std::nullopt),
    dukpt_key_(dukpt_key ? std::optional<EncodableList>(*dukpt_key) : std::nullopt),
    aes_dukpt_key_(aes_dukpt_key ? std::optional<EncodableList>(*aes_dukpt_key) : std::nullopt) {}

const std::string* PedGetPedInformationResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void PedGetPedInformationResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* PedGetPedInformationResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void PedGetPedInformationResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* PedGetPedInformationResponse::master_available_key_slot_count() const {
  return master_available_key_slot_count_ ? &(*master_available_key_slot_count_) : nullptr;
}

void PedGetPedInformationResponse::set_master_available_key_slot_count(const std::string_view* value_arg) {
  master_available_key_slot_count_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_master_available_key_slot_count(std::string_view value_arg) {
  master_available_key_slot_count_ = value_arg;
}


const std::string* PedGetPedInformationResponse::session_available_key_slot_count() const {
  return session_available_key_slot_count_ ? &(*session_available_key_slot_count_) : nullptr;
}

void PedGetPedInformationResponse::set_session_available_key_slot_count(const std::string_view* value_arg) {
  session_available_key_slot_count_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_session_available_key_slot_count(std::string_view value_arg) {
  session_available_key_slot_count_ = value_arg;
}


const std::string* PedGetPedInformationResponse::dukpt_available_key_slot_count() const {
  return dukpt_available_key_slot_count_ ? &(*dukpt_available_key_slot_count_) : nullptr;
}

void PedGetPedInformationResponse::set_dukpt_available_key_slot_count(const std::string_view* value_arg) {
  dukpt_available_key_slot_count_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_dukpt_available_key_slot_count(std::string_view value_arg) {
  dukpt_available_key_slot_count_ = value_arg;
}


const std::string* PedGetPedInformationResponse::aes_dukpt_available_key_slot_count() const {
  return aes_dukpt_available_key_slot_count_ ? &(*aes_dukpt_available_key_slot_count_) : nullptr;
}

void PedGetPedInformationResponse::set_aes_dukpt_available_key_slot_count(const std::string_view* value_arg) {
  aes_dukpt_available_key_slot_count_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_aes_dukpt_available_key_slot_count(std::string_view value_arg) {
  aes_dukpt_available_key_slot_count_ = value_arg;
}


const EncodableList* PedGetPedInformationResponse::tmk() const {
  return tmk_ ? &(*tmk_) : nullptr;
}

void PedGetPedInformationResponse::set_tmk(const EncodableList* value_arg) {
  tmk_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_tmk(const EncodableList& value_arg) {
  tmk_ = value_arg;
}


const EncodableList* PedGetPedInformationResponse::tpk() const {
  return tpk_ ? &(*tpk_) : nullptr;
}

void PedGetPedInformationResponse::set_tpk(const EncodableList* value_arg) {
  tpk_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_tpk(const EncodableList& value_arg) {
  tpk_ = value_arg;
}


const EncodableList* PedGetPedInformationResponse::tak() const {
  return tak_ ? &(*tak_) : nullptr;
}

void PedGetPedInformationResponse::set_tak(const EncodableList* value_arg) {
  tak_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_tak(const EncodableList& value_arg) {
  tak_ = value_arg;
}


const EncodableList* PedGetPedInformationResponse::tdk() const {
  return tdk_ ? &(*tdk_) : nullptr;
}

void PedGetPedInformationResponse::set_tdk(const EncodableList* value_arg) {
  tdk_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_tdk(const EncodableList& value_arg) {
  tdk_ = value_arg;
}


const EncodableList* PedGetPedInformationResponse::dukpt_key() const {
  return dukpt_key_ ? &(*dukpt_key_) : nullptr;
}

void PedGetPedInformationResponse::set_dukpt_key(const EncodableList* value_arg) {
  dukpt_key_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_dukpt_key(const EncodableList& value_arg) {
  dukpt_key_ = value_arg;
}


const EncodableList* PedGetPedInformationResponse::aes_dukpt_key() const {
  return aes_dukpt_key_ ? &(*aes_dukpt_key_) : nullptr;
}

void PedGetPedInformationResponse::set_aes_dukpt_key(const EncodableList* value_arg) {
  aes_dukpt_key_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void PedGetPedInformationResponse::set_aes_dukpt_key(const EncodableList& value_arg) {
  aes_dukpt_key_ = value_arg;
}


EncodableList PedGetPedInformationResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(12);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(master_available_key_slot_count_ ? EncodableValue(*master_available_key_slot_count_) : EncodableValue());
  list.push_back(session_available_key_slot_count_ ? EncodableValue(*session_available_key_slot_count_) : EncodableValue());
  list.push_back(dukpt_available_key_slot_count_ ? EncodableValue(*dukpt_available_key_slot_count_) : EncodableValue());
  list.push_back(aes_dukpt_available_key_slot_count_ ? EncodableValue(*aes_dukpt_available_key_slot_count_) : EncodableValue());
  list.push_back(tmk_ ? EncodableValue(*tmk_) : EncodableValue());
  list.push_back(tpk_ ? EncodableValue(*tpk_) : EncodableValue());
  list.push_back(tak_ ? EncodableValue(*tak_) : EncodableValue());
  list.push_back(tdk_ ? EncodableValue(*tdk_) : EncodableValue());
  list.push_back(dukpt_key_ ? EncodableValue(*dukpt_key_) : EncodableValue());
  list.push_back(aes_dukpt_key_ ? EncodableValue(*aes_dukpt_key_) : EncodableValue());
  return list;
}

PedGetPedInformationResponse PedGetPedInformationResponse::FromEncodableList(const EncodableList& list) {
  PedGetPedInformationResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_master_available_key_slot_count = list[2];
  if (!encodable_master_available_key_slot_count.IsNull()) {
    decoded.set_master_available_key_slot_count(std::get<std::string>(encodable_master_available_key_slot_count));
  }
  auto& encodable_session_available_key_slot_count = list[3];
  if (!encodable_session_available_key_slot_count.IsNull()) {
    decoded.set_session_available_key_slot_count(std::get<std::string>(encodable_session_available_key_slot_count));
  }
  auto& encodable_dukpt_available_key_slot_count = list[4];
  if (!encodable_dukpt_available_key_slot_count.IsNull()) {
    decoded.set_dukpt_available_key_slot_count(std::get<std::string>(encodable_dukpt_available_key_slot_count));
  }
  auto& encodable_aes_dukpt_available_key_slot_count = list[5];
  if (!encodable_aes_dukpt_available_key_slot_count.IsNull()) {
    decoded.set_aes_dukpt_available_key_slot_count(std::get<std::string>(encodable_aes_dukpt_available_key_slot_count));
  }
  auto& encodable_tmk = list[6];
  if (!encodable_tmk.IsNull()) {
    decoded.set_tmk(std::get<EncodableList>(encodable_tmk));
  }
  auto& encodable_tpk = list[7];
  if (!encodable_tpk.IsNull()) {
    decoded.set_tpk(std::get<EncodableList>(encodable_tpk));
  }
  auto& encodable_tak = list[8];
  if (!encodable_tak.IsNull()) {
    decoded.set_tak(std::get<EncodableList>(encodable_tak));
  }
  auto& encodable_tdk = list[9];
  if (!encodable_tdk.IsNull()) {
    decoded.set_tdk(std::get<EncodableList>(encodable_tdk));
  }
  auto& encodable_dukpt_key = list[10];
  if (!encodable_dukpt_key.IsNull()) {
    decoded.set_dukpt_key(std::get<EncodableList>(encodable_dukpt_key));
  }
  auto& encodable_aes_dukpt_key = list[11];
  if (!encodable_aes_dukpt_key.IsNull()) {
    decoded.set_aes_dukpt_key(std::get<EncodableList>(encodable_aes_dukpt_key));
  }
  return decoded;
}

// PedMacCalculationResponse

PedMacCalculationResponse::PedMacCalculationResponse() {}

PedMacCalculationResponse::PedMacCalculationResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* result_data,
  const std::string* ksn)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    result_data_(result_data ? std::optional<std::string>(*result_data) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt) {}

const std::string* PedMacCalculationResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void PedMacCalculationResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* PedMacCalculationResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void PedMacCalculationResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* PedMacCalculationResponse::result_data() const {
  return result_data_ ? &(*result_data_) : nullptr;
}

void PedMacCalculationResponse::set_result_data(const std::string_view* value_arg) {
  result_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationResponse::set_result_data(std::string_view value_arg) {
  result_data_ = value_arg;
}


const std::string* PedMacCalculationResponse::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void PedMacCalculationResponse::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedMacCalculationResponse::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


EncodableList PedMacCalculationResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(result_data_ ? EncodableValue(*result_data_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  return list;
}

PedMacCalculationResponse PedMacCalculationResponse::FromEncodableList(const EncodableList& list) {
  PedMacCalculationResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_result_data = list[2];
  if (!encodable_result_data.IsNull()) {
    decoded.set_result_data(std::get<std::string>(encodable_result_data));
  }
  auto& encodable_ksn = list[3];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  return decoded;
}

// PedSessionKeyInjectionResponse

PedSessionKeyInjectionResponse::PedSessionKeyInjectionResponse() {}

PedSessionKeyInjectionResponse::PedSessionKeyInjectionResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* PedSessionKeyInjectionResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void PedSessionKeyInjectionResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* PedSessionKeyInjectionResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void PedSessionKeyInjectionResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedSessionKeyInjectionResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList PedSessionKeyInjectionResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

PedSessionKeyInjectionResponse PedSessionKeyInjectionResponse::FromEncodableList(const EncodableList& list) {
  PedSessionKeyInjectionResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// PedIncreaseKsnResponse

PedIncreaseKsnResponse::PedIncreaseKsnResponse() {}

PedIncreaseKsnResponse::PedIncreaseKsnResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* ksn)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt) {}

const std::string* PedIncreaseKsnResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void PedIncreaseKsnResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedIncreaseKsnResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* PedIncreaseKsnResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void PedIncreaseKsnResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedIncreaseKsnResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* PedIncreaseKsnResponse::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void PedIncreaseKsnResponse::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PedIncreaseKsnResponse::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


EncodableList PedIncreaseKsnResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  return list;
}

PedIncreaseKsnResponse PedIncreaseKsnResponse::FromEncodableList(const EncodableList& list) {
  PedIncreaseKsnResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_ksn = list[2];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  return decoded;
}


POSLinkPedApiCodecSerializer::POSLinkPedApiCodecSerializer() {}

EncodableValue POSLinkPedApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(PedDukptKeyInformation::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(PedGetPedInformationRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(PedGetPedInformationResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(PedIncreaseKsnRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(PedIncreaseKsnResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(PedMacCalculationRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(PedMacCalculationResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(PedMasterSessionKeyInformation::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 136:
      return CustomEncodableValue(PedSessionKeyInjectionRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 137:
      return CustomEncodableValue(PedSessionKeyInjectionResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkPedApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PedDukptKeyInformation)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<PedDukptKeyInformation>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedGetPedInformationRequest)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<PedGetPedInformationRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedGetPedInformationResponse)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<PedGetPedInformationResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedIncreaseKsnRequest)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<PedIncreaseKsnRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedIncreaseKsnResponse)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<PedIncreaseKsnResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedMacCalculationRequest)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<PedMacCalculationRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedMacCalculationResponse)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<PedMacCalculationResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedMasterSessionKeyInformation)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<PedMasterSessionKeyInformation>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedSessionKeyInjectionRequest)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<PedSessionKeyInjectionRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PedSessionKeyInjectionResponse)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<PedSessionKeyInjectionResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkPedApi.
const flutter::StandardMessageCodec& POSLinkPedApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkPedApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkPedApi` to handle messages through the `binary_messenger`.
void POSLinkPedApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkPedApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkPedApi.getPedInformation", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const PedGetPedInformationRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetPedInformation(req_arg, [reply](ErrorOr<PedGetPedInformationResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkPedApi.increaseKsn", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const PedIncreaseKsnRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->IncreaseKsn(req_arg, [reply](ErrorOr<PedIncreaseKsnResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkPedApi.sessionKeyInjection", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const PedSessionKeyInjectionRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->SessionKeyInjection(req_arg, [reply](ErrorOr<PedSessionKeyInjectionResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkPedApi.macCalculation", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const PedMacCalculationRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->MacCalculation(req_arg, [reply](ErrorOr<PedMacCalculationResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkPedApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkPedApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkPed
