// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkManage.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkManage {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// ManageMultiMerchant

ManageMultiMerchant::ManageMultiMerchant() {}

ManageMultiMerchant::ManageMultiMerchant(
  const std::string* multi_merchant_id,
  const std::string* multi_merchant_name)
 : multi_merchant_id_(multi_merchant_id ? std::optional<std::string>(*multi_merchant_id) : std::nullopt),
    multi_merchant_name_(multi_merchant_name ? std::optional<std::string>(*multi_merchant_name) : std::nullopt) {}

const std::string* ManageMultiMerchant::multi_merchant_id() const {
  return multi_merchant_id_ ? &(*multi_merchant_id_) : nullptr;
}

void ManageMultiMerchant::set_multi_merchant_id(const std::string_view* value_arg) {
  multi_merchant_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageMultiMerchant::set_multi_merchant_id(std::string_view value_arg) {
  multi_merchant_id_ = value_arg;
}


const std::string* ManageMultiMerchant::multi_merchant_name() const {
  return multi_merchant_name_ ? &(*multi_merchant_name_) : nullptr;
}

void ManageMultiMerchant::set_multi_merchant_name(const std::string_view* value_arg) {
  multi_merchant_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageMultiMerchant::set_multi_merchant_name(std::string_view value_arg) {
  multi_merchant_name_ = value_arg;
}


EncodableList ManageMultiMerchant::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(multi_merchant_id_ ? EncodableValue(*multi_merchant_id_) : EncodableValue());
  list.push_back(multi_merchant_name_ ? EncodableValue(*multi_merchant_name_) : EncodableValue());
  return list;
}

ManageMultiMerchant ManageMultiMerchant::FromEncodableList(const EncodableList& list) {
  ManageMultiMerchant decoded;
  auto& encodable_multi_merchant_id = list[0];
  if (!encodable_multi_merchant_id.IsNull()) {
    decoded.set_multi_merchant_id(std::get<std::string>(encodable_multi_merchant_id));
  }
  auto& encodable_multi_merchant_name = list[1];
  if (!encodable_multi_merchant_name.IsNull()) {
    decoded.set_multi_merchant_name(std::get<std::string>(encodable_multi_merchant_name));
  }
  return decoded;
}

// ManageSetVariableRequest

ManageSetVariableRequest::ManageSetVariableRequest() {}

ManageSetVariableRequest::ManageSetVariableRequest(
  const ManageEdcType* edc_type,
  const std::string* variable_name1,
  const std::string* variable_value1,
  const std::string* variable_name2,
  const std::string* variable_value2,
  const std::string* variable_name3,
  const std::string* variable_value3,
  const std::string* variable_name4,
  const std::string* variable_value4,
  const std::string* variable_name5,
  const std::string* variable_value5,
  const ManageMultiMerchant* multi_merchant)
 : edc_type_(edc_type ? std::optional<ManageEdcType>(*edc_type) : std::nullopt),
    variable_name1_(variable_name1 ? std::optional<std::string>(*variable_name1) : std::nullopt),
    variable_value1_(variable_value1 ? std::optional<std::string>(*variable_value1) : std::nullopt),
    variable_name2_(variable_name2 ? std::optional<std::string>(*variable_name2) : std::nullopt),
    variable_value2_(variable_value2 ? std::optional<std::string>(*variable_value2) : std::nullopt),
    variable_name3_(variable_name3 ? std::optional<std::string>(*variable_name3) : std::nullopt),
    variable_value3_(variable_value3 ? std::optional<std::string>(*variable_value3) : std::nullopt),
    variable_name4_(variable_name4 ? std::optional<std::string>(*variable_name4) : std::nullopt),
    variable_value4_(variable_value4 ? std::optional<std::string>(*variable_value4) : std::nullopt),
    variable_name5_(variable_name5 ? std::optional<std::string>(*variable_name5) : std::nullopt),
    variable_value5_(variable_value5 ? std::optional<std::string>(*variable_value5) : std::nullopt),
    multi_merchant_(multi_merchant ? std::optional<ManageMultiMerchant>(*multi_merchant) : std::nullopt) {}

const ManageEdcType* ManageSetVariableRequest::edc_type() const {
  return edc_type_ ? &(*edc_type_) : nullptr;
}

void ManageSetVariableRequest::set_edc_type(const ManageEdcType* value_arg) {
  edc_type_ = value_arg ? std::optional<ManageEdcType>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_edc_type(const ManageEdcType& value_arg) {
  edc_type_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_name1() const {
  return variable_name1_ ? &(*variable_name1_) : nullptr;
}

void ManageSetVariableRequest::set_variable_name1(const std::string_view* value_arg) {
  variable_name1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_name1(std::string_view value_arg) {
  variable_name1_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_value1() const {
  return variable_value1_ ? &(*variable_value1_) : nullptr;
}

void ManageSetVariableRequest::set_variable_value1(const std::string_view* value_arg) {
  variable_value1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_value1(std::string_view value_arg) {
  variable_value1_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_name2() const {
  return variable_name2_ ? &(*variable_name2_) : nullptr;
}

void ManageSetVariableRequest::set_variable_name2(const std::string_view* value_arg) {
  variable_name2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_name2(std::string_view value_arg) {
  variable_name2_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_value2() const {
  return variable_value2_ ? &(*variable_value2_) : nullptr;
}

void ManageSetVariableRequest::set_variable_value2(const std::string_view* value_arg) {
  variable_value2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_value2(std::string_view value_arg) {
  variable_value2_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_name3() const {
  return variable_name3_ ? &(*variable_name3_) : nullptr;
}

void ManageSetVariableRequest::set_variable_name3(const std::string_view* value_arg) {
  variable_name3_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_name3(std::string_view value_arg) {
  variable_name3_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_value3() const {
  return variable_value3_ ? &(*variable_value3_) : nullptr;
}

void ManageSetVariableRequest::set_variable_value3(const std::string_view* value_arg) {
  variable_value3_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_value3(std::string_view value_arg) {
  variable_value3_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_name4() const {
  return variable_name4_ ? &(*variable_name4_) : nullptr;
}

void ManageSetVariableRequest::set_variable_name4(const std::string_view* value_arg) {
  variable_name4_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_name4(std::string_view value_arg) {
  variable_name4_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_value4() const {
  return variable_value4_ ? &(*variable_value4_) : nullptr;
}

void ManageSetVariableRequest::set_variable_value4(const std::string_view* value_arg) {
  variable_value4_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_value4(std::string_view value_arg) {
  variable_value4_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_name5() const {
  return variable_name5_ ? &(*variable_name5_) : nullptr;
}

void ManageSetVariableRequest::set_variable_name5(const std::string_view* value_arg) {
  variable_name5_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_name5(std::string_view value_arg) {
  variable_name5_ = value_arg;
}


const std::string* ManageSetVariableRequest::variable_value5() const {
  return variable_value5_ ? &(*variable_value5_) : nullptr;
}

void ManageSetVariableRequest::set_variable_value5(const std::string_view* value_arg) {
  variable_value5_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_variable_value5(std::string_view value_arg) {
  variable_value5_ = value_arg;
}


const ManageMultiMerchant* ManageSetVariableRequest::multi_merchant() const {
  return multi_merchant_ ? &(*multi_merchant_) : nullptr;
}

void ManageSetVariableRequest::set_multi_merchant(const ManageMultiMerchant* value_arg) {
  multi_merchant_ = value_arg ? std::optional<ManageMultiMerchant>(*value_arg) : std::nullopt;
}

void ManageSetVariableRequest::set_multi_merchant(const ManageMultiMerchant& value_arg) {
  multi_merchant_ = value_arg;
}


EncodableList ManageSetVariableRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(12);
  list.push_back(edc_type_ ? EncodableValue((int)(*edc_type_)) : EncodableValue());
  list.push_back(variable_name1_ ? EncodableValue(*variable_name1_) : EncodableValue());
  list.push_back(variable_value1_ ? EncodableValue(*variable_value1_) : EncodableValue());
  list.push_back(variable_name2_ ? EncodableValue(*variable_name2_) : EncodableValue());
  list.push_back(variable_value2_ ? EncodableValue(*variable_value2_) : EncodableValue());
  list.push_back(variable_name3_ ? EncodableValue(*variable_name3_) : EncodableValue());
  list.push_back(variable_value3_ ? EncodableValue(*variable_value3_) : EncodableValue());
  list.push_back(variable_name4_ ? EncodableValue(*variable_name4_) : EncodableValue());
  list.push_back(variable_value4_ ? EncodableValue(*variable_value4_) : EncodableValue());
  list.push_back(variable_name5_ ? EncodableValue(*variable_name5_) : EncodableValue());
  list.push_back(variable_value5_ ? EncodableValue(*variable_value5_) : EncodableValue());
  list.push_back(multi_merchant_ ? EncodableValue(multi_merchant_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageSetVariableRequest ManageSetVariableRequest::FromEncodableList(const EncodableList& list) {
  ManageSetVariableRequest decoded;
  auto& encodable_edc_type = list[0];
  if (!encodable_edc_type.IsNull()) {
    decoded.set_edc_type((ManageEdcType)(std::get<int32_t>(encodable_edc_type)));
  }
  auto& encodable_variable_name1 = list[1];
  if (!encodable_variable_name1.IsNull()) {
    decoded.set_variable_name1(std::get<std::string>(encodable_variable_name1));
  }
  auto& encodable_variable_value1 = list[2];
  if (!encodable_variable_value1.IsNull()) {
    decoded.set_variable_value1(std::get<std::string>(encodable_variable_value1));
  }
  auto& encodable_variable_name2 = list[3];
  if (!encodable_variable_name2.IsNull()) {
    decoded.set_variable_name2(std::get<std::string>(encodable_variable_name2));
  }
  auto& encodable_variable_value2 = list[4];
  if (!encodable_variable_value2.IsNull()) {
    decoded.set_variable_value2(std::get<std::string>(encodable_variable_value2));
  }
  auto& encodable_variable_name3 = list[5];
  if (!encodable_variable_name3.IsNull()) {
    decoded.set_variable_name3(std::get<std::string>(encodable_variable_name3));
  }
  auto& encodable_variable_value3 = list[6];
  if (!encodable_variable_value3.IsNull()) {
    decoded.set_variable_value3(std::get<std::string>(encodable_variable_value3));
  }
  auto& encodable_variable_name4 = list[7];
  if (!encodable_variable_name4.IsNull()) {
    decoded.set_variable_name4(std::get<std::string>(encodable_variable_name4));
  }
  auto& encodable_variable_value4 = list[8];
  if (!encodable_variable_value4.IsNull()) {
    decoded.set_variable_value4(std::get<std::string>(encodable_variable_value4));
  }
  auto& encodable_variable_name5 = list[9];
  if (!encodable_variable_name5.IsNull()) {
    decoded.set_variable_name5(std::get<std::string>(encodable_variable_name5));
  }
  auto& encodable_variable_value5 = list[10];
  if (!encodable_variable_value5.IsNull()) {
    decoded.set_variable_value5(std::get<std::string>(encodable_variable_value5));
  }
  auto& encodable_multi_merchant = list[11];
  if (!encodable_multi_merchant.IsNull()) {
    decoded.set_multi_merchant(ManageMultiMerchant::FromEncodableList(std::get<EncodableList>(encodable_multi_merchant)));
  }
  return decoded;
}

// ManageNewService

ManageNewService::ManageNewService() {}

ManageNewService::ManageNewService(
  const ManageNewServiceType* type,
  const std::string* title,
  const std::string* url)
 : type_(type ? std::optional<ManageNewServiceType>(*type) : std::nullopt),
    title_(title ? std::optional<std::string>(*title) : std::nullopt),
    url_(url ? std::optional<std::string>(*url) : std::nullopt) {}

const ManageNewServiceType* ManageNewService::type() const {
  return type_ ? &(*type_) : nullptr;
}

void ManageNewService::set_type(const ManageNewServiceType* value_arg) {
  type_ = value_arg ? std::optional<ManageNewServiceType>(*value_arg) : std::nullopt;
}

void ManageNewService::set_type(const ManageNewServiceType& value_arg) {
  type_ = value_arg;
}


const std::string* ManageNewService::title() const {
  return title_ ? &(*title_) : nullptr;
}

void ManageNewService::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageNewService::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* ManageNewService::url() const {
  return url_ ? &(*url_) : nullptr;
}

void ManageNewService::set_url(const std::string_view* value_arg) {
  url_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageNewService::set_url(std::string_view value_arg) {
  url_ = value_arg;
}


EncodableList ManageNewService::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(type_ ? EncodableValue((int)(*type_)) : EncodableValue());
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(url_ ? EncodableValue(*url_) : EncodableValue());
  return list;
}

ManageNewService ManageNewService::FromEncodableList(const EncodableList& list) {
  ManageNewService decoded;
  auto& encodable_type = list[0];
  if (!encodable_type.IsNull()) {
    decoded.set_type((ManageNewServiceType)(std::get<int32_t>(encodable_type)));
  }
  auto& encodable_title = list[1];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_url = list[2];
  if (!encodable_url.IsNull()) {
    decoded.set_url(std::get<std::string>(encodable_url));
  }
  return decoded;
}

// ManageServiceUpdate

ManageServiceUpdate::ManageServiceUpdate() {}

ManageServiceUpdate::ManageServiceUpdate(
  const std::string* update_id,
  const ManageUpdateOperation* update_operation,
  const std::string* update_payload)
 : update_id_(update_id ? std::optional<std::string>(*update_id) : std::nullopt),
    update_operation_(update_operation ? std::optional<ManageUpdateOperation>(*update_operation) : std::nullopt),
    update_payload_(update_payload ? std::optional<std::string>(*update_payload) : std::nullopt) {}

const std::string* ManageServiceUpdate::update_id() const {
  return update_id_ ? &(*update_id_) : nullptr;
}

void ManageServiceUpdate::set_update_id(const std::string_view* value_arg) {
  update_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageServiceUpdate::set_update_id(std::string_view value_arg) {
  update_id_ = value_arg;
}


const ManageUpdateOperation* ManageServiceUpdate::update_operation() const {
  return update_operation_ ? &(*update_operation_) : nullptr;
}

void ManageServiceUpdate::set_update_operation(const ManageUpdateOperation* value_arg) {
  update_operation_ = value_arg ? std::optional<ManageUpdateOperation>(*value_arg) : std::nullopt;
}

void ManageServiceUpdate::set_update_operation(const ManageUpdateOperation& value_arg) {
  update_operation_ = value_arg;
}


const std::string* ManageServiceUpdate::update_payload() const {
  return update_payload_ ? &(*update_payload_) : nullptr;
}

void ManageServiceUpdate::set_update_payload(const std::string_view* value_arg) {
  update_payload_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageServiceUpdate::set_update_payload(std::string_view value_arg) {
  update_payload_ = value_arg;
}


EncodableList ManageServiceUpdate::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(update_id_ ? EncodableValue(*update_id_) : EncodableValue());
  list.push_back(update_operation_ ? EncodableValue((int)(*update_operation_)) : EncodableValue());
  list.push_back(update_payload_ ? EncodableValue(*update_payload_) : EncodableValue());
  return list;
}

ManageServiceUpdate ManageServiceUpdate::FromEncodableList(const EncodableList& list) {
  ManageServiceUpdate decoded;
  auto& encodable_update_id = list[0];
  if (!encodable_update_id.IsNull()) {
    decoded.set_update_id(std::get<std::string>(encodable_update_id));
  }
  auto& encodable_update_operation = list[1];
  if (!encodable_update_operation.IsNull()) {
    decoded.set_update_operation((ManageUpdateOperation)(std::get<int32_t>(encodable_update_operation)));
  }
  auto& encodable_update_payload = list[2];
  if (!encodable_update_payload.IsNull()) {
    decoded.set_update_payload(std::get<std::string>(encodable_update_payload));
  }
  return decoded;
}

// ManageServiceUsage

ManageServiceUsage::ManageServiceUsage() {}

ManageServiceUsage::ManageServiceUsage(
  const std::string* usage_id,
  const ManageServiceState* state,
  const std::string* title,
  const std::string* describe)
 : usage_id_(usage_id ? std::optional<std::string>(*usage_id) : std::nullopt),
    state_(state ? std::optional<ManageServiceState>(*state) : std::nullopt),
    title_(title ? std::optional<std::string>(*title) : std::nullopt),
    describe_(describe ? std::optional<std::string>(*describe) : std::nullopt) {}

const std::string* ManageServiceUsage::usage_id() const {
  return usage_id_ ? &(*usage_id_) : nullptr;
}

void ManageServiceUsage::set_usage_id(const std::string_view* value_arg) {
  usage_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageServiceUsage::set_usage_id(std::string_view value_arg) {
  usage_id_ = value_arg;
}


const ManageServiceState* ManageServiceUsage::state() const {
  return state_ ? &(*state_) : nullptr;
}

void ManageServiceUsage::set_state(const ManageServiceState* value_arg) {
  state_ = value_arg ? std::optional<ManageServiceState>(*value_arg) : std::nullopt;
}

void ManageServiceUsage::set_state(const ManageServiceState& value_arg) {
  state_ = value_arg;
}


const std::string* ManageServiceUsage::title() const {
  return title_ ? &(*title_) : nullptr;
}

void ManageServiceUsage::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageServiceUsage::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* ManageServiceUsage::describe() const {
  return describe_ ? &(*describe_) : nullptr;
}

void ManageServiceUsage::set_describe(const std::string_view* value_arg) {
  describe_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageServiceUsage::set_describe(std::string_view value_arg) {
  describe_ = value_arg;
}


EncodableList ManageServiceUsage::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(usage_id_ ? EncodableValue(*usage_id_) : EncodableValue());
  list.push_back(state_ ? EncodableValue((int)(*state_)) : EncodableValue());
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(describe_ ? EncodableValue(*describe_) : EncodableValue());
  return list;
}

ManageServiceUsage ManageServiceUsage::FromEncodableList(const EncodableList& list) {
  ManageServiceUsage decoded;
  auto& encodable_usage_id = list[0];
  if (!encodable_usage_id.IsNull()) {
    decoded.set_usage_id(std::get<std::string>(encodable_usage_id));
  }
  auto& encodable_state = list[1];
  if (!encodable_state.IsNull()) {
    decoded.set_state((ManageServiceState)(std::get<int32_t>(encodable_state)));
  }
  auto& encodable_title = list[2];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_describe = list[3];
  if (!encodable_describe.IsNull()) {
    decoded.set_describe(std::get<std::string>(encodable_describe));
  }
  return decoded;
}

// ManageGoogleSmartTapCapBitmap

ManageGoogleSmartTapCapBitmap::ManageGoogleSmartTapCapBitmap() {}

ManageGoogleSmartTapCapBitmap::ManageGoogleSmartTapCapBitmap(
  const bool* stand_alone,
  const bool* semi_integrated,
  const bool* unattended,
  const bool* online,
  const bool* offline,
  const bool* mmp,
  const bool* zlib_support,
  const bool* printer,
  const bool* printer_graphics,
  const bool* display,
  const bool* images,
  const bool* audio,
  const bool* animation,
  const bool* video,
  const bool* support_payment,
  const bool* support_digital_receipt,
  const bool* support_service_issuance,
  const bool* support_ota_pos_data,
  const bool* online_pin,
  const bool* cd_pin,
  const bool* signature,
  const bool* no_cvm,
  const bool* device_generated_code,
  const bool* sp_generated_code,
  const bool* id_capture,
  const bool* bio_metric)
 : stand_alone_(stand_alone ? std::optional<bool>(*stand_alone) : std::nullopt),
    semi_integrated_(semi_integrated ? std::optional<bool>(*semi_integrated) : std::nullopt),
    unattended_(unattended ? std::optional<bool>(*unattended) : std::nullopt),
    online_(online ? std::optional<bool>(*online) : std::nullopt),
    offline_(offline ? std::optional<bool>(*offline) : std::nullopt),
    mmp_(mmp ? std::optional<bool>(*mmp) : std::nullopt),
    zlib_support_(zlib_support ? std::optional<bool>(*zlib_support) : std::nullopt),
    printer_(printer ? std::optional<bool>(*printer) : std::nullopt),
    printer_graphics_(printer_graphics ? std::optional<bool>(*printer_graphics) : std::nullopt),
    display_(display ? std::optional<bool>(*display) : std::nullopt),
    images_(images ? std::optional<bool>(*images) : std::nullopt),
    audio_(audio ? std::optional<bool>(*audio) : std::nullopt),
    animation_(animation ? std::optional<bool>(*animation) : std::nullopt),
    video_(video ? std::optional<bool>(*video) : std::nullopt),
    support_payment_(support_payment ? std::optional<bool>(*support_payment) : std::nullopt),
    support_digital_receipt_(support_digital_receipt ? std::optional<bool>(*support_digital_receipt) : std::nullopt),
    support_service_issuance_(support_service_issuance ? std::optional<bool>(*support_service_issuance) : std::nullopt),
    support_ota_pos_data_(support_ota_pos_data ? std::optional<bool>(*support_ota_pos_data) : std::nullopt),
    online_pin_(online_pin ? std::optional<bool>(*online_pin) : std::nullopt),
    cd_pin_(cd_pin ? std::optional<bool>(*cd_pin) : std::nullopt),
    signature_(signature ? std::optional<bool>(*signature) : std::nullopt),
    no_cvm_(no_cvm ? std::optional<bool>(*no_cvm) : std::nullopt),
    device_generated_code_(device_generated_code ? std::optional<bool>(*device_generated_code) : std::nullopt),
    sp_generated_code_(sp_generated_code ? std::optional<bool>(*sp_generated_code) : std::nullopt),
    id_capture_(id_capture ? std::optional<bool>(*id_capture) : std::nullopt),
    bio_metric_(bio_metric ? std::optional<bool>(*bio_metric) : std::nullopt) {}

const bool* ManageGoogleSmartTapCapBitmap::stand_alone() const {
  return stand_alone_ ? &(*stand_alone_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_stand_alone(const bool* value_arg) {
  stand_alone_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_stand_alone(bool value_arg) {
  stand_alone_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::semi_integrated() const {
  return semi_integrated_ ? &(*semi_integrated_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_semi_integrated(const bool* value_arg) {
  semi_integrated_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_semi_integrated(bool value_arg) {
  semi_integrated_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::unattended() const {
  return unattended_ ? &(*unattended_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_unattended(const bool* value_arg) {
  unattended_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_unattended(bool value_arg) {
  unattended_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::online() const {
  return online_ ? &(*online_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_online(const bool* value_arg) {
  online_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_online(bool value_arg) {
  online_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::offline() const {
  return offline_ ? &(*offline_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_offline(const bool* value_arg) {
  offline_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_offline(bool value_arg) {
  offline_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::mmp() const {
  return mmp_ ? &(*mmp_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_mmp(const bool* value_arg) {
  mmp_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_mmp(bool value_arg) {
  mmp_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::zlib_support() const {
  return zlib_support_ ? &(*zlib_support_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_zlib_support(const bool* value_arg) {
  zlib_support_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_zlib_support(bool value_arg) {
  zlib_support_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::printer() const {
  return printer_ ? &(*printer_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_printer(const bool* value_arg) {
  printer_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_printer(bool value_arg) {
  printer_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::printer_graphics() const {
  return printer_graphics_ ? &(*printer_graphics_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_printer_graphics(const bool* value_arg) {
  printer_graphics_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_printer_graphics(bool value_arg) {
  printer_graphics_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::display() const {
  return display_ ? &(*display_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_display(const bool* value_arg) {
  display_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_display(bool value_arg) {
  display_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::images() const {
  return images_ ? &(*images_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_images(const bool* value_arg) {
  images_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_images(bool value_arg) {
  images_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::audio() const {
  return audio_ ? &(*audio_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_audio(const bool* value_arg) {
  audio_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_audio(bool value_arg) {
  audio_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::animation() const {
  return animation_ ? &(*animation_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_animation(const bool* value_arg) {
  animation_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_animation(bool value_arg) {
  animation_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::video() const {
  return video_ ? &(*video_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_video(const bool* value_arg) {
  video_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_video(bool value_arg) {
  video_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::support_payment() const {
  return support_payment_ ? &(*support_payment_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_support_payment(const bool* value_arg) {
  support_payment_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_support_payment(bool value_arg) {
  support_payment_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::support_digital_receipt() const {
  return support_digital_receipt_ ? &(*support_digital_receipt_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_support_digital_receipt(const bool* value_arg) {
  support_digital_receipt_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_support_digital_receipt(bool value_arg) {
  support_digital_receipt_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::support_service_issuance() const {
  return support_service_issuance_ ? &(*support_service_issuance_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_support_service_issuance(const bool* value_arg) {
  support_service_issuance_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_support_service_issuance(bool value_arg) {
  support_service_issuance_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::support_ota_pos_data() const {
  return support_ota_pos_data_ ? &(*support_ota_pos_data_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_support_ota_pos_data(const bool* value_arg) {
  support_ota_pos_data_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_support_ota_pos_data(bool value_arg) {
  support_ota_pos_data_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::online_pin() const {
  return online_pin_ ? &(*online_pin_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_online_pin(const bool* value_arg) {
  online_pin_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_online_pin(bool value_arg) {
  online_pin_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::cd_pin() const {
  return cd_pin_ ? &(*cd_pin_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_cd_pin(const bool* value_arg) {
  cd_pin_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_cd_pin(bool value_arg) {
  cd_pin_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::signature() const {
  return signature_ ? &(*signature_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_signature(const bool* value_arg) {
  signature_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_signature(bool value_arg) {
  signature_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::no_cvm() const {
  return no_cvm_ ? &(*no_cvm_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_no_cvm(const bool* value_arg) {
  no_cvm_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_no_cvm(bool value_arg) {
  no_cvm_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::device_generated_code() const {
  return device_generated_code_ ? &(*device_generated_code_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_device_generated_code(const bool* value_arg) {
  device_generated_code_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_device_generated_code(bool value_arg) {
  device_generated_code_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::sp_generated_code() const {
  return sp_generated_code_ ? &(*sp_generated_code_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_sp_generated_code(const bool* value_arg) {
  sp_generated_code_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_sp_generated_code(bool value_arg) {
  sp_generated_code_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::id_capture() const {
  return id_capture_ ? &(*id_capture_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_id_capture(const bool* value_arg) {
  id_capture_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_id_capture(bool value_arg) {
  id_capture_ = value_arg;
}


const bool* ManageGoogleSmartTapCapBitmap::bio_metric() const {
  return bio_metric_ ? &(*bio_metric_) : nullptr;
}

void ManageGoogleSmartTapCapBitmap::set_bio_metric(const bool* value_arg) {
  bio_metric_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapCapBitmap::set_bio_metric(bool value_arg) {
  bio_metric_ = value_arg;
}


EncodableList ManageGoogleSmartTapCapBitmap::ToEncodableList() const {
  EncodableList list;
  list.reserve(26);
  list.push_back(stand_alone_ ? EncodableValue(*stand_alone_) : EncodableValue());
  list.push_back(semi_integrated_ ? EncodableValue(*semi_integrated_) : EncodableValue());
  list.push_back(unattended_ ? EncodableValue(*unattended_) : EncodableValue());
  list.push_back(online_ ? EncodableValue(*online_) : EncodableValue());
  list.push_back(offline_ ? EncodableValue(*offline_) : EncodableValue());
  list.push_back(mmp_ ? EncodableValue(*mmp_) : EncodableValue());
  list.push_back(zlib_support_ ? EncodableValue(*zlib_support_) : EncodableValue());
  list.push_back(printer_ ? EncodableValue(*printer_) : EncodableValue());
  list.push_back(printer_graphics_ ? EncodableValue(*printer_graphics_) : EncodableValue());
  list.push_back(display_ ? EncodableValue(*display_) : EncodableValue());
  list.push_back(images_ ? EncodableValue(*images_) : EncodableValue());
  list.push_back(audio_ ? EncodableValue(*audio_) : EncodableValue());
  list.push_back(animation_ ? EncodableValue(*animation_) : EncodableValue());
  list.push_back(video_ ? EncodableValue(*video_) : EncodableValue());
  list.push_back(support_payment_ ? EncodableValue(*support_payment_) : EncodableValue());
  list.push_back(support_digital_receipt_ ? EncodableValue(*support_digital_receipt_) : EncodableValue());
  list.push_back(support_service_issuance_ ? EncodableValue(*support_service_issuance_) : EncodableValue());
  list.push_back(support_ota_pos_data_ ? EncodableValue(*support_ota_pos_data_) : EncodableValue());
  list.push_back(online_pin_ ? EncodableValue(*online_pin_) : EncodableValue());
  list.push_back(cd_pin_ ? EncodableValue(*cd_pin_) : EncodableValue());
  list.push_back(signature_ ? EncodableValue(*signature_) : EncodableValue());
  list.push_back(no_cvm_ ? EncodableValue(*no_cvm_) : EncodableValue());
  list.push_back(device_generated_code_ ? EncodableValue(*device_generated_code_) : EncodableValue());
  list.push_back(sp_generated_code_ ? EncodableValue(*sp_generated_code_) : EncodableValue());
  list.push_back(id_capture_ ? EncodableValue(*id_capture_) : EncodableValue());
  list.push_back(bio_metric_ ? EncodableValue(*bio_metric_) : EncodableValue());
  return list;
}

ManageGoogleSmartTapCapBitmap ManageGoogleSmartTapCapBitmap::FromEncodableList(const EncodableList& list) {
  ManageGoogleSmartTapCapBitmap decoded;
  auto& encodable_stand_alone = list[0];
  if (!encodable_stand_alone.IsNull()) {
    decoded.set_stand_alone(std::get<bool>(encodable_stand_alone));
  }
  auto& encodable_semi_integrated = list[1];
  if (!encodable_semi_integrated.IsNull()) {
    decoded.set_semi_integrated(std::get<bool>(encodable_semi_integrated));
  }
  auto& encodable_unattended = list[2];
  if (!encodable_unattended.IsNull()) {
    decoded.set_unattended(std::get<bool>(encodable_unattended));
  }
  auto& encodable_online = list[3];
  if (!encodable_online.IsNull()) {
    decoded.set_online(std::get<bool>(encodable_online));
  }
  auto& encodable_offline = list[4];
  if (!encodable_offline.IsNull()) {
    decoded.set_offline(std::get<bool>(encodable_offline));
  }
  auto& encodable_mmp = list[5];
  if (!encodable_mmp.IsNull()) {
    decoded.set_mmp(std::get<bool>(encodable_mmp));
  }
  auto& encodable_zlib_support = list[6];
  if (!encodable_zlib_support.IsNull()) {
    decoded.set_zlib_support(std::get<bool>(encodable_zlib_support));
  }
  auto& encodable_printer = list[7];
  if (!encodable_printer.IsNull()) {
    decoded.set_printer(std::get<bool>(encodable_printer));
  }
  auto& encodable_printer_graphics = list[8];
  if (!encodable_printer_graphics.IsNull()) {
    decoded.set_printer_graphics(std::get<bool>(encodable_printer_graphics));
  }
  auto& encodable_display = list[9];
  if (!encodable_display.IsNull()) {
    decoded.set_display(std::get<bool>(encodable_display));
  }
  auto& encodable_images = list[10];
  if (!encodable_images.IsNull()) {
    decoded.set_images(std::get<bool>(encodable_images));
  }
  auto& encodable_audio = list[11];
  if (!encodable_audio.IsNull()) {
    decoded.set_audio(std::get<bool>(encodable_audio));
  }
  auto& encodable_animation = list[12];
  if (!encodable_animation.IsNull()) {
    decoded.set_animation(std::get<bool>(encodable_animation));
  }
  auto& encodable_video = list[13];
  if (!encodable_video.IsNull()) {
    decoded.set_video(std::get<bool>(encodable_video));
  }
  auto& encodable_support_payment = list[14];
  if (!encodable_support_payment.IsNull()) {
    decoded.set_support_payment(std::get<bool>(encodable_support_payment));
  }
  auto& encodable_support_digital_receipt = list[15];
  if (!encodable_support_digital_receipt.IsNull()) {
    decoded.set_support_digital_receipt(std::get<bool>(encodable_support_digital_receipt));
  }
  auto& encodable_support_service_issuance = list[16];
  if (!encodable_support_service_issuance.IsNull()) {
    decoded.set_support_service_issuance(std::get<bool>(encodable_support_service_issuance));
  }
  auto& encodable_support_ota_pos_data = list[17];
  if (!encodable_support_ota_pos_data.IsNull()) {
    decoded.set_support_ota_pos_data(std::get<bool>(encodable_support_ota_pos_data));
  }
  auto& encodable_online_pin = list[18];
  if (!encodable_online_pin.IsNull()) {
    decoded.set_online_pin(std::get<bool>(encodable_online_pin));
  }
  auto& encodable_cd_pin = list[19];
  if (!encodable_cd_pin.IsNull()) {
    decoded.set_cd_pin(std::get<bool>(encodable_cd_pin));
  }
  auto& encodable_signature = list[20];
  if (!encodable_signature.IsNull()) {
    decoded.set_signature(std::get<bool>(encodable_signature));
  }
  auto& encodable_no_cvm = list[21];
  if (!encodable_no_cvm.IsNull()) {
    decoded.set_no_cvm(std::get<bool>(encodable_no_cvm));
  }
  auto& encodable_device_generated_code = list[22];
  if (!encodable_device_generated_code.IsNull()) {
    decoded.set_device_generated_code(std::get<bool>(encodable_device_generated_code));
  }
  auto& encodable_sp_generated_code = list[23];
  if (!encodable_sp_generated_code.IsNull()) {
    decoded.set_sp_generated_code(std::get<bool>(encodable_sp_generated_code));
  }
  auto& encodable_id_capture = list[24];
  if (!encodable_id_capture.IsNull()) {
    decoded.set_id_capture(std::get<bool>(encodable_id_capture));
  }
  auto& encodable_bio_metric = list[25];
  if (!encodable_bio_metric.IsNull()) {
    decoded.set_bio_metric(std::get<bool>(encodable_bio_metric));
  }
  return decoded;
}

// ManageGoogleSmartTapPushService

ManageGoogleSmartTapPushService::ManageGoogleSmartTapPushService() {}

ManageGoogleSmartTapPushService::ManageGoogleSmartTapPushService(
  const ManageSecurity* security,
  const ManageGoogleSmartTapCapBitmap* google_smart_tap_cap,
  const std::string* collect_id,
  const EncodableList* google_service_usage,
  const EncodableList* google_service_update,
  const EncodableList* google_new_service,
  const ManageEndTap* end_tap)
 : security_(security ? std::optional<ManageSecurity>(*security) : std::nullopt),
    google_smart_tap_cap_(google_smart_tap_cap ? std::optional<ManageGoogleSmartTapCapBitmap>(*google_smart_tap_cap) : std::nullopt),
    collect_id_(collect_id ? std::optional<std::string>(*collect_id) : std::nullopt),
    google_service_usage_(google_service_usage ? std::optional<EncodableList>(*google_service_usage) : std::nullopt),
    google_service_update_(google_service_update ? std::optional<EncodableList>(*google_service_update) : std::nullopt),
    google_new_service_(google_new_service ? std::optional<EncodableList>(*google_new_service) : std::nullopt),
    end_tap_(end_tap ? std::optional<ManageEndTap>(*end_tap) : std::nullopt) {}

const ManageSecurity* ManageGoogleSmartTapPushService::security() const {
  return security_ ? &(*security_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_security(const ManageSecurity* value_arg) {
  security_ = value_arg ? std::optional<ManageSecurity>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_security(const ManageSecurity& value_arg) {
  security_ = value_arg;
}


const ManageGoogleSmartTapCapBitmap* ManageGoogleSmartTapPushService::google_smart_tap_cap() const {
  return google_smart_tap_cap_ ? &(*google_smart_tap_cap_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_google_smart_tap_cap(const ManageGoogleSmartTapCapBitmap* value_arg) {
  google_smart_tap_cap_ = value_arg ? std::optional<ManageGoogleSmartTapCapBitmap>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_google_smart_tap_cap(const ManageGoogleSmartTapCapBitmap& value_arg) {
  google_smart_tap_cap_ = value_arg;
}


const std::string* ManageGoogleSmartTapPushService::collect_id() const {
  return collect_id_ ? &(*collect_id_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_collect_id(const std::string_view* value_arg) {
  collect_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_collect_id(std::string_view value_arg) {
  collect_id_ = value_arg;
}


const EncodableList* ManageGoogleSmartTapPushService::google_service_usage() const {
  return google_service_usage_ ? &(*google_service_usage_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_google_service_usage(const EncodableList* value_arg) {
  google_service_usage_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_google_service_usage(const EncodableList& value_arg) {
  google_service_usage_ = value_arg;
}


const EncodableList* ManageGoogleSmartTapPushService::google_service_update() const {
  return google_service_update_ ? &(*google_service_update_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_google_service_update(const EncodableList* value_arg) {
  google_service_update_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_google_service_update(const EncodableList& value_arg) {
  google_service_update_ = value_arg;
}


const EncodableList* ManageGoogleSmartTapPushService::google_new_service() const {
  return google_new_service_ ? &(*google_new_service_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_google_new_service(const EncodableList* value_arg) {
  google_new_service_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_google_new_service(const EncodableList& value_arg) {
  google_new_service_ = value_arg;
}


const ManageEndTap* ManageGoogleSmartTapPushService::end_tap() const {
  return end_tap_ ? &(*end_tap_) : nullptr;
}

void ManageGoogleSmartTapPushService::set_end_tap(const ManageEndTap* value_arg) {
  end_tap_ = value_arg ? std::optional<ManageEndTap>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTapPushService::set_end_tap(const ManageEndTap& value_arg) {
  end_tap_ = value_arg;
}


EncodableList ManageGoogleSmartTapPushService::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(security_ ? EncodableValue((int)(*security_)) : EncodableValue());
  list.push_back(google_smart_tap_cap_ ? EncodableValue(google_smart_tap_cap_->ToEncodableList()) : EncodableValue());
  list.push_back(collect_id_ ? EncodableValue(*collect_id_) : EncodableValue());
  list.push_back(google_service_usage_ ? EncodableValue(*google_service_usage_) : EncodableValue());
  list.push_back(google_service_update_ ? EncodableValue(*google_service_update_) : EncodableValue());
  list.push_back(google_new_service_ ? EncodableValue(*google_new_service_) : EncodableValue());
  list.push_back(end_tap_ ? EncodableValue((int)(*end_tap_)) : EncodableValue());
  return list;
}

ManageGoogleSmartTapPushService ManageGoogleSmartTapPushService::FromEncodableList(const EncodableList& list) {
  ManageGoogleSmartTapPushService decoded;
  auto& encodable_security = list[0];
  if (!encodable_security.IsNull()) {
    decoded.set_security((ManageSecurity)(std::get<int32_t>(encodable_security)));
  }
  auto& encodable_google_smart_tap_cap = list[1];
  if (!encodable_google_smart_tap_cap.IsNull()) {
    decoded.set_google_smart_tap_cap(ManageGoogleSmartTapCapBitmap::FromEncodableList(std::get<EncodableList>(encodable_google_smart_tap_cap)));
  }
  auto& encodable_collect_id = list[2];
  if (!encodable_collect_id.IsNull()) {
    decoded.set_collect_id(std::get<std::string>(encodable_collect_id));
  }
  auto& encodable_google_service_usage = list[3];
  if (!encodable_google_service_usage.IsNull()) {
    decoded.set_google_service_usage(std::get<EncodableList>(encodable_google_service_usage));
  }
  auto& encodable_google_service_update = list[4];
  if (!encodable_google_service_update.IsNull()) {
    decoded.set_google_service_update(std::get<EncodableList>(encodable_google_service_update));
  }
  auto& encodable_google_new_service = list[5];
  if (!encodable_google_new_service.IsNull()) {
    decoded.set_google_new_service(std::get<EncodableList>(encodable_google_new_service));
  }
  auto& encodable_end_tap = list[6];
  if (!encodable_end_tap.IsNull()) {
    decoded.set_end_tap((ManageEndTap)(std::get<int32_t>(encodable_end_tap)));
  }
  return decoded;
}

// ManageRebootRequest

ManageRebootRequest::ManageRebootRequest() {}

ManageRebootRequest::ManageRebootRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* ManageRebootRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void ManageRebootRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageRebootRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList ManageRebootRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

ManageRebootRequest ManageRebootRequest::FromEncodableList(const EncodableList& list) {
  ManageRebootRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// ManageUpdateResourceFileRequest

ManageUpdateResourceFileRequest::ManageUpdateResourceFileRequest() {}

ManageUpdateResourceFileRequest::ManageUpdateResourceFileRequest(
  const std::string* file_url,
  const ManageFileType* file_type,
  const ManageTargetDevice* target_device)
 : file_url_(file_url ? std::optional<std::string>(*file_url) : std::nullopt),
    file_type_(file_type ? std::optional<ManageFileType>(*file_type) : std::nullopt),
    target_device_(target_device ? std::optional<ManageTargetDevice>(*target_device) : std::nullopt) {}

const std::string* ManageUpdateResourceFileRequest::file_url() const {
  return file_url_ ? &(*file_url_) : nullptr;
}

void ManageUpdateResourceFileRequest::set_file_url(const std::string_view* value_arg) {
  file_url_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageUpdateResourceFileRequest::set_file_url(std::string_view value_arg) {
  file_url_ = value_arg;
}


const ManageFileType* ManageUpdateResourceFileRequest::file_type() const {
  return file_type_ ? &(*file_type_) : nullptr;
}

void ManageUpdateResourceFileRequest::set_file_type(const ManageFileType* value_arg) {
  file_type_ = value_arg ? std::optional<ManageFileType>(*value_arg) : std::nullopt;
}

void ManageUpdateResourceFileRequest::set_file_type(const ManageFileType& value_arg) {
  file_type_ = value_arg;
}


const ManageTargetDevice* ManageUpdateResourceFileRequest::target_device() const {
  return target_device_ ? &(*target_device_) : nullptr;
}

void ManageUpdateResourceFileRequest::set_target_device(const ManageTargetDevice* value_arg) {
  target_device_ = value_arg ? std::optional<ManageTargetDevice>(*value_arg) : std::nullopt;
}

void ManageUpdateResourceFileRequest::set_target_device(const ManageTargetDevice& value_arg) {
  target_device_ = value_arg;
}


EncodableList ManageUpdateResourceFileRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(file_url_ ? EncodableValue(*file_url_) : EncodableValue());
  list.push_back(file_type_ ? EncodableValue((int)(*file_type_)) : EncodableValue());
  list.push_back(target_device_ ? EncodableValue((int)(*target_device_)) : EncodableValue());
  return list;
}

ManageUpdateResourceFileRequest ManageUpdateResourceFileRequest::FromEncodableList(const EncodableList& list) {
  ManageUpdateResourceFileRequest decoded;
  auto& encodable_file_url = list[0];
  if (!encodable_file_url.IsNull()) {
    decoded.set_file_url(std::get<std::string>(encodable_file_url));
  }
  auto& encodable_file_type = list[1];
  if (!encodable_file_type.IsNull()) {
    decoded.set_file_type((ManageFileType)(std::get<int32_t>(encodable_file_type)));
  }
  auto& encodable_target_device = list[2];
  if (!encodable_target_device.IsNull()) {
    decoded.set_target_device((ManageTargetDevice)(std::get<int32_t>(encodable_target_device)));
  }
  return decoded;
}

// ManageGetVariableRequest

ManageGetVariableRequest::ManageGetVariableRequest() {}

ManageGetVariableRequest::ManageGetVariableRequest(
  const ManageEdcType* edc_type,
  const std::string* variable_name1,
  const std::string* variable_name2,
  const std::string* variable_name3,
  const std::string* variable_name4,
  const std::string* variable_name5,
  const ManageMultiMerchant* multi_merchant)
 : edc_type_(edc_type ? std::optional<ManageEdcType>(*edc_type) : std::nullopt),
    variable_name1_(variable_name1 ? std::optional<std::string>(*variable_name1) : std::nullopt),
    variable_name2_(variable_name2 ? std::optional<std::string>(*variable_name2) : std::nullopt),
    variable_name3_(variable_name3 ? std::optional<std::string>(*variable_name3) : std::nullopt),
    variable_name4_(variable_name4 ? std::optional<std::string>(*variable_name4) : std::nullopt),
    variable_name5_(variable_name5 ? std::optional<std::string>(*variable_name5) : std::nullopt),
    multi_merchant_(multi_merchant ? std::optional<ManageMultiMerchant>(*multi_merchant) : std::nullopt) {}

const ManageEdcType* ManageGetVariableRequest::edc_type() const {
  return edc_type_ ? &(*edc_type_) : nullptr;
}

void ManageGetVariableRequest::set_edc_type(const ManageEdcType* value_arg) {
  edc_type_ = value_arg ? std::optional<ManageEdcType>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_edc_type(const ManageEdcType& value_arg) {
  edc_type_ = value_arg;
}


const std::string* ManageGetVariableRequest::variable_name1() const {
  return variable_name1_ ? &(*variable_name1_) : nullptr;
}

void ManageGetVariableRequest::set_variable_name1(const std::string_view* value_arg) {
  variable_name1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_variable_name1(std::string_view value_arg) {
  variable_name1_ = value_arg;
}


const std::string* ManageGetVariableRequest::variable_name2() const {
  return variable_name2_ ? &(*variable_name2_) : nullptr;
}

void ManageGetVariableRequest::set_variable_name2(const std::string_view* value_arg) {
  variable_name2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_variable_name2(std::string_view value_arg) {
  variable_name2_ = value_arg;
}


const std::string* ManageGetVariableRequest::variable_name3() const {
  return variable_name3_ ? &(*variable_name3_) : nullptr;
}

void ManageGetVariableRequest::set_variable_name3(const std::string_view* value_arg) {
  variable_name3_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_variable_name3(std::string_view value_arg) {
  variable_name3_ = value_arg;
}


const std::string* ManageGetVariableRequest::variable_name4() const {
  return variable_name4_ ? &(*variable_name4_) : nullptr;
}

void ManageGetVariableRequest::set_variable_name4(const std::string_view* value_arg) {
  variable_name4_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_variable_name4(std::string_view value_arg) {
  variable_name4_ = value_arg;
}


const std::string* ManageGetVariableRequest::variable_name5() const {
  return variable_name5_ ? &(*variable_name5_) : nullptr;
}

void ManageGetVariableRequest::set_variable_name5(const std::string_view* value_arg) {
  variable_name5_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_variable_name5(std::string_view value_arg) {
  variable_name5_ = value_arg;
}


const ManageMultiMerchant* ManageGetVariableRequest::multi_merchant() const {
  return multi_merchant_ ? &(*multi_merchant_) : nullptr;
}

void ManageGetVariableRequest::set_multi_merchant(const ManageMultiMerchant* value_arg) {
  multi_merchant_ = value_arg ? std::optional<ManageMultiMerchant>(*value_arg) : std::nullopt;
}

void ManageGetVariableRequest::set_multi_merchant(const ManageMultiMerchant& value_arg) {
  multi_merchant_ = value_arg;
}


EncodableList ManageGetVariableRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(edc_type_ ? EncodableValue((int)(*edc_type_)) : EncodableValue());
  list.push_back(variable_name1_ ? EncodableValue(*variable_name1_) : EncodableValue());
  list.push_back(variable_name2_ ? EncodableValue(*variable_name2_) : EncodableValue());
  list.push_back(variable_name3_ ? EncodableValue(*variable_name3_) : EncodableValue());
  list.push_back(variable_name4_ ? EncodableValue(*variable_name4_) : EncodableValue());
  list.push_back(variable_name5_ ? EncodableValue(*variable_name5_) : EncodableValue());
  list.push_back(multi_merchant_ ? EncodableValue(multi_merchant_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageGetVariableRequest ManageGetVariableRequest::FromEncodableList(const EncodableList& list) {
  ManageGetVariableRequest decoded;
  auto& encodable_edc_type = list[0];
  if (!encodable_edc_type.IsNull()) {
    decoded.set_edc_type((ManageEdcType)(std::get<int32_t>(encodable_edc_type)));
  }
  auto& encodable_variable_name1 = list[1];
  if (!encodable_variable_name1.IsNull()) {
    decoded.set_variable_name1(std::get<std::string>(encodable_variable_name1));
  }
  auto& encodable_variable_name2 = list[2];
  if (!encodable_variable_name2.IsNull()) {
    decoded.set_variable_name2(std::get<std::string>(encodable_variable_name2));
  }
  auto& encodable_variable_name3 = list[3];
  if (!encodable_variable_name3.IsNull()) {
    decoded.set_variable_name3(std::get<std::string>(encodable_variable_name3));
  }
  auto& encodable_variable_name4 = list[4];
  if (!encodable_variable_name4.IsNull()) {
    decoded.set_variable_name4(std::get<std::string>(encodable_variable_name4));
  }
  auto& encodable_variable_name5 = list[5];
  if (!encodable_variable_name5.IsNull()) {
    decoded.set_variable_name5(std::get<std::string>(encodable_variable_name5));
  }
  auto& encodable_multi_merchant = list[6];
  if (!encodable_multi_merchant.IsNull()) {
    decoded.set_multi_merchant(ManageMultiMerchant::FromEncodableList(std::get<EncodableList>(encodable_multi_merchant)));
  }
  return decoded;
}

// ManageResetScreenRequest

ManageResetScreenRequest::ManageResetScreenRequest() {}

ManageResetScreenRequest::ManageResetScreenRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* ManageResetScreenRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void ManageResetScreenRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageResetScreenRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList ManageResetScreenRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

ManageResetScreenRequest ManageResetScreenRequest::FromEncodableList(const EncodableList& list) {
  ManageResetScreenRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// ManageApplePayVas

ManageApplePayVas::ManageApplePayVas() {}

ManageApplePayVas::ManageApplePayVas(
  const std::string* merchant_id,
  const ManageUrlMode* url_mode,
  const std::string* url,
  const EncodableList* key_file_mapping)
 : merchant_id_(merchant_id ? std::optional<std::string>(*merchant_id) : std::nullopt),
    url_mode_(url_mode ? std::optional<ManageUrlMode>(*url_mode) : std::nullopt),
    url_(url ? std::optional<std::string>(*url) : std::nullopt),
    key_file_mapping_(key_file_mapping ? std::optional<EncodableList>(*key_file_mapping) : std::nullopt) {}

const std::string* ManageApplePayVas::merchant_id() const {
  return merchant_id_ ? &(*merchant_id_) : nullptr;
}

void ManageApplePayVas::set_merchant_id(const std::string_view* value_arg) {
  merchant_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageApplePayVas::set_merchant_id(std::string_view value_arg) {
  merchant_id_ = value_arg;
}


const ManageUrlMode* ManageApplePayVas::url_mode() const {
  return url_mode_ ? &(*url_mode_) : nullptr;
}

void ManageApplePayVas::set_url_mode(const ManageUrlMode* value_arg) {
  url_mode_ = value_arg ? std::optional<ManageUrlMode>(*value_arg) : std::nullopt;
}

void ManageApplePayVas::set_url_mode(const ManageUrlMode& value_arg) {
  url_mode_ = value_arg;
}


const std::string* ManageApplePayVas::url() const {
  return url_ ? &(*url_) : nullptr;
}

void ManageApplePayVas::set_url(const std::string_view* value_arg) {
  url_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageApplePayVas::set_url(std::string_view value_arg) {
  url_ = value_arg;
}


const EncodableList* ManageApplePayVas::key_file_mapping() const {
  return key_file_mapping_ ? &(*key_file_mapping_) : nullptr;
}

void ManageApplePayVas::set_key_file_mapping(const EncodableList* value_arg) {
  key_file_mapping_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void ManageApplePayVas::set_key_file_mapping(const EncodableList& value_arg) {
  key_file_mapping_ = value_arg;
}


EncodableList ManageApplePayVas::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(merchant_id_ ? EncodableValue(*merchant_id_) : EncodableValue());
  list.push_back(url_mode_ ? EncodableValue((int)(*url_mode_)) : EncodableValue());
  list.push_back(url_ ? EncodableValue(*url_) : EncodableValue());
  list.push_back(key_file_mapping_ ? EncodableValue(*key_file_mapping_) : EncodableValue());
  return list;
}

ManageApplePayVas ManageApplePayVas::FromEncodableList(const EncodableList& list) {
  ManageApplePayVas decoded;
  auto& encodable_merchant_id = list[0];
  if (!encodable_merchant_id.IsNull()) {
    decoded.set_merchant_id(std::get<std::string>(encodable_merchant_id));
  }
  auto& encodable_url_mode = list[1];
  if (!encodable_url_mode.IsNull()) {
    decoded.set_url_mode((ManageUrlMode)(std::get<int32_t>(encodable_url_mode)));
  }
  auto& encodable_url = list[2];
  if (!encodable_url.IsNull()) {
    decoded.set_url(std::get<std::string>(encodable_url));
  }
  auto& encodable_key_file_mapping = list[3];
  if (!encodable_key_file_mapping.IsNull()) {
    decoded.set_key_file_mapping(std::get<EncodableList>(encodable_key_file_mapping));
  }
  return decoded;
}

// ManageGetSignatureRequest

ManageGetSignatureRequest::ManageGetSignatureRequest() {}

ManageGetSignatureRequest::ManageGetSignatureRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* ManageGetSignatureRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void ManageGetSignatureRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetSignatureRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList ManageGetSignatureRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

ManageGetSignatureRequest ManageGetSignatureRequest::FromEncodableList(const EncodableList& list) {
  ManageGetSignatureRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// ManageSetApplePayVasParametersRequest

ManageSetApplePayVasParametersRequest::ManageSetApplePayVasParametersRequest() {}

ManageSetApplePayVasParametersRequest::ManageSetApplePayVasParametersRequest(
  const ManageVasMode* vas_mode,
  const ManageApplePayVas* apple_pay_vas_data)
 : vas_mode_(vas_mode ? std::optional<ManageVasMode>(*vas_mode) : std::nullopt),
    apple_pay_vas_data_(apple_pay_vas_data ? std::optional<ManageApplePayVas>(*apple_pay_vas_data) : std::nullopt) {}

const ManageVasMode* ManageSetApplePayVasParametersRequest::vas_mode() const {
  return vas_mode_ ? &(*vas_mode_) : nullptr;
}

void ManageSetApplePayVasParametersRequest::set_vas_mode(const ManageVasMode* value_arg) {
  vas_mode_ = value_arg ? std::optional<ManageVasMode>(*value_arg) : std::nullopt;
}

void ManageSetApplePayVasParametersRequest::set_vas_mode(const ManageVasMode& value_arg) {
  vas_mode_ = value_arg;
}


const ManageApplePayVas* ManageSetApplePayVasParametersRequest::apple_pay_vas_data() const {
  return apple_pay_vas_data_ ? &(*apple_pay_vas_data_) : nullptr;
}

void ManageSetApplePayVasParametersRequest::set_apple_pay_vas_data(const ManageApplePayVas* value_arg) {
  apple_pay_vas_data_ = value_arg ? std::optional<ManageApplePayVas>(*value_arg) : std::nullopt;
}

void ManageSetApplePayVasParametersRequest::set_apple_pay_vas_data(const ManageApplePayVas& value_arg) {
  apple_pay_vas_data_ = value_arg;
}


EncodableList ManageSetApplePayVasParametersRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(vas_mode_ ? EncodableValue((int)(*vas_mode_)) : EncodableValue());
  list.push_back(apple_pay_vas_data_ ? EncodableValue(apple_pay_vas_data_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageSetApplePayVasParametersRequest ManageSetApplePayVasParametersRequest::FromEncodableList(const EncodableList& list) {
  ManageSetApplePayVasParametersRequest decoded;
  auto& encodable_vas_mode = list[0];
  if (!encodable_vas_mode.IsNull()) {
    decoded.set_vas_mode((ManageVasMode)(std::get<int32_t>(encodable_vas_mode)));
  }
  auto& encodable_apple_pay_vas_data = list[1];
  if (!encodable_apple_pay_vas_data.IsNull()) {
    decoded.set_apple_pay_vas_data(ManageApplePayVas::FromEncodableList(std::get<EncodableList>(encodable_apple_pay_vas_data)));
  }
  return decoded;
}

// ManageClearCardBufferRequest

ManageClearCardBufferRequest::ManageClearCardBufferRequest() {}

ManageClearCardBufferRequest::ManageClearCardBufferRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* ManageClearCardBufferRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void ManageClearCardBufferRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageClearCardBufferRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList ManageClearCardBufferRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

ManageClearCardBufferRequest ManageClearCardBufferRequest::FromEncodableList(const EncodableList& list) {
  ManageClearCardBufferRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// ManageCheckFileRequest

ManageCheckFileRequest::ManageCheckFileRequest() {}

ManageCheckFileRequest::ManageCheckFileRequest(const std::string* file_name)
 : file_name_(file_name ? std::optional<std::string>(*file_name) : std::nullopt) {}

const std::string* ManageCheckFileRequest::file_name() const {
  return file_name_ ? &(*file_name_) : nullptr;
}

void ManageCheckFileRequest::set_file_name(const std::string_view* value_arg) {
  file_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageCheckFileRequest::set_file_name(std::string_view value_arg) {
  file_name_ = value_arg;
}


EncodableList ManageCheckFileRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(file_name_ ? EncodableValue(*file_name_) : EncodableValue());
  return list;
}

ManageCheckFileRequest ManageCheckFileRequest::FromEncodableList(const EncodableList& list) {
  ManageCheckFileRequest decoded;
  auto& encodable_file_name = list[0];
  if (!encodable_file_name.IsNull()) {
    decoded.set_file_name(std::get<std::string>(encodable_file_name));
  }
  return decoded;
}

// ManageGoogleServiceTypeBitmap

ManageGoogleServiceTypeBitmap::ManageGoogleServiceTypeBitmap() {}

ManageGoogleServiceTypeBitmap::ManageGoogleServiceTypeBitmap(
  const bool* all_services,
  const bool* all_services_except_ppse,
  const bool* ppse,
  const bool* loyalty,
  const bool* offer,
  const bool* gift_card1,
  const bool* private_label_card,
  const bool* cloud_based_wallet,
  const bool* mobile_marketing_platform,
  const bool* wallet_customer)
 : all_services_(all_services ? std::optional<bool>(*all_services) : std::nullopt),
    all_services_except_ppse_(all_services_except_ppse ? std::optional<bool>(*all_services_except_ppse) : std::nullopt),
    ppse_(ppse ? std::optional<bool>(*ppse) : std::nullopt),
    loyalty_(loyalty ? std::optional<bool>(*loyalty) : std::nullopt),
    offer_(offer ? std::optional<bool>(*offer) : std::nullopt),
    gift_card1_(gift_card1 ? std::optional<bool>(*gift_card1) : std::nullopt),
    private_label_card_(private_label_card ? std::optional<bool>(*private_label_card) : std::nullopt),
    cloud_based_wallet_(cloud_based_wallet ? std::optional<bool>(*cloud_based_wallet) : std::nullopt),
    mobile_marketing_platform_(mobile_marketing_platform ? std::optional<bool>(*mobile_marketing_platform) : std::nullopt),
    wallet_customer_(wallet_customer ? std::optional<bool>(*wallet_customer) : std::nullopt) {}

const bool* ManageGoogleServiceTypeBitmap::all_services() const {
  return all_services_ ? &(*all_services_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_all_services(const bool* value_arg) {
  all_services_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_all_services(bool value_arg) {
  all_services_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::all_services_except_ppse() const {
  return all_services_except_ppse_ ? &(*all_services_except_ppse_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_all_services_except_ppse(const bool* value_arg) {
  all_services_except_ppse_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_all_services_except_ppse(bool value_arg) {
  all_services_except_ppse_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::ppse() const {
  return ppse_ ? &(*ppse_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_ppse(const bool* value_arg) {
  ppse_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_ppse(bool value_arg) {
  ppse_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::loyalty() const {
  return loyalty_ ? &(*loyalty_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_loyalty(const bool* value_arg) {
  loyalty_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_loyalty(bool value_arg) {
  loyalty_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::offer() const {
  return offer_ ? &(*offer_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_offer(const bool* value_arg) {
  offer_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_offer(bool value_arg) {
  offer_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::gift_card1() const {
  return gift_card1_ ? &(*gift_card1_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_gift_card1(const bool* value_arg) {
  gift_card1_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_gift_card1(bool value_arg) {
  gift_card1_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::private_label_card() const {
  return private_label_card_ ? &(*private_label_card_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_private_label_card(const bool* value_arg) {
  private_label_card_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_private_label_card(bool value_arg) {
  private_label_card_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::cloud_based_wallet() const {
  return cloud_based_wallet_ ? &(*cloud_based_wallet_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_cloud_based_wallet(const bool* value_arg) {
  cloud_based_wallet_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_cloud_based_wallet(bool value_arg) {
  cloud_based_wallet_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::mobile_marketing_platform() const {
  return mobile_marketing_platform_ ? &(*mobile_marketing_platform_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_mobile_marketing_platform(const bool* value_arg) {
  mobile_marketing_platform_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_mobile_marketing_platform(bool value_arg) {
  mobile_marketing_platform_ = value_arg;
}


const bool* ManageGoogleServiceTypeBitmap::wallet_customer() const {
  return wallet_customer_ ? &(*wallet_customer_) : nullptr;
}

void ManageGoogleServiceTypeBitmap::set_wallet_customer(const bool* value_arg) {
  wallet_customer_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageGoogleServiceTypeBitmap::set_wallet_customer(bool value_arg) {
  wallet_customer_ = value_arg;
}


EncodableList ManageGoogleServiceTypeBitmap::ToEncodableList() const {
  EncodableList list;
  list.reserve(10);
  list.push_back(all_services_ ? EncodableValue(*all_services_) : EncodableValue());
  list.push_back(all_services_except_ppse_ ? EncodableValue(*all_services_except_ppse_) : EncodableValue());
  list.push_back(ppse_ ? EncodableValue(*ppse_) : EncodableValue());
  list.push_back(loyalty_ ? EncodableValue(*loyalty_) : EncodableValue());
  list.push_back(offer_ ? EncodableValue(*offer_) : EncodableValue());
  list.push_back(gift_card1_ ? EncodableValue(*gift_card1_) : EncodableValue());
  list.push_back(private_label_card_ ? EncodableValue(*private_label_card_) : EncodableValue());
  list.push_back(cloud_based_wallet_ ? EncodableValue(*cloud_based_wallet_) : EncodableValue());
  list.push_back(mobile_marketing_platform_ ? EncodableValue(*mobile_marketing_platform_) : EncodableValue());
  list.push_back(wallet_customer_ ? EncodableValue(*wallet_customer_) : EncodableValue());
  return list;
}

ManageGoogleServiceTypeBitmap ManageGoogleServiceTypeBitmap::FromEncodableList(const EncodableList& list) {
  ManageGoogleServiceTypeBitmap decoded;
  auto& encodable_all_services = list[0];
  if (!encodable_all_services.IsNull()) {
    decoded.set_all_services(std::get<bool>(encodable_all_services));
  }
  auto& encodable_all_services_except_ppse = list[1];
  if (!encodable_all_services_except_ppse.IsNull()) {
    decoded.set_all_services_except_ppse(std::get<bool>(encodable_all_services_except_ppse));
  }
  auto& encodable_ppse = list[2];
  if (!encodable_ppse.IsNull()) {
    decoded.set_ppse(std::get<bool>(encodable_ppse));
  }
  auto& encodable_loyalty = list[3];
  if (!encodable_loyalty.IsNull()) {
    decoded.set_loyalty(std::get<bool>(encodable_loyalty));
  }
  auto& encodable_offer = list[4];
  if (!encodable_offer.IsNull()) {
    decoded.set_offer(std::get<bool>(encodable_offer));
  }
  auto& encodable_gift_card1 = list[5];
  if (!encodable_gift_card1.IsNull()) {
    decoded.set_gift_card1(std::get<bool>(encodable_gift_card1));
  }
  auto& encodable_private_label_card = list[6];
  if (!encodable_private_label_card.IsNull()) {
    decoded.set_private_label_card(std::get<bool>(encodable_private_label_card));
  }
  auto& encodable_cloud_based_wallet = list[7];
  if (!encodable_cloud_based_wallet.IsNull()) {
    decoded.set_cloud_based_wallet(std::get<bool>(encodable_cloud_based_wallet));
  }
  auto& encodable_mobile_marketing_platform = list[8];
  if (!encodable_mobile_marketing_platform.IsNull()) {
    decoded.set_mobile_marketing_platform(std::get<bool>(encodable_mobile_marketing_platform));
  }
  auto& encodable_wallet_customer = list[9];
  if (!encodable_wallet_customer.IsNull()) {
    decoded.set_wallet_customer(std::get<bool>(encodable_wallet_customer));
  }
  return decoded;
}

// ManageGoogleSmartTap

ManageGoogleSmartTap::ManageGoogleSmartTap() {}

ManageGoogleSmartTap::ManageGoogleSmartTap(
  const ManageGoogleSmartTapCapBitmap* google_smart_tap_cap,
  const std::string* collect_id,
  const std::string* store_local_id,
  const std::string* terminal_id,
  const std::string* merchant_name,
  const std::string* merchant_category,
  const ManageGoogleServiceTypeBitmap* service_type,
  const ManageSecurity* security,
  const ManageEndTap* end_tap,
  const ManageOseToPpse* ose_to_ppse)
 : google_smart_tap_cap_(google_smart_tap_cap ? std::optional<ManageGoogleSmartTapCapBitmap>(*google_smart_tap_cap) : std::nullopt),
    collect_id_(collect_id ? std::optional<std::string>(*collect_id) : std::nullopt),
    store_local_id_(store_local_id ? std::optional<std::string>(*store_local_id) : std::nullopt),
    terminal_id_(terminal_id ? std::optional<std::string>(*terminal_id) : std::nullopt),
    merchant_name_(merchant_name ? std::optional<std::string>(*merchant_name) : std::nullopt),
    merchant_category_(merchant_category ? std::optional<std::string>(*merchant_category) : std::nullopt),
    service_type_(service_type ? std::optional<ManageGoogleServiceTypeBitmap>(*service_type) : std::nullopt),
    security_(security ? std::optional<ManageSecurity>(*security) : std::nullopt),
    end_tap_(end_tap ? std::optional<ManageEndTap>(*end_tap) : std::nullopt),
    ose_to_ppse_(ose_to_ppse ? std::optional<ManageOseToPpse>(*ose_to_ppse) : std::nullopt) {}

const ManageGoogleSmartTapCapBitmap* ManageGoogleSmartTap::google_smart_tap_cap() const {
  return google_smart_tap_cap_ ? &(*google_smart_tap_cap_) : nullptr;
}

void ManageGoogleSmartTap::set_google_smart_tap_cap(const ManageGoogleSmartTapCapBitmap* value_arg) {
  google_smart_tap_cap_ = value_arg ? std::optional<ManageGoogleSmartTapCapBitmap>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_google_smart_tap_cap(const ManageGoogleSmartTapCapBitmap& value_arg) {
  google_smart_tap_cap_ = value_arg;
}


const std::string* ManageGoogleSmartTap::collect_id() const {
  return collect_id_ ? &(*collect_id_) : nullptr;
}

void ManageGoogleSmartTap::set_collect_id(const std::string_view* value_arg) {
  collect_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_collect_id(std::string_view value_arg) {
  collect_id_ = value_arg;
}


const std::string* ManageGoogleSmartTap::store_local_id() const {
  return store_local_id_ ? &(*store_local_id_) : nullptr;
}

void ManageGoogleSmartTap::set_store_local_id(const std::string_view* value_arg) {
  store_local_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_store_local_id(std::string_view value_arg) {
  store_local_id_ = value_arg;
}


const std::string* ManageGoogleSmartTap::terminal_id() const {
  return terminal_id_ ? &(*terminal_id_) : nullptr;
}

void ManageGoogleSmartTap::set_terminal_id(const std::string_view* value_arg) {
  terminal_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_terminal_id(std::string_view value_arg) {
  terminal_id_ = value_arg;
}


const std::string* ManageGoogleSmartTap::merchant_name() const {
  return merchant_name_ ? &(*merchant_name_) : nullptr;
}

void ManageGoogleSmartTap::set_merchant_name(const std::string_view* value_arg) {
  merchant_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_merchant_name(std::string_view value_arg) {
  merchant_name_ = value_arg;
}


const std::string* ManageGoogleSmartTap::merchant_category() const {
  return merchant_category_ ? &(*merchant_category_) : nullptr;
}

void ManageGoogleSmartTap::set_merchant_category(const std::string_view* value_arg) {
  merchant_category_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_merchant_category(std::string_view value_arg) {
  merchant_category_ = value_arg;
}


const ManageGoogleServiceTypeBitmap* ManageGoogleSmartTap::service_type() const {
  return service_type_ ? &(*service_type_) : nullptr;
}

void ManageGoogleSmartTap::set_service_type(const ManageGoogleServiceTypeBitmap* value_arg) {
  service_type_ = value_arg ? std::optional<ManageGoogleServiceTypeBitmap>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_service_type(const ManageGoogleServiceTypeBitmap& value_arg) {
  service_type_ = value_arg;
}


const ManageSecurity* ManageGoogleSmartTap::security() const {
  return security_ ? &(*security_) : nullptr;
}

void ManageGoogleSmartTap::set_security(const ManageSecurity* value_arg) {
  security_ = value_arg ? std::optional<ManageSecurity>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_security(const ManageSecurity& value_arg) {
  security_ = value_arg;
}


const ManageEndTap* ManageGoogleSmartTap::end_tap() const {
  return end_tap_ ? &(*end_tap_) : nullptr;
}

void ManageGoogleSmartTap::set_end_tap(const ManageEndTap* value_arg) {
  end_tap_ = value_arg ? std::optional<ManageEndTap>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_end_tap(const ManageEndTap& value_arg) {
  end_tap_ = value_arg;
}


const ManageOseToPpse* ManageGoogleSmartTap::ose_to_ppse() const {
  return ose_to_ppse_ ? &(*ose_to_ppse_) : nullptr;
}

void ManageGoogleSmartTap::set_ose_to_ppse(const ManageOseToPpse* value_arg) {
  ose_to_ppse_ = value_arg ? std::optional<ManageOseToPpse>(*value_arg) : std::nullopt;
}

void ManageGoogleSmartTap::set_ose_to_ppse(const ManageOseToPpse& value_arg) {
  ose_to_ppse_ = value_arg;
}


EncodableList ManageGoogleSmartTap::ToEncodableList() const {
  EncodableList list;
  list.reserve(10);
  list.push_back(google_smart_tap_cap_ ? EncodableValue(google_smart_tap_cap_->ToEncodableList()) : EncodableValue());
  list.push_back(collect_id_ ? EncodableValue(*collect_id_) : EncodableValue());
  list.push_back(store_local_id_ ? EncodableValue(*store_local_id_) : EncodableValue());
  list.push_back(terminal_id_ ? EncodableValue(*terminal_id_) : EncodableValue());
  list.push_back(merchant_name_ ? EncodableValue(*merchant_name_) : EncodableValue());
  list.push_back(merchant_category_ ? EncodableValue(*merchant_category_) : EncodableValue());
  list.push_back(service_type_ ? EncodableValue(service_type_->ToEncodableList()) : EncodableValue());
  list.push_back(security_ ? EncodableValue((int)(*security_)) : EncodableValue());
  list.push_back(end_tap_ ? EncodableValue((int)(*end_tap_)) : EncodableValue());
  list.push_back(ose_to_ppse_ ? EncodableValue((int)(*ose_to_ppse_)) : EncodableValue());
  return list;
}

ManageGoogleSmartTap ManageGoogleSmartTap::FromEncodableList(const EncodableList& list) {
  ManageGoogleSmartTap decoded;
  auto& encodable_google_smart_tap_cap = list[0];
  if (!encodable_google_smart_tap_cap.IsNull()) {
    decoded.set_google_smart_tap_cap(ManageGoogleSmartTapCapBitmap::FromEncodableList(std::get<EncodableList>(encodable_google_smart_tap_cap)));
  }
  auto& encodable_collect_id = list[1];
  if (!encodable_collect_id.IsNull()) {
    decoded.set_collect_id(std::get<std::string>(encodable_collect_id));
  }
  auto& encodable_store_local_id = list[2];
  if (!encodable_store_local_id.IsNull()) {
    decoded.set_store_local_id(std::get<std::string>(encodable_store_local_id));
  }
  auto& encodable_terminal_id = list[3];
  if (!encodable_terminal_id.IsNull()) {
    decoded.set_terminal_id(std::get<std::string>(encodable_terminal_id));
  }
  auto& encodable_merchant_name = list[4];
  if (!encodable_merchant_name.IsNull()) {
    decoded.set_merchant_name(std::get<std::string>(encodable_merchant_name));
  }
  auto& encodable_merchant_category = list[5];
  if (!encodable_merchant_category.IsNull()) {
    decoded.set_merchant_category(std::get<std::string>(encodable_merchant_category));
  }
  auto& encodable_service_type = list[6];
  if (!encodable_service_type.IsNull()) {
    decoded.set_service_type(ManageGoogleServiceTypeBitmap::FromEncodableList(std::get<EncodableList>(encodable_service_type)));
  }
  auto& encodable_security = list[7];
  if (!encodable_security.IsNull()) {
    decoded.set_security((ManageSecurity)(std::get<int32_t>(encodable_security)));
  }
  auto& encodable_end_tap = list[8];
  if (!encodable_end_tap.IsNull()) {
    decoded.set_end_tap((ManageEndTap)(std::get<int32_t>(encodable_end_tap)));
  }
  auto& encodable_ose_to_ppse = list[9];
  if (!encodable_ose_to_ppse.IsNull()) {
    decoded.set_ose_to_ppse((ManageOseToPpse)(std::get<int32_t>(encodable_ose_to_ppse)));
  }
  return decoded;
}

// ManageSetGoogleSmartTapParametersRequest

ManageSetGoogleSmartTapParametersRequest::ManageSetGoogleSmartTapParametersRequest() {}

ManageSetGoogleSmartTapParametersRequest::ManageSetGoogleSmartTapParametersRequest(
  const ManageVasMode* vas_mode,
  const ManageGoogleSmartTap* google_smart_tap_data)
 : vas_mode_(vas_mode ? std::optional<ManageVasMode>(*vas_mode) : std::nullopt),
    google_smart_tap_data_(google_smart_tap_data ? std::optional<ManageGoogleSmartTap>(*google_smart_tap_data) : std::nullopt) {}

const ManageVasMode* ManageSetGoogleSmartTapParametersRequest::vas_mode() const {
  return vas_mode_ ? &(*vas_mode_) : nullptr;
}

void ManageSetGoogleSmartTapParametersRequest::set_vas_mode(const ManageVasMode* value_arg) {
  vas_mode_ = value_arg ? std::optional<ManageVasMode>(*value_arg) : std::nullopt;
}

void ManageSetGoogleSmartTapParametersRequest::set_vas_mode(const ManageVasMode& value_arg) {
  vas_mode_ = value_arg;
}


const ManageGoogleSmartTap* ManageSetGoogleSmartTapParametersRequest::google_smart_tap_data() const {
  return google_smart_tap_data_ ? &(*google_smart_tap_data_) : nullptr;
}

void ManageSetGoogleSmartTapParametersRequest::set_google_smart_tap_data(const ManageGoogleSmartTap* value_arg) {
  google_smart_tap_data_ = value_arg ? std::optional<ManageGoogleSmartTap>(*value_arg) : std::nullopt;
}

void ManageSetGoogleSmartTapParametersRequest::set_google_smart_tap_data(const ManageGoogleSmartTap& value_arg) {
  google_smart_tap_data_ = value_arg;
}


EncodableList ManageSetGoogleSmartTapParametersRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(vas_mode_ ? EncodableValue((int)(*vas_mode_)) : EncodableValue());
  list.push_back(google_smart_tap_data_ ? EncodableValue(google_smart_tap_data_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageSetGoogleSmartTapParametersRequest ManageSetGoogleSmartTapParametersRequest::FromEncodableList(const EncodableList& list) {
  ManageSetGoogleSmartTapParametersRequest decoded;
  auto& encodable_vas_mode = list[0];
  if (!encodable_vas_mode.IsNull()) {
    decoded.set_vas_mode((ManageVasMode)(std::get<int32_t>(encodable_vas_mode)));
  }
  auto& encodable_google_smart_tap_data = list[1];
  if (!encodable_google_smart_tap_data.IsNull()) {
    decoded.set_google_smart_tap_data(ManageGoogleSmartTap::FromEncodableList(std::get<EncodableList>(encodable_google_smart_tap_data)));
  }
  return decoded;
}

// ManageInitRequest

ManageInitRequest::ManageInitRequest() {}

ManageInitRequest::ManageInitRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* ManageInitRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void ManageInitRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList ManageInitRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

ManageInitRequest ManageInitRequest::FromEncodableList(const EncodableList& list) {
  ManageInitRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// ManageVasPushDataRequest

ManageVasPushDataRequest::ManageVasPushDataRequest() {}

ManageVasPushDataRequest::ManageVasPushDataRequest(
  const ManageVasMode* vas_mode,
  const ManageGoogleSmartTapPushService* google_smart_tap_push_service)
 : vas_mode_(vas_mode ? std::optional<ManageVasMode>(*vas_mode) : std::nullopt),
    google_smart_tap_push_service_(google_smart_tap_push_service ? std::optional<ManageGoogleSmartTapPushService>(*google_smart_tap_push_service) : std::nullopt) {}

const ManageVasMode* ManageVasPushDataRequest::vas_mode() const {
  return vas_mode_ ? &(*vas_mode_) : nullptr;
}

void ManageVasPushDataRequest::set_vas_mode(const ManageVasMode* value_arg) {
  vas_mode_ = value_arg ? std::optional<ManageVasMode>(*value_arg) : std::nullopt;
}

void ManageVasPushDataRequest::set_vas_mode(const ManageVasMode& value_arg) {
  vas_mode_ = value_arg;
}


const ManageGoogleSmartTapPushService* ManageVasPushDataRequest::google_smart_tap_push_service() const {
  return google_smart_tap_push_service_ ? &(*google_smart_tap_push_service_) : nullptr;
}

void ManageVasPushDataRequest::set_google_smart_tap_push_service(const ManageGoogleSmartTapPushService* value_arg) {
  google_smart_tap_push_service_ = value_arg ? std::optional<ManageGoogleSmartTapPushService>(*value_arg) : std::nullopt;
}

void ManageVasPushDataRequest::set_google_smart_tap_push_service(const ManageGoogleSmartTapPushService& value_arg) {
  google_smart_tap_push_service_ = value_arg;
}


EncodableList ManageVasPushDataRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(vas_mode_ ? EncodableValue((int)(*vas_mode_)) : EncodableValue());
  list.push_back(google_smart_tap_push_service_ ? EncodableValue(google_smart_tap_push_service_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageVasPushDataRequest ManageVasPushDataRequest::FromEncodableList(const EncodableList& list) {
  ManageVasPushDataRequest decoded;
  auto& encodable_vas_mode = list[0];
  if (!encodable_vas_mode.IsNull()) {
    decoded.set_vas_mode((ManageVasMode)(std::get<int32_t>(encodable_vas_mode)));
  }
  auto& encodable_google_smart_tap_push_service = list[1];
  if (!encodable_google_smart_tap_push_service.IsNull()) {
    decoded.set_google_smart_tap_push_service(ManageGoogleSmartTapPushService::FromEncodableList(std::get<EncodableList>(encodable_google_smart_tap_push_service)));
  }
  return decoded;
}

// ManageDoSignatureRequest

ManageDoSignatureRequest::ManageDoSignatureRequest() {}

ManageDoSignatureRequest::ManageDoSignatureRequest(
  const ManageUploadFlag* upload_flag,
  const std::string* host_reference_number,
  const ManageEdcType* edc_type,
  const std::string* timeout,
  const ManageContinuousScreen* continuous_screen)
 : upload_flag_(upload_flag ? std::optional<ManageUploadFlag>(*upload_flag) : std::nullopt),
    host_reference_number_(host_reference_number ? std::optional<std::string>(*host_reference_number) : std::nullopt),
    edc_type_(edc_type ? std::optional<ManageEdcType>(*edc_type) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<ManageContinuousScreen>(*continuous_screen) : std::nullopt) {}

const ManageUploadFlag* ManageDoSignatureRequest::upload_flag() const {
  return upload_flag_ ? &(*upload_flag_) : nullptr;
}

void ManageDoSignatureRequest::set_upload_flag(const ManageUploadFlag* value_arg) {
  upload_flag_ = value_arg ? std::optional<ManageUploadFlag>(*value_arg) : std::nullopt;
}

void ManageDoSignatureRequest::set_upload_flag(const ManageUploadFlag& value_arg) {
  upload_flag_ = value_arg;
}


const std::string* ManageDoSignatureRequest::host_reference_number() const {
  return host_reference_number_ ? &(*host_reference_number_) : nullptr;
}

void ManageDoSignatureRequest::set_host_reference_number(const std::string_view* value_arg) {
  host_reference_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDoSignatureRequest::set_host_reference_number(std::string_view value_arg) {
  host_reference_number_ = value_arg;
}


const ManageEdcType* ManageDoSignatureRequest::edc_type() const {
  return edc_type_ ? &(*edc_type_) : nullptr;
}

void ManageDoSignatureRequest::set_edc_type(const ManageEdcType* value_arg) {
  edc_type_ = value_arg ? std::optional<ManageEdcType>(*value_arg) : std::nullopt;
}

void ManageDoSignatureRequest::set_edc_type(const ManageEdcType& value_arg) {
  edc_type_ = value_arg;
}


const std::string* ManageDoSignatureRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void ManageDoSignatureRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDoSignatureRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const ManageContinuousScreen* ManageDoSignatureRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void ManageDoSignatureRequest::set_continuous_screen(const ManageContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<ManageContinuousScreen>(*value_arg) : std::nullopt;
}

void ManageDoSignatureRequest::set_continuous_screen(const ManageContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


EncodableList ManageDoSignatureRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(upload_flag_ ? EncodableValue((int)(*upload_flag_)) : EncodableValue());
  list.push_back(host_reference_number_ ? EncodableValue(*host_reference_number_) : EncodableValue());
  list.push_back(edc_type_ ? EncodableValue((int)(*edc_type_)) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  return list;
}

ManageDoSignatureRequest ManageDoSignatureRequest::FromEncodableList(const EncodableList& list) {
  ManageDoSignatureRequest decoded;
  auto& encodable_upload_flag = list[0];
  if (!encodable_upload_flag.IsNull()) {
    decoded.set_upload_flag((ManageUploadFlag)(std::get<int32_t>(encodable_upload_flag)));
  }
  auto& encodable_host_reference_number = list[1];
  if (!encodable_host_reference_number.IsNull()) {
    decoded.set_host_reference_number(std::get<std::string>(encodable_host_reference_number));
  }
  auto& encodable_edc_type = list[2];
  if (!encodable_edc_type.IsNull()) {
    decoded.set_edc_type((ManageEdcType)(std::get<int32_t>(encodable_edc_type)));
  }
  auto& encodable_timeout = list[3];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_continuous_screen = list[4];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((ManageContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  return decoded;
}

// ManageDeleteImageRequest

ManageDeleteImageRequest::ManageDeleteImageRequest() {}

ManageDeleteImageRequest::ManageDeleteImageRequest(const std::string* image_name)
 : image_name_(image_name ? std::optional<std::string>(*image_name) : std::nullopt) {}

const std::string* ManageDeleteImageRequest::image_name() const {
  return image_name_ ? &(*image_name_) : nullptr;
}

void ManageDeleteImageRequest::set_image_name(const std::string_view* value_arg) {
  image_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDeleteImageRequest::set_image_name(std::string_view value_arg) {
  image_name_ = value_arg;
}


EncodableList ManageDeleteImageRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(image_name_ ? EncodableValue(*image_name_) : EncodableValue());
  return list;
}

ManageDeleteImageRequest ManageDeleteImageRequest::FromEncodableList(const EncodableList& list) {
  ManageDeleteImageRequest decoded;
  auto& encodable_image_name = list[0];
  if (!encodable_image_name.IsNull()) {
    decoded.set_image_name(std::get<std::string>(encodable_image_name));
  }
  return decoded;
}

// ManageSetGoogleSmartTapParametersResponse

ManageSetGoogleSmartTapParametersResponse::ManageSetGoogleSmartTapParametersResponse() {}

ManageSetGoogleSmartTapParametersResponse::ManageSetGoogleSmartTapParametersResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageSetGoogleSmartTapParametersResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageSetGoogleSmartTapParametersResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetGoogleSmartTapParametersResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageSetGoogleSmartTapParametersResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageSetGoogleSmartTapParametersResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetGoogleSmartTapParametersResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageSetGoogleSmartTapParametersResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageSetGoogleSmartTapParametersResponse ManageSetGoogleSmartTapParametersResponse::FromEncodableList(const EncodableList& list) {
  ManageSetGoogleSmartTapParametersResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageGetVariableResponse

ManageGetVariableResponse::ManageGetVariableResponse() {}

ManageGetVariableResponse::ManageGetVariableResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* variable_value1,
  const std::string* variable_value2,
  const std::string* variable_value3,
  const std::string* variable_value4,
  const std::string* variable_value5,
  const ManageMultiMerchant* multi_merchant)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    variable_value1_(variable_value1 ? std::optional<std::string>(*variable_value1) : std::nullopt),
    variable_value2_(variable_value2 ? std::optional<std::string>(*variable_value2) : std::nullopt),
    variable_value3_(variable_value3 ? std::optional<std::string>(*variable_value3) : std::nullopt),
    variable_value4_(variable_value4 ? std::optional<std::string>(*variable_value4) : std::nullopt),
    variable_value5_(variable_value5 ? std::optional<std::string>(*variable_value5) : std::nullopt),
    multi_merchant_(multi_merchant ? std::optional<ManageMultiMerchant>(*multi_merchant) : std::nullopt) {}

const std::string* ManageGetVariableResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageGetVariableResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageGetVariableResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageGetVariableResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* ManageGetVariableResponse::variable_value1() const {
  return variable_value1_ ? &(*variable_value1_) : nullptr;
}

void ManageGetVariableResponse::set_variable_value1(const std::string_view* value_arg) {
  variable_value1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_variable_value1(std::string_view value_arg) {
  variable_value1_ = value_arg;
}


const std::string* ManageGetVariableResponse::variable_value2() const {
  return variable_value2_ ? &(*variable_value2_) : nullptr;
}

void ManageGetVariableResponse::set_variable_value2(const std::string_view* value_arg) {
  variable_value2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_variable_value2(std::string_view value_arg) {
  variable_value2_ = value_arg;
}


const std::string* ManageGetVariableResponse::variable_value3() const {
  return variable_value3_ ? &(*variable_value3_) : nullptr;
}

void ManageGetVariableResponse::set_variable_value3(const std::string_view* value_arg) {
  variable_value3_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_variable_value3(std::string_view value_arg) {
  variable_value3_ = value_arg;
}


const std::string* ManageGetVariableResponse::variable_value4() const {
  return variable_value4_ ? &(*variable_value4_) : nullptr;
}

void ManageGetVariableResponse::set_variable_value4(const std::string_view* value_arg) {
  variable_value4_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_variable_value4(std::string_view value_arg) {
  variable_value4_ = value_arg;
}


const std::string* ManageGetVariableResponse::variable_value5() const {
  return variable_value5_ ? &(*variable_value5_) : nullptr;
}

void ManageGetVariableResponse::set_variable_value5(const std::string_view* value_arg) {
  variable_value5_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_variable_value5(std::string_view value_arg) {
  variable_value5_ = value_arg;
}


const ManageMultiMerchant* ManageGetVariableResponse::multi_merchant() const {
  return multi_merchant_ ? &(*multi_merchant_) : nullptr;
}

void ManageGetVariableResponse::set_multi_merchant(const ManageMultiMerchant* value_arg) {
  multi_merchant_ = value_arg ? std::optional<ManageMultiMerchant>(*value_arg) : std::nullopt;
}

void ManageGetVariableResponse::set_multi_merchant(const ManageMultiMerchant& value_arg) {
  multi_merchant_ = value_arg;
}


EncodableList ManageGetVariableResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(variable_value1_ ? EncodableValue(*variable_value1_) : EncodableValue());
  list.push_back(variable_value2_ ? EncodableValue(*variable_value2_) : EncodableValue());
  list.push_back(variable_value3_ ? EncodableValue(*variable_value3_) : EncodableValue());
  list.push_back(variable_value4_ ? EncodableValue(*variable_value4_) : EncodableValue());
  list.push_back(variable_value5_ ? EncodableValue(*variable_value5_) : EncodableValue());
  list.push_back(multi_merchant_ ? EncodableValue(multi_merchant_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageGetVariableResponse ManageGetVariableResponse::FromEncodableList(const EncodableList& list) {
  ManageGetVariableResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_variable_value1 = list[2];
  if (!encodable_variable_value1.IsNull()) {
    decoded.set_variable_value1(std::get<std::string>(encodable_variable_value1));
  }
  auto& encodable_variable_value2 = list[3];
  if (!encodable_variable_value2.IsNull()) {
    decoded.set_variable_value2(std::get<std::string>(encodable_variable_value2));
  }
  auto& encodable_variable_value3 = list[4];
  if (!encodable_variable_value3.IsNull()) {
    decoded.set_variable_value3(std::get<std::string>(encodable_variable_value3));
  }
  auto& encodable_variable_value4 = list[5];
  if (!encodable_variable_value4.IsNull()) {
    decoded.set_variable_value4(std::get<std::string>(encodable_variable_value4));
  }
  auto& encodable_variable_value5 = list[6];
  if (!encodable_variable_value5.IsNull()) {
    decoded.set_variable_value5(std::get<std::string>(encodable_variable_value5));
  }
  auto& encodable_multi_merchant = list[7];
  if (!encodable_multi_merchant.IsNull()) {
    decoded.set_multi_merchant(ManageMultiMerchant::FromEncodableList(std::get<EncodableList>(encodable_multi_merchant)));
  }
  return decoded;
}

// ManageRebootResponse

ManageRebootResponse::ManageRebootResponse() {}

ManageRebootResponse::ManageRebootResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageRebootResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageRebootResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageRebootResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageRebootResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageRebootResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageRebootResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageRebootResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageRebootResponse ManageRebootResponse::FromEncodableList(const EncodableList& list) {
  ManageRebootResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageDeleteImageResponse

ManageDeleteImageResponse::ManageDeleteImageResponse() {}

ManageDeleteImageResponse::ManageDeleteImageResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageDeleteImageResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageDeleteImageResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDeleteImageResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageDeleteImageResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageDeleteImageResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDeleteImageResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageDeleteImageResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageDeleteImageResponse ManageDeleteImageResponse::FromEncodableList(const EncodableList& list) {
  ManageDeleteImageResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageResetScreenResponse

ManageResetScreenResponse::ManageResetScreenResponse() {}

ManageResetScreenResponse::ManageResetScreenResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageResetScreenResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageResetScreenResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageResetScreenResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageResetScreenResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageResetScreenResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageResetScreenResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageResetScreenResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageResetScreenResponse ManageResetScreenResponse::FromEncodableList(const EncodableList& list) {
  ManageResetScreenResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageVasPushDataResponse

ManageVasPushDataResponse::ManageVasPushDataResponse() {}

ManageVasPushDataResponse::ManageVasPushDataResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageVasPushDataResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageVasPushDataResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageVasPushDataResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageVasPushDataResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageVasPushDataResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageVasPushDataResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageVasPushDataResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageVasPushDataResponse ManageVasPushDataResponse::FromEncodableList(const EncodableList& list) {
  ManageVasPushDataResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageDoSignatureResponse

ManageDoSignatureResponse::ManageDoSignatureResponse() {}

ManageDoSignatureResponse::ManageDoSignatureResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageDoSignatureResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageDoSignatureResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDoSignatureResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageDoSignatureResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageDoSignatureResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageDoSignatureResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageDoSignatureResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageDoSignatureResponse ManageDoSignatureResponse::FromEncodableList(const EncodableList& list) {
  ManageDoSignatureResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageClearCardBufferResponse

ManageClearCardBufferResponse::ManageClearCardBufferResponse() {}

ManageClearCardBufferResponse::ManageClearCardBufferResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageClearCardBufferResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageClearCardBufferResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageClearCardBufferResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageClearCardBufferResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageClearCardBufferResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageClearCardBufferResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageClearCardBufferResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageClearCardBufferResponse ManageClearCardBufferResponse::FromEncodableList(const EncodableList& list) {
  ManageClearCardBufferResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageCheckFileResponse

ManageCheckFileResponse::ManageCheckFileResponse() {}

ManageCheckFileResponse::ManageCheckFileResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* check_sum)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    check_sum_(check_sum ? std::optional<std::string>(*check_sum) : std::nullopt) {}

const std::string* ManageCheckFileResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageCheckFileResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageCheckFileResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageCheckFileResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageCheckFileResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageCheckFileResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* ManageCheckFileResponse::check_sum() const {
  return check_sum_ ? &(*check_sum_) : nullptr;
}

void ManageCheckFileResponse::set_check_sum(const std::string_view* value_arg) {
  check_sum_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageCheckFileResponse::set_check_sum(std::string_view value_arg) {
  check_sum_ = value_arg;
}


EncodableList ManageCheckFileResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(check_sum_ ? EncodableValue(*check_sum_) : EncodableValue());
  return list;
}

ManageCheckFileResponse ManageCheckFileResponse::FromEncodableList(const EncodableList& list) {
  ManageCheckFileResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_check_sum = list[2];
  if (!encodable_check_sum.IsNull()) {
    decoded.set_check_sum(std::get<std::string>(encodable_check_sum));
  }
  return decoded;
}

// ManageHardwareConfigurationBitmap

ManageHardwareConfigurationBitmap::ManageHardwareConfigurationBitmap() {}

ManageHardwareConfigurationBitmap::ManageHardwareConfigurationBitmap(
  const bool* magstripe,
  const bool* emv_chip,
  const bool* emv_contactless,
  const bool* camera_front,
  const bool* laser_scanner,
  const bool* camera_rear,
  const bool* printer,
  const bool* touchscreen)
 : magstripe_(magstripe ? std::optional<bool>(*magstripe) : std::nullopt),
    emv_chip_(emv_chip ? std::optional<bool>(*emv_chip) : std::nullopt),
    emv_contactless_(emv_contactless ? std::optional<bool>(*emv_contactless) : std::nullopt),
    camera_front_(camera_front ? std::optional<bool>(*camera_front) : std::nullopt),
    laser_scanner_(laser_scanner ? std::optional<bool>(*laser_scanner) : std::nullopt),
    camera_rear_(camera_rear ? std::optional<bool>(*camera_rear) : std::nullopt),
    printer_(printer ? std::optional<bool>(*printer) : std::nullopt),
    touchscreen_(touchscreen ? std::optional<bool>(*touchscreen) : std::nullopt) {}

const bool* ManageHardwareConfigurationBitmap::magstripe() const {
  return magstripe_ ? &(*magstripe_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_magstripe(const bool* value_arg) {
  magstripe_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_magstripe(bool value_arg) {
  magstripe_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::emv_chip() const {
  return emv_chip_ ? &(*emv_chip_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_emv_chip(const bool* value_arg) {
  emv_chip_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_emv_chip(bool value_arg) {
  emv_chip_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::emv_contactless() const {
  return emv_contactless_ ? &(*emv_contactless_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_emv_contactless(const bool* value_arg) {
  emv_contactless_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_emv_contactless(bool value_arg) {
  emv_contactless_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::camera_front() const {
  return camera_front_ ? &(*camera_front_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_camera_front(const bool* value_arg) {
  camera_front_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_camera_front(bool value_arg) {
  camera_front_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::laser_scanner() const {
  return laser_scanner_ ? &(*laser_scanner_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_laser_scanner(const bool* value_arg) {
  laser_scanner_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_laser_scanner(bool value_arg) {
  laser_scanner_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::camera_rear() const {
  return camera_rear_ ? &(*camera_rear_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_camera_rear(const bool* value_arg) {
  camera_rear_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_camera_rear(bool value_arg) {
  camera_rear_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::printer() const {
  return printer_ ? &(*printer_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_printer(const bool* value_arg) {
  printer_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_printer(bool value_arg) {
  printer_ = value_arg;
}


const bool* ManageHardwareConfigurationBitmap::touchscreen() const {
  return touchscreen_ ? &(*touchscreen_) : nullptr;
}

void ManageHardwareConfigurationBitmap::set_touchscreen(const bool* value_arg) {
  touchscreen_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void ManageHardwareConfigurationBitmap::set_touchscreen(bool value_arg) {
  touchscreen_ = value_arg;
}


EncodableList ManageHardwareConfigurationBitmap::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(magstripe_ ? EncodableValue(*magstripe_) : EncodableValue());
  list.push_back(emv_chip_ ? EncodableValue(*emv_chip_) : EncodableValue());
  list.push_back(emv_contactless_ ? EncodableValue(*emv_contactless_) : EncodableValue());
  list.push_back(camera_front_ ? EncodableValue(*camera_front_) : EncodableValue());
  list.push_back(laser_scanner_ ? EncodableValue(*laser_scanner_) : EncodableValue());
  list.push_back(camera_rear_ ? EncodableValue(*camera_rear_) : EncodableValue());
  list.push_back(printer_ ? EncodableValue(*printer_) : EncodableValue());
  list.push_back(touchscreen_ ? EncodableValue(*touchscreen_) : EncodableValue());
  return list;
}

ManageHardwareConfigurationBitmap ManageHardwareConfigurationBitmap::FromEncodableList(const EncodableList& list) {
  ManageHardwareConfigurationBitmap decoded;
  auto& encodable_magstripe = list[0];
  if (!encodable_magstripe.IsNull()) {
    decoded.set_magstripe(std::get<bool>(encodable_magstripe));
  }
  auto& encodable_emv_chip = list[1];
  if (!encodable_emv_chip.IsNull()) {
    decoded.set_emv_chip(std::get<bool>(encodable_emv_chip));
  }
  auto& encodable_emv_contactless = list[2];
  if (!encodable_emv_contactless.IsNull()) {
    decoded.set_emv_contactless(std::get<bool>(encodable_emv_contactless));
  }
  auto& encodable_camera_front = list[3];
  if (!encodable_camera_front.IsNull()) {
    decoded.set_camera_front(std::get<bool>(encodable_camera_front));
  }
  auto& encodable_laser_scanner = list[4];
  if (!encodable_laser_scanner.IsNull()) {
    decoded.set_laser_scanner(std::get<bool>(encodable_laser_scanner));
  }
  auto& encodable_camera_rear = list[5];
  if (!encodable_camera_rear.IsNull()) {
    decoded.set_camera_rear(std::get<bool>(encodable_camera_rear));
  }
  auto& encodable_printer = list[6];
  if (!encodable_printer.IsNull()) {
    decoded.set_printer(std::get<bool>(encodable_printer));
  }
  auto& encodable_touchscreen = list[7];
  if (!encodable_touchscreen.IsNull()) {
    decoded.set_touchscreen(std::get<bool>(encodable_touchscreen));
  }
  return decoded;
}

// ManageInitResponse

ManageInitResponse::ManageInitResponse() {}

ManageInitResponse::ManageInitResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* sn,
  const std::string* model_name,
  const std::string* os_version,
  const std::string* mac_address,
  const std::string* lines_per_screen,
  const std::string* chars_per_line,
  const std::string* app_name,
  const std::string* app_version,
  const std::string* wifi_mac,
  const ManageTouchscreenStatus* touchscreen,
  const ManageHardwareConfigurationBitmap* hardware_configuration_bitmap,
  const ManageAppActivated* app_activated,
  const std::string* license_expiry,
  const ManageProtocolFlag* protocol_flag)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    sn_(sn ? std::optional<std::string>(*sn) : std::nullopt),
    model_name_(model_name ? std::optional<std::string>(*model_name) : std::nullopt),
    os_version_(os_version ? std::optional<std::string>(*os_version) : std::nullopt),
    mac_address_(mac_address ? std::optional<std::string>(*mac_address) : std::nullopt),
    lines_per_screen_(lines_per_screen ? std::optional<std::string>(*lines_per_screen) : std::nullopt),
    chars_per_line_(chars_per_line ? std::optional<std::string>(*chars_per_line) : std::nullopt),
    app_name_(app_name ? std::optional<std::string>(*app_name) : std::nullopt),
    app_version_(app_version ? std::optional<std::string>(*app_version) : std::nullopt),
    wifi_mac_(wifi_mac ? std::optional<std::string>(*wifi_mac) : std::nullopt),
    touchscreen_(touchscreen ? std::optional<ManageTouchscreenStatus>(*touchscreen) : std::nullopt),
    hardware_configuration_bitmap_(hardware_configuration_bitmap ? std::optional<ManageHardwareConfigurationBitmap>(*hardware_configuration_bitmap) : std::nullopt),
    app_activated_(app_activated ? std::optional<ManageAppActivated>(*app_activated) : std::nullopt),
    license_expiry_(license_expiry ? std::optional<std::string>(*license_expiry) : std::nullopt),
    protocol_flag_(protocol_flag ? std::optional<ManageProtocolFlag>(*protocol_flag) : std::nullopt) {}

const std::string* ManageInitResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageInitResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageInitResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageInitResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* ManageInitResponse::sn() const {
  return sn_ ? &(*sn_) : nullptr;
}

void ManageInitResponse::set_sn(const std::string_view* value_arg) {
  sn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_sn(std::string_view value_arg) {
  sn_ = value_arg;
}


const std::string* ManageInitResponse::model_name() const {
  return model_name_ ? &(*model_name_) : nullptr;
}

void ManageInitResponse::set_model_name(const std::string_view* value_arg) {
  model_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_model_name(std::string_view value_arg) {
  model_name_ = value_arg;
}


const std::string* ManageInitResponse::os_version() const {
  return os_version_ ? &(*os_version_) : nullptr;
}

void ManageInitResponse::set_os_version(const std::string_view* value_arg) {
  os_version_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_os_version(std::string_view value_arg) {
  os_version_ = value_arg;
}


const std::string* ManageInitResponse::mac_address() const {
  return mac_address_ ? &(*mac_address_) : nullptr;
}

void ManageInitResponse::set_mac_address(const std::string_view* value_arg) {
  mac_address_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_mac_address(std::string_view value_arg) {
  mac_address_ = value_arg;
}


const std::string* ManageInitResponse::lines_per_screen() const {
  return lines_per_screen_ ? &(*lines_per_screen_) : nullptr;
}

void ManageInitResponse::set_lines_per_screen(const std::string_view* value_arg) {
  lines_per_screen_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_lines_per_screen(std::string_view value_arg) {
  lines_per_screen_ = value_arg;
}


const std::string* ManageInitResponse::chars_per_line() const {
  return chars_per_line_ ? &(*chars_per_line_) : nullptr;
}

void ManageInitResponse::set_chars_per_line(const std::string_view* value_arg) {
  chars_per_line_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_chars_per_line(std::string_view value_arg) {
  chars_per_line_ = value_arg;
}


const std::string* ManageInitResponse::app_name() const {
  return app_name_ ? &(*app_name_) : nullptr;
}

void ManageInitResponse::set_app_name(const std::string_view* value_arg) {
  app_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_app_name(std::string_view value_arg) {
  app_name_ = value_arg;
}


const std::string* ManageInitResponse::app_version() const {
  return app_version_ ? &(*app_version_) : nullptr;
}

void ManageInitResponse::set_app_version(const std::string_view* value_arg) {
  app_version_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_app_version(std::string_view value_arg) {
  app_version_ = value_arg;
}


const std::string* ManageInitResponse::wifi_mac() const {
  return wifi_mac_ ? &(*wifi_mac_) : nullptr;
}

void ManageInitResponse::set_wifi_mac(const std::string_view* value_arg) {
  wifi_mac_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_wifi_mac(std::string_view value_arg) {
  wifi_mac_ = value_arg;
}


const ManageTouchscreenStatus* ManageInitResponse::touchscreen() const {
  return touchscreen_ ? &(*touchscreen_) : nullptr;
}

void ManageInitResponse::set_touchscreen(const ManageTouchscreenStatus* value_arg) {
  touchscreen_ = value_arg ? std::optional<ManageTouchscreenStatus>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_touchscreen(const ManageTouchscreenStatus& value_arg) {
  touchscreen_ = value_arg;
}


const ManageHardwareConfigurationBitmap* ManageInitResponse::hardware_configuration_bitmap() const {
  return hardware_configuration_bitmap_ ? &(*hardware_configuration_bitmap_) : nullptr;
}

void ManageInitResponse::set_hardware_configuration_bitmap(const ManageHardwareConfigurationBitmap* value_arg) {
  hardware_configuration_bitmap_ = value_arg ? std::optional<ManageHardwareConfigurationBitmap>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_hardware_configuration_bitmap(const ManageHardwareConfigurationBitmap& value_arg) {
  hardware_configuration_bitmap_ = value_arg;
}


const ManageAppActivated* ManageInitResponse::app_activated() const {
  return app_activated_ ? &(*app_activated_) : nullptr;
}

void ManageInitResponse::set_app_activated(const ManageAppActivated* value_arg) {
  app_activated_ = value_arg ? std::optional<ManageAppActivated>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_app_activated(const ManageAppActivated& value_arg) {
  app_activated_ = value_arg;
}


const std::string* ManageInitResponse::license_expiry() const {
  return license_expiry_ ? &(*license_expiry_) : nullptr;
}

void ManageInitResponse::set_license_expiry(const std::string_view* value_arg) {
  license_expiry_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_license_expiry(std::string_view value_arg) {
  license_expiry_ = value_arg;
}


const ManageProtocolFlag* ManageInitResponse::protocol_flag() const {
  return protocol_flag_ ? &(*protocol_flag_) : nullptr;
}

void ManageInitResponse::set_protocol_flag(const ManageProtocolFlag* value_arg) {
  protocol_flag_ = value_arg ? std::optional<ManageProtocolFlag>(*value_arg) : std::nullopt;
}

void ManageInitResponse::set_protocol_flag(const ManageProtocolFlag& value_arg) {
  protocol_flag_ = value_arg;
}


EncodableList ManageInitResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(16);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(sn_ ? EncodableValue(*sn_) : EncodableValue());
  list.push_back(model_name_ ? EncodableValue(*model_name_) : EncodableValue());
  list.push_back(os_version_ ? EncodableValue(*os_version_) : EncodableValue());
  list.push_back(mac_address_ ? EncodableValue(*mac_address_) : EncodableValue());
  list.push_back(lines_per_screen_ ? EncodableValue(*lines_per_screen_) : EncodableValue());
  list.push_back(chars_per_line_ ? EncodableValue(*chars_per_line_) : EncodableValue());
  list.push_back(app_name_ ? EncodableValue(*app_name_) : EncodableValue());
  list.push_back(app_version_ ? EncodableValue(*app_version_) : EncodableValue());
  list.push_back(wifi_mac_ ? EncodableValue(*wifi_mac_) : EncodableValue());
  list.push_back(touchscreen_ ? EncodableValue((int)(*touchscreen_)) : EncodableValue());
  list.push_back(hardware_configuration_bitmap_ ? EncodableValue(hardware_configuration_bitmap_->ToEncodableList()) : EncodableValue());
  list.push_back(app_activated_ ? EncodableValue((int)(*app_activated_)) : EncodableValue());
  list.push_back(license_expiry_ ? EncodableValue(*license_expiry_) : EncodableValue());
  list.push_back(protocol_flag_ ? EncodableValue((int)(*protocol_flag_)) : EncodableValue());
  return list;
}

ManageInitResponse ManageInitResponse::FromEncodableList(const EncodableList& list) {
  ManageInitResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_sn = list[2];
  if (!encodable_sn.IsNull()) {
    decoded.set_sn(std::get<std::string>(encodable_sn));
  }
  auto& encodable_model_name = list[3];
  if (!encodable_model_name.IsNull()) {
    decoded.set_model_name(std::get<std::string>(encodable_model_name));
  }
  auto& encodable_os_version = list[4];
  if (!encodable_os_version.IsNull()) {
    decoded.set_os_version(std::get<std::string>(encodable_os_version));
  }
  auto& encodable_mac_address = list[5];
  if (!encodable_mac_address.IsNull()) {
    decoded.set_mac_address(std::get<std::string>(encodable_mac_address));
  }
  auto& encodable_lines_per_screen = list[6];
  if (!encodable_lines_per_screen.IsNull()) {
    decoded.set_lines_per_screen(std::get<std::string>(encodable_lines_per_screen));
  }
  auto& encodable_chars_per_line = list[7];
  if (!encodable_chars_per_line.IsNull()) {
    decoded.set_chars_per_line(std::get<std::string>(encodable_chars_per_line));
  }
  auto& encodable_app_name = list[8];
  if (!encodable_app_name.IsNull()) {
    decoded.set_app_name(std::get<std::string>(encodable_app_name));
  }
  auto& encodable_app_version = list[9];
  if (!encodable_app_version.IsNull()) {
    decoded.set_app_version(std::get<std::string>(encodable_app_version));
  }
  auto& encodable_wifi_mac = list[10];
  if (!encodable_wifi_mac.IsNull()) {
    decoded.set_wifi_mac(std::get<std::string>(encodable_wifi_mac));
  }
  auto& encodable_touchscreen = list[11];
  if (!encodable_touchscreen.IsNull()) {
    decoded.set_touchscreen((ManageTouchscreenStatus)(std::get<int32_t>(encodable_touchscreen)));
  }
  auto& encodable_hardware_configuration_bitmap = list[12];
  if (!encodable_hardware_configuration_bitmap.IsNull()) {
    decoded.set_hardware_configuration_bitmap(ManageHardwareConfigurationBitmap::FromEncodableList(std::get<EncodableList>(encodable_hardware_configuration_bitmap)));
  }
  auto& encodable_app_activated = list[13];
  if (!encodable_app_activated.IsNull()) {
    decoded.set_app_activated((ManageAppActivated)(std::get<int32_t>(encodable_app_activated)));
  }
  auto& encodable_license_expiry = list[14];
  if (!encodable_license_expiry.IsNull()) {
    decoded.set_license_expiry(std::get<std::string>(encodable_license_expiry));
  }
  auto& encodable_protocol_flag = list[15];
  if (!encodable_protocol_flag.IsNull()) {
    decoded.set_protocol_flag((ManageProtocolFlag)(std::get<int32_t>(encodable_protocol_flag)));
  }
  return decoded;
}

// ManageGetSignatureResponse

ManageGetSignatureResponse::ManageGetSignatureResponse() {}

ManageGetSignatureResponse::ManageGetSignatureResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* signature_data)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    signature_data_(signature_data ? std::optional<std::string>(*signature_data) : std::nullopt) {}

const std::string* ManageGetSignatureResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageGetSignatureResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetSignatureResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageGetSignatureResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageGetSignatureResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetSignatureResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* ManageGetSignatureResponse::signature_data() const {
  return signature_data_ ? &(*signature_data_) : nullptr;
}

void ManageGetSignatureResponse::set_signature_data(const std::string_view* value_arg) {
  signature_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageGetSignatureResponse::set_signature_data(std::string_view value_arg) {
  signature_data_ = value_arg;
}


EncodableList ManageGetSignatureResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(signature_data_ ? EncodableValue(*signature_data_) : EncodableValue());
  return list;
}

ManageGetSignatureResponse ManageGetSignatureResponse::FromEncodableList(const EncodableList& list) {
  ManageGetSignatureResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_signature_data = list[2];
  if (!encodable_signature_data.IsNull()) {
    decoded.set_signature_data(std::get<std::string>(encodable_signature_data));
  }
  return decoded;
}

// ManageUpdateResourceFileResponse

ManageUpdateResourceFileResponse::ManageUpdateResourceFileResponse() {}

ManageUpdateResourceFileResponse::ManageUpdateResourceFileResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageUpdateResourceFileResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageUpdateResourceFileResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageUpdateResourceFileResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageUpdateResourceFileResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageUpdateResourceFileResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageUpdateResourceFileResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageUpdateResourceFileResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageUpdateResourceFileResponse ManageUpdateResourceFileResponse::FromEncodableList(const EncodableList& list) {
  ManageUpdateResourceFileResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageSetApplePayVasParametersResponse

ManageSetApplePayVasParametersResponse::ManageSetApplePayVasParametersResponse() {}

ManageSetApplePayVasParametersResponse::ManageSetApplePayVasParametersResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* ManageSetApplePayVasParametersResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageSetApplePayVasParametersResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetApplePayVasParametersResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageSetApplePayVasParametersResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageSetApplePayVasParametersResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetApplePayVasParametersResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList ManageSetApplePayVasParametersResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

ManageSetApplePayVasParametersResponse ManageSetApplePayVasParametersResponse::FromEncodableList(const EncodableList& list) {
  ManageSetApplePayVasParametersResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// ManageSetVariableResponse

ManageSetVariableResponse::ManageSetVariableResponse() {}

ManageSetVariableResponse::ManageSetVariableResponse(
  const std::string* response_code,
  const std::string* response_message,
  const ManageMultiMerchant* multi_merchant)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    multi_merchant_(multi_merchant ? std::optional<ManageMultiMerchant>(*multi_merchant) : std::nullopt) {}

const std::string* ManageSetVariableResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void ManageSetVariableResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* ManageSetVariableResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void ManageSetVariableResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ManageSetVariableResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const ManageMultiMerchant* ManageSetVariableResponse::multi_merchant() const {
  return multi_merchant_ ? &(*multi_merchant_) : nullptr;
}

void ManageSetVariableResponse::set_multi_merchant(const ManageMultiMerchant* value_arg) {
  multi_merchant_ = value_arg ? std::optional<ManageMultiMerchant>(*value_arg) : std::nullopt;
}

void ManageSetVariableResponse::set_multi_merchant(const ManageMultiMerchant& value_arg) {
  multi_merchant_ = value_arg;
}


EncodableList ManageSetVariableResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(multi_merchant_ ? EncodableValue(multi_merchant_->ToEncodableList()) : EncodableValue());
  return list;
}

ManageSetVariableResponse ManageSetVariableResponse::FromEncodableList(const EncodableList& list) {
  ManageSetVariableResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_multi_merchant = list[2];
  if (!encodable_multi_merchant.IsNull()) {
    decoded.set_multi_merchant(ManageMultiMerchant::FromEncodableList(std::get<EncodableList>(encodable_multi_merchant)));
  }
  return decoded;
}


POSLinkManageApiCodecSerializer::POSLinkManageApiCodecSerializer() {}

EncodableValue POSLinkManageApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(ManageApplePayVas::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(ManageCheckFileRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(ManageCheckFileResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(ManageClearCardBufferRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(ManageClearCardBufferResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(ManageDeleteImageRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(ManageDeleteImageResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(ManageDoSignatureRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 136:
      return CustomEncodableValue(ManageDoSignatureResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 137:
      return CustomEncodableValue(ManageGetSignatureRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 138:
      return CustomEncodableValue(ManageGetSignatureResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 139:
      return CustomEncodableValue(ManageGetVariableRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 140:
      return CustomEncodableValue(ManageGetVariableResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 141:
      return CustomEncodableValue(ManageGoogleServiceTypeBitmap::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 142:
      return CustomEncodableValue(ManageGoogleSmartTap::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 143:
      return CustomEncodableValue(ManageGoogleSmartTapCapBitmap::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 144:
      return CustomEncodableValue(ManageGoogleSmartTapPushService::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 145:
      return CustomEncodableValue(ManageHardwareConfigurationBitmap::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 146:
      return CustomEncodableValue(ManageInitRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 147:
      return CustomEncodableValue(ManageInitResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 148:
      return CustomEncodableValue(ManageMultiMerchant::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 149:
      return CustomEncodableValue(ManageNewService::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 150:
      return CustomEncodableValue(ManageRebootRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 151:
      return CustomEncodableValue(ManageRebootResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 152:
      return CustomEncodableValue(ManageResetScreenRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 153:
      return CustomEncodableValue(ManageResetScreenResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 154:
      return CustomEncodableValue(ManageServiceUpdate::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 155:
      return CustomEncodableValue(ManageServiceUsage::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 156:
      return CustomEncodableValue(ManageSetApplePayVasParametersRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 157:
      return CustomEncodableValue(ManageSetApplePayVasParametersResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 158:
      return CustomEncodableValue(ManageSetGoogleSmartTapParametersRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 159:
      return CustomEncodableValue(ManageSetGoogleSmartTapParametersResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 160:
      return CustomEncodableValue(ManageSetVariableRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 161:
      return CustomEncodableValue(ManageSetVariableResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 162:
      return CustomEncodableValue(ManageUpdateResourceFileRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 163:
      return CustomEncodableValue(ManageUpdateResourceFileResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 164:
      return CustomEncodableValue(ManageVasPushDataRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 165:
      return CustomEncodableValue(ManageVasPushDataResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkManageApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(ManageApplePayVas)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<ManageApplePayVas>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageCheckFileRequest)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<ManageCheckFileRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageCheckFileResponse)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<ManageCheckFileResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageClearCardBufferRequest)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<ManageClearCardBufferRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageClearCardBufferResponse)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<ManageClearCardBufferResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageDeleteImageRequest)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<ManageDeleteImageRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageDeleteImageResponse)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<ManageDeleteImageResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageDoSignatureRequest)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<ManageDoSignatureRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageDoSignatureResponse)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<ManageDoSignatureResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGetSignatureRequest)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<ManageGetSignatureRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGetSignatureResponse)) {
      stream->WriteByte(138);
      WriteValue(EncodableValue(std::any_cast<ManageGetSignatureResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGetVariableRequest)) {
      stream->WriteByte(139);
      WriteValue(EncodableValue(std::any_cast<ManageGetVariableRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGetVariableResponse)) {
      stream->WriteByte(140);
      WriteValue(EncodableValue(std::any_cast<ManageGetVariableResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGoogleServiceTypeBitmap)) {
      stream->WriteByte(141);
      WriteValue(EncodableValue(std::any_cast<ManageGoogleServiceTypeBitmap>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGoogleSmartTap)) {
      stream->WriteByte(142);
      WriteValue(EncodableValue(std::any_cast<ManageGoogleSmartTap>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGoogleSmartTapCapBitmap)) {
      stream->WriteByte(143);
      WriteValue(EncodableValue(std::any_cast<ManageGoogleSmartTapCapBitmap>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageGoogleSmartTapPushService)) {
      stream->WriteByte(144);
      WriteValue(EncodableValue(std::any_cast<ManageGoogleSmartTapPushService>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageHardwareConfigurationBitmap)) {
      stream->WriteByte(145);
      WriteValue(EncodableValue(std::any_cast<ManageHardwareConfigurationBitmap>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageInitRequest)) {
      stream->WriteByte(146);
      WriteValue(EncodableValue(std::any_cast<ManageInitRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageInitResponse)) {
      stream->WriteByte(147);
      WriteValue(EncodableValue(std::any_cast<ManageInitResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageMultiMerchant)) {
      stream->WriteByte(148);
      WriteValue(EncodableValue(std::any_cast<ManageMultiMerchant>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageNewService)) {
      stream->WriteByte(149);
      WriteValue(EncodableValue(std::any_cast<ManageNewService>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageRebootRequest)) {
      stream->WriteByte(150);
      WriteValue(EncodableValue(std::any_cast<ManageRebootRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageRebootResponse)) {
      stream->WriteByte(151);
      WriteValue(EncodableValue(std::any_cast<ManageRebootResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageResetScreenRequest)) {
      stream->WriteByte(152);
      WriteValue(EncodableValue(std::any_cast<ManageResetScreenRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageResetScreenResponse)) {
      stream->WriteByte(153);
      WriteValue(EncodableValue(std::any_cast<ManageResetScreenResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageServiceUpdate)) {
      stream->WriteByte(154);
      WriteValue(EncodableValue(std::any_cast<ManageServiceUpdate>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageServiceUsage)) {
      stream->WriteByte(155);
      WriteValue(EncodableValue(std::any_cast<ManageServiceUsage>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageSetApplePayVasParametersRequest)) {
      stream->WriteByte(156);
      WriteValue(EncodableValue(std::any_cast<ManageSetApplePayVasParametersRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageSetApplePayVasParametersResponse)) {
      stream->WriteByte(157);
      WriteValue(EncodableValue(std::any_cast<ManageSetApplePayVasParametersResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageSetGoogleSmartTapParametersRequest)) {
      stream->WriteByte(158);
      WriteValue(EncodableValue(std::any_cast<ManageSetGoogleSmartTapParametersRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageSetGoogleSmartTapParametersResponse)) {
      stream->WriteByte(159);
      WriteValue(EncodableValue(std::any_cast<ManageSetGoogleSmartTapParametersResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageSetVariableRequest)) {
      stream->WriteByte(160);
      WriteValue(EncodableValue(std::any_cast<ManageSetVariableRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageSetVariableResponse)) {
      stream->WriteByte(161);
      WriteValue(EncodableValue(std::any_cast<ManageSetVariableResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageUpdateResourceFileRequest)) {
      stream->WriteByte(162);
      WriteValue(EncodableValue(std::any_cast<ManageUpdateResourceFileRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageUpdateResourceFileResponse)) {
      stream->WriteByte(163);
      WriteValue(EncodableValue(std::any_cast<ManageUpdateResourceFileResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageVasPushDataRequest)) {
      stream->WriteByte(164);
      WriteValue(EncodableValue(std::any_cast<ManageVasPushDataRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(ManageVasPushDataResponse)) {
      stream->WriteByte(165);
      WriteValue(EncodableValue(std::any_cast<ManageVasPushDataResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkManageApi.
const flutter::StandardMessageCodec& POSLinkManageApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkManageApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkManageApi` to handle messages through the `binary_messenger`.
void POSLinkManageApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkManageApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.deleteImage", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageDeleteImageRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->DeleteImage(req_arg, [reply](ErrorOr<ManageDeleteImageResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.doSignature", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageDoSignatureRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->DoSignature(req_arg, [reply](ErrorOr<ManageDoSignatureResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.vasPushData", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageVasPushDataRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->VasPushData(req_arg, [reply](ErrorOr<ManageVasPushDataResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.init", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageInitRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->Init(req_arg, [reply](ErrorOr<ManageInitResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.setGoogleSmartTapParameters", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageSetGoogleSmartTapParametersRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->SetGoogleSmartTapParameters(req_arg, [reply](ErrorOr<ManageSetGoogleSmartTapParametersResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.checkFile", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageCheckFileRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->CheckFile(req_arg, [reply](ErrorOr<ManageCheckFileResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.clearCardBuffer", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageClearCardBufferRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ClearCardBuffer(req_arg, [reply](ErrorOr<ManageClearCardBufferResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.setApplePayVasParameters", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageSetApplePayVasParametersRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->SetApplePayVasParameters(req_arg, [reply](ErrorOr<ManageSetApplePayVasParametersResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.getSignature", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageGetSignatureRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetSignature(req_arg, [reply](ErrorOr<ManageGetSignatureResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.resetScreen", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageResetScreenRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ResetScreen(req_arg, [reply](ErrorOr<ManageResetScreenResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.getVariable", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageGetVariableRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetVariable(req_arg, [reply](ErrorOr<ManageGetVariableResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.updateResourceFile", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageUpdateResourceFileRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->UpdateResourceFile(req_arg, [reply](ErrorOr<ManageUpdateResourceFileResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.reboot", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageRebootRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->Reboot(req_arg, [reply](ErrorOr<ManageRebootResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkManageApi.setVariable", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const ManageSetVariableRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->SetVariable(req_arg, [reply](ErrorOr<ManageSetVariableResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkManageApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkManageApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkManage
