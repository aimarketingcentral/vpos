// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkGetReportStatus.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkGetReportStatus {
/// The codec used by POSLinkGetReportStatusApi.
const flutter::StandardMessageCodec& POSLinkGetReportStatusApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&flutter::StandardCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkGetReportStatusApi` to handle messages through the `binary_messenger`.
void POSLinkGetReportStatusApi::SetUp(flutter::BinaryMessenger* binary_messenger, POSLinkGetReportStatusApi* api) {
  {
    auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
        binary_messenger, "dev.flutter.pigeon.POSLinkGetReportStatusApi.getReportStatus", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const flutter::EncodableValue& message, const flutter::MessageReply<flutter::EncodableValue>& reply) {
        flutter::EncodableMap wrapped;
        try {
          api->GetReportStatus([wrapped, reply](ErrorOr<int64_t>&& output) mutable {
            if (output.has_error()) {
              wrapped.emplace(flutter::EncodableValue("error"), WrapError(output.error()));
              reply(wrapped);
            } else {
              wrapped.emplace(flutter::EncodableValue("result"), flutter::EncodableValue(std::move(output).TakeValue()));
              reply(wrapped);
            }});
        }
        catch (const std::exception& exception) {
          wrapped.emplace(flutter::EncodableValue("error"), WrapError(exception.what()));
          reply(wrapped);
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

flutter::EncodableMap POSLinkGetReportStatusApi::WrapError(std::string_view error_message) {
  return flutter::EncodableMap({
    {flutter::EncodableValue("message"), flutter::EncodableValue(std::string(error_message))},
    {flutter::EncodableValue("code"), flutter::EncodableValue("Error")},
    {flutter::EncodableValue("details"), flutter::EncodableValue()}
  });
}
flutter::EncodableMap POSLinkGetReportStatusApi::WrapError(const FlutterError& error) {
  return flutter::EncodableMap({
    {flutter::EncodableValue("message"), flutter::EncodableValue(error.message())},
    {flutter::EncodableValue("code"), flutter::EncodableValue(error.code())},
    {flutter::EncodableValue("details"), error.details()}
  });
}

}  // namespace POSLinkGetReportStatus
