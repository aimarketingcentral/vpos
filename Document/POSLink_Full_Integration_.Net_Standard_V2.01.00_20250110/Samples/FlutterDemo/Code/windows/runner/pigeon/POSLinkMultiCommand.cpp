// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkMultiCommand.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkMultiCommand {

// Response

const std::string* Response::response_code() const { return response_code_ ? &(*response_code_) : nullptr; }
void Response::set_response_code(const std::string_view* value_arg) { response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt; }
void Response::set_response_code(std::string_view value_arg) { response_code_ = value_arg; }

const std::string* Response::response_message() const { return response_message_ ? &(*response_message_) : nullptr; }
void Response::set_response_message(const std::string_view* value_arg) { response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt; }
void Response::set_response_message(std::string_view value_arg) { response_message_ = value_arg; }

flutter::EncodableMap Response::ToEncodableMap() const {
return flutter::EncodableMap{
    {flutter::EncodableValue("responseCode"), response_code_ ? flutter::EncodableValue(*response_code_) : flutter::EncodableValue()},
    {flutter::EncodableValue("responseMessage"), response_message_ ? flutter::EncodableValue(*response_message_) : flutter::EncodableValue()},
  };
}

Response::Response() {}

Response::Response(flutter::EncodableMap map) {
  auto& encodable_response_code = map.at(flutter::EncodableValue("responseCode"));
  if (const std::string* pointer_response_code = std::get_if<std::string>(&encodable_response_code)) {
    response_code_ = *pointer_response_code;
  }
  auto& encodable_response_message = map.at(flutter::EncodableValue("responseMessage"));
  if (const std::string* pointer_response_message = std::get_if<std::string>(&encodable_response_message)) {
    response_message_ = *pointer_response_message;
  }
}

POSLinkMultiCommandApiCodecSerializer::POSLinkMultiCommandApiCodecSerializer() {}
flutter::EncodableValue POSLinkMultiCommandApiCodecSerializer::ReadValueOfType(uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:    
      return flutter::CustomEncodableValue(Response(std::get<flutter::EncodableMap>(ReadValue(stream))));
    
    default:    
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
      }
}

void POSLinkMultiCommandApiCodecSerializer::WriteValue(const flutter::EncodableValue& value, flutter::ByteStreamWriter* stream) const {
  if (const flutter::CustomEncodableValue* custom_value = std::get_if<flutter::CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(Response)) {
      stream->WriteByte(128);
      WriteValue(std::any_cast<Response>(*custom_value).ToEncodableMap(), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkMultiCommandApi.
const flutter::StandardMessageCodec& POSLinkMultiCommandApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkMultiCommandApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkMultiCommandApi` to handle messages through the `binary_messenger`.
void POSLinkMultiCommandApi::SetUp(flutter::BinaryMessenger* binary_messenger, POSLinkMultiCommandApi* api) {
  {
    auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
        binary_messenger, "dev.flutter.pigeon.POSLinkMultiCommandApi.startMultiCommand", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const flutter::EncodableValue& message, const flutter::MessageReply<flutter::EncodableValue>& reply) {
        flutter::EncodableMap wrapped;
        try {
          std::optional<FlutterError> output = api->StartMultiCommand();
          if (output.has_value()) {
            wrapped.emplace(flutter::EncodableValue("error"), WrapError(output.value()));
          } else {
            wrapped.emplace(flutter::EncodableValue("result"), flutter::EncodableValue());
          }
        }
        catch (const std::exception& exception) {
          wrapped.emplace(flutter::EncodableValue("error"), WrapError(exception.what()));
        }
        reply(wrapped);
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
        binary_messenger, "dev.flutter.pigeon.POSLinkMultiCommandApi.cancelMultiCommand", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const flutter::EncodableValue& message, const flutter::MessageReply<flutter::EncodableValue>& reply) {
        flutter::EncodableMap wrapped;
        try {
          std::optional<FlutterError> output = api->CancelMultiCommand();
          if (output.has_value()) {
            wrapped.emplace(flutter::EncodableValue("error"), WrapError(output.value()));
          } else {
            wrapped.emplace(flutter::EncodableValue("result"), flutter::EncodableValue());
          }
        }
        catch (const std::exception& exception) {
          wrapped.emplace(flutter::EncodableValue("error"), WrapError(exception.what()));
        }
        reply(wrapped);
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<flutter::BasicMessageChannel<flutter::EncodableValue>>(
        binary_messenger, "dev.flutter.pigeon.POSLinkMultiCommandApi.completeMultiCommand", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const flutter::EncodableValue& message, const flutter::MessageReply<flutter::EncodableValue>& reply) {
        flutter::EncodableMap wrapped;
        try {
          api->CompleteMultiCommand([wrapped, reply](ErrorOr<Response>&& output) mutable {
            if (output.has_error()) {
              wrapped.emplace(flutter::EncodableValue("error"), WrapError(output.error()));
              reply(wrapped);
            } else {
              wrapped.emplace(flutter::EncodableValue("result"), flutter::CustomEncodableValue(std::move(output).TakeValue()));
              reply(wrapped);
            }});
        }
        catch (const std::exception& exception) {
          wrapped.emplace(flutter::EncodableValue("error"), WrapError(exception.what()));
          reply(wrapped);
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

flutter::EncodableMap POSLinkMultiCommandApi::WrapError(std::string_view error_message) {
  return flutter::EncodableMap({
    {flutter::EncodableValue("message"), flutter::EncodableValue(std::string(error_message))},
    {flutter::EncodableValue("code"), flutter::EncodableValue("Error")},
    {flutter::EncodableValue("details"), flutter::EncodableValue()}
  });
}
flutter::EncodableMap POSLinkMultiCommandApi::WrapError(const FlutterError& error) {
  return flutter::EncodableMap({
    {flutter::EncodableValue("message"), flutter::EncodableValue(error.message())},
    {flutter::EncodableValue("code"), flutter::EncodableValue(error.code())},
    {flutter::EncodableValue("details"), error.details()}
  });
}

}  // namespace POSLinkMultiCommand
