// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkForm.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkForm {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// FormRemoveCardRequest

FormRemoveCardRequest::FormRemoveCardRequest() {}

FormRemoveCardRequest::FormRemoveCardRequest(
  const std::string* message1,
  const std::string* message2,
  const FormContinuousScreen* continuous_screen,
  const FormPinpadType* pinpad_type,
  const std::string* icon)
 : message1_(message1 ? std::optional<std::string>(*message1) : std::nullopt),
    message2_(message2 ? std::optional<std::string>(*message2) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FormContinuousScreen>(*continuous_screen) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FormPinpadType>(*pinpad_type) : std::nullopt),
    icon_(icon ? std::optional<std::string>(*icon) : std::nullopt) {}

const std::string* FormRemoveCardRequest::message1() const {
  return message1_ ? &(*message1_) : nullptr;
}

void FormRemoveCardRequest::set_message1(const std::string_view* value_arg) {
  message1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormRemoveCardRequest::set_message1(std::string_view value_arg) {
  message1_ = value_arg;
}


const std::string* FormRemoveCardRequest::message2() const {
  return message2_ ? &(*message2_) : nullptr;
}

void FormRemoveCardRequest::set_message2(const std::string_view* value_arg) {
  message2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormRemoveCardRequest::set_message2(std::string_view value_arg) {
  message2_ = value_arg;
}


const FormContinuousScreen* FormRemoveCardRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FormRemoveCardRequest::set_continuous_screen(const FormContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FormContinuousScreen>(*value_arg) : std::nullopt;
}

void FormRemoveCardRequest::set_continuous_screen(const FormContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


const FormPinpadType* FormRemoveCardRequest::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FormRemoveCardRequest::set_pinpad_type(const FormPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FormPinpadType>(*value_arg) : std::nullopt;
}

void FormRemoveCardRequest::set_pinpad_type(const FormPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


const std::string* FormRemoveCardRequest::icon() const {
  return icon_ ? &(*icon_) : nullptr;
}

void FormRemoveCardRequest::set_icon(const std::string_view* value_arg) {
  icon_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormRemoveCardRequest::set_icon(std::string_view value_arg) {
  icon_ = value_arg;
}


EncodableList FormRemoveCardRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(message1_ ? EncodableValue(*message1_) : EncodableValue());
  list.push_back(message2_ ? EncodableValue(*message2_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  list.push_back(icon_ ? EncodableValue(*icon_) : EncodableValue());
  return list;
}

FormRemoveCardRequest FormRemoveCardRequest::FromEncodableList(const EncodableList& list) {
  FormRemoveCardRequest decoded;
  auto& encodable_message1 = list[0];
  if (!encodable_message1.IsNull()) {
    decoded.set_message1(std::get<std::string>(encodable_message1));
  }
  auto& encodable_message2 = list[1];
  if (!encodable_message2.IsNull()) {
    decoded.set_message2(std::get<std::string>(encodable_message2));
  }
  auto& encodable_continuous_screen = list[2];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FormContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  auto& encodable_pinpad_type = list[3];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FormPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  auto& encodable_icon = list[4];
  if (!encodable_icon.IsNull()) {
    decoded.set_icon(std::get<std::string>(encodable_icon));
  }
  return decoded;
}

// FormShowDialogFormRequest

FormShowDialogFormRequest::FormShowDialogFormRequest() {}

FormShowDialogFormRequest::FormShowDialogFormRequest(
  const std::string* title,
  const std::string* label1,
  const FormLabelProperty* label1_property,
  const std::string* label2,
  const FormLabelProperty* label2_property,
  const std::string* label3,
  const FormLabelProperty* label3_property,
  const std::string* label4,
  const FormLabelProperty* label4_property,
  const FormButtonType* button_type,
  const std::string* timeout,
  const FormContinuousScreen* continuous_screen)
 : title_(title ? std::optional<std::string>(*title) : std::nullopt),
    label1_(label1 ? std::optional<std::string>(*label1) : std::nullopt),
    label1_property_(label1_property ? std::optional<FormLabelProperty>(*label1_property) : std::nullopt),
    label2_(label2 ? std::optional<std::string>(*label2) : std::nullopt),
    label2_property_(label2_property ? std::optional<FormLabelProperty>(*label2_property) : std::nullopt),
    label3_(label3 ? std::optional<std::string>(*label3) : std::nullopt),
    label3_property_(label3_property ? std::optional<FormLabelProperty>(*label3_property) : std::nullopt),
    label4_(label4 ? std::optional<std::string>(*label4) : std::nullopt),
    label4_property_(label4_property ? std::optional<FormLabelProperty>(*label4_property) : std::nullopt),
    button_type_(button_type ? std::optional<FormButtonType>(*button_type) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FormContinuousScreen>(*continuous_screen) : std::nullopt) {}

const std::string* FormShowDialogFormRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormShowDialogFormRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* FormShowDialogFormRequest::label1() const {
  return label1_ ? &(*label1_) : nullptr;
}

void FormShowDialogFormRequest::set_label1(const std::string_view* value_arg) {
  label1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label1(std::string_view value_arg) {
  label1_ = value_arg;
}


const FormLabelProperty* FormShowDialogFormRequest::label1_property() const {
  return label1_property_ ? &(*label1_property_) : nullptr;
}

void FormShowDialogFormRequest::set_label1_property(const FormLabelProperty* value_arg) {
  label1_property_ = value_arg ? std::optional<FormLabelProperty>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label1_property(const FormLabelProperty& value_arg) {
  label1_property_ = value_arg;
}


const std::string* FormShowDialogFormRequest::label2() const {
  return label2_ ? &(*label2_) : nullptr;
}

void FormShowDialogFormRequest::set_label2(const std::string_view* value_arg) {
  label2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label2(std::string_view value_arg) {
  label2_ = value_arg;
}


const FormLabelProperty* FormShowDialogFormRequest::label2_property() const {
  return label2_property_ ? &(*label2_property_) : nullptr;
}

void FormShowDialogFormRequest::set_label2_property(const FormLabelProperty* value_arg) {
  label2_property_ = value_arg ? std::optional<FormLabelProperty>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label2_property(const FormLabelProperty& value_arg) {
  label2_property_ = value_arg;
}


const std::string* FormShowDialogFormRequest::label3() const {
  return label3_ ? &(*label3_) : nullptr;
}

void FormShowDialogFormRequest::set_label3(const std::string_view* value_arg) {
  label3_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label3(std::string_view value_arg) {
  label3_ = value_arg;
}


const FormLabelProperty* FormShowDialogFormRequest::label3_property() const {
  return label3_property_ ? &(*label3_property_) : nullptr;
}

void FormShowDialogFormRequest::set_label3_property(const FormLabelProperty* value_arg) {
  label3_property_ = value_arg ? std::optional<FormLabelProperty>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label3_property(const FormLabelProperty& value_arg) {
  label3_property_ = value_arg;
}


const std::string* FormShowDialogFormRequest::label4() const {
  return label4_ ? &(*label4_) : nullptr;
}

void FormShowDialogFormRequest::set_label4(const std::string_view* value_arg) {
  label4_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label4(std::string_view value_arg) {
  label4_ = value_arg;
}


const FormLabelProperty* FormShowDialogFormRequest::label4_property() const {
  return label4_property_ ? &(*label4_property_) : nullptr;
}

void FormShowDialogFormRequest::set_label4_property(const FormLabelProperty* value_arg) {
  label4_property_ = value_arg ? std::optional<FormLabelProperty>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_label4_property(const FormLabelProperty& value_arg) {
  label4_property_ = value_arg;
}


const FormButtonType* FormShowDialogFormRequest::button_type() const {
  return button_type_ ? &(*button_type_) : nullptr;
}

void FormShowDialogFormRequest::set_button_type(const FormButtonType* value_arg) {
  button_type_ = value_arg ? std::optional<FormButtonType>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_button_type(const FormButtonType& value_arg) {
  button_type_ = value_arg;
}


const std::string* FormShowDialogFormRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FormShowDialogFormRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FormContinuousScreen* FormShowDialogFormRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FormShowDialogFormRequest::set_continuous_screen(const FormContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FormContinuousScreen>(*value_arg) : std::nullopt;
}

void FormShowDialogFormRequest::set_continuous_screen(const FormContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


EncodableList FormShowDialogFormRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(12);
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(label1_ ? EncodableValue(*label1_) : EncodableValue());
  list.push_back(label1_property_ ? EncodableValue((int)(*label1_property_)) : EncodableValue());
  list.push_back(label2_ ? EncodableValue(*label2_) : EncodableValue());
  list.push_back(label2_property_ ? EncodableValue((int)(*label2_property_)) : EncodableValue());
  list.push_back(label3_ ? EncodableValue(*label3_) : EncodableValue());
  list.push_back(label3_property_ ? EncodableValue((int)(*label3_property_)) : EncodableValue());
  list.push_back(label4_ ? EncodableValue(*label4_) : EncodableValue());
  list.push_back(label4_property_ ? EncodableValue((int)(*label4_property_)) : EncodableValue());
  list.push_back(button_type_ ? EncodableValue((int)(*button_type_)) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  return list;
}

FormShowDialogFormRequest FormShowDialogFormRequest::FromEncodableList(const EncodableList& list) {
  FormShowDialogFormRequest decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_label1 = list[1];
  if (!encodable_label1.IsNull()) {
    decoded.set_label1(std::get<std::string>(encodable_label1));
  }
  auto& encodable_label1_property = list[2];
  if (!encodable_label1_property.IsNull()) {
    decoded.set_label1_property((FormLabelProperty)(std::get<int32_t>(encodable_label1_property)));
  }
  auto& encodable_label2 = list[3];
  if (!encodable_label2.IsNull()) {
    decoded.set_label2(std::get<std::string>(encodable_label2));
  }
  auto& encodable_label2_property = list[4];
  if (!encodable_label2_property.IsNull()) {
    decoded.set_label2_property((FormLabelProperty)(std::get<int32_t>(encodable_label2_property)));
  }
  auto& encodable_label3 = list[5];
  if (!encodable_label3.IsNull()) {
    decoded.set_label3(std::get<std::string>(encodable_label3));
  }
  auto& encodable_label3_property = list[6];
  if (!encodable_label3_property.IsNull()) {
    decoded.set_label3_property((FormLabelProperty)(std::get<int32_t>(encodable_label3_property)));
  }
  auto& encodable_label4 = list[7];
  if (!encodable_label4.IsNull()) {
    decoded.set_label4(std::get<std::string>(encodable_label4));
  }
  auto& encodable_label4_property = list[8];
  if (!encodable_label4_property.IsNull()) {
    decoded.set_label4_property((FormLabelProperty)(std::get<int32_t>(encodable_label4_property)));
  }
  auto& encodable_button_type = list[9];
  if (!encodable_button_type.IsNull()) {
    decoded.set_button_type((FormButtonType)(std::get<int32_t>(encodable_button_type)));
  }
  auto& encodable_timeout = list[10];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_continuous_screen = list[11];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FormContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  return decoded;
}

// FormStbButton

FormStbButton::FormStbButton() {}

FormStbButton::FormStbButton(
  const std::string* name,
  const std::string* color,
  const FormHardKey* hard_key)
 : name_(name ? std::optional<std::string>(*name) : std::nullopt),
    color_(color ? std::optional<std::string>(*color) : std::nullopt),
    hard_key_(hard_key ? std::optional<FormHardKey>(*hard_key) : std::nullopt) {}

const std::string* FormStbButton::name() const {
  return name_ ? &(*name_) : nullptr;
}

void FormStbButton::set_name(const std::string_view* value_arg) {
  name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormStbButton::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


const std::string* FormStbButton::color() const {
  return color_ ? &(*color_) : nullptr;
}

void FormStbButton::set_color(const std::string_view* value_arg) {
  color_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormStbButton::set_color(std::string_view value_arg) {
  color_ = value_arg;
}


const FormHardKey* FormStbButton::hard_key() const {
  return hard_key_ ? &(*hard_key_) : nullptr;
}

void FormStbButton::set_hard_key(const FormHardKey* value_arg) {
  hard_key_ = value_arg ? std::optional<FormHardKey>(*value_arg) : std::nullopt;
}

void FormStbButton::set_hard_key(const FormHardKey& value_arg) {
  hard_key_ = value_arg;
}


EncodableList FormStbButton::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(name_ ? EncodableValue(*name_) : EncodableValue());
  list.push_back(color_ ? EncodableValue(*color_) : EncodableValue());
  list.push_back(hard_key_ ? EncodableValue((int)(*hard_key_)) : EncodableValue());
  return list;
}

FormStbButton FormStbButton::FromEncodableList(const EncodableList& list) {
  FormStbButton decoded;
  auto& encodable_name = list[0];
  if (!encodable_name.IsNull()) {
    decoded.set_name(std::get<std::string>(encodable_name));
  }
  auto& encodable_color = list[1];
  if (!encodable_color.IsNull()) {
    decoded.set_color(std::get<std::string>(encodable_color));
  }
  auto& encodable_hard_key = list[2];
  if (!encodable_hard_key.IsNull()) {
    decoded.set_hard_key((FormHardKey)(std::get<int32_t>(encodable_hard_key)));
  }
  return decoded;
}

// FormShowTextBoxRequest

FormShowTextBoxRequest::FormShowTextBoxRequest() {}

FormShowTextBoxRequest::FormShowTextBoxRequest(
  const std::string* title,
  const std::string* text,
  const FormStbButton* button1,
  const FormStbButton* button2,
  const FormStbButton* button3,
  const std::string* timeout,
  const FormEnableKeyType* enable_key_type,
  const EncodableList* hard_key_list,
  const FormSignatureBoxType* signature_box,
  const FormContinuousScreen* continuous_screen,
  const FormBarcodeName* barcode_name,
  const std::string* barcode_data,
  const std::string* input_text_title,
  const FormInputTextType* input_text,
  const FormInputType* input_type,
  const std::string* min_length,
  const std::string* max_length)
 : title_(title ? std::optional<std::string>(*title) : std::nullopt),
    text_(text ? std::optional<std::string>(*text) : std::nullopt),
    button1_(button1 ? std::optional<FormStbButton>(*button1) : std::nullopt),
    button2_(button2 ? std::optional<FormStbButton>(*button2) : std::nullopt),
    button3_(button3 ? std::optional<FormStbButton>(*button3) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    enable_key_type_(enable_key_type ? std::optional<FormEnableKeyType>(*enable_key_type) : std::nullopt),
    hard_key_list_(hard_key_list ? std::optional<EncodableList>(*hard_key_list) : std::nullopt),
    signature_box_(signature_box ? std::optional<FormSignatureBoxType>(*signature_box) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FormContinuousScreen>(*continuous_screen) : std::nullopt),
    barcode_name_(barcode_name ? std::optional<FormBarcodeName>(*barcode_name) : std::nullopt),
    barcode_data_(barcode_data ? std::optional<std::string>(*barcode_data) : std::nullopt),
    input_text_title_(input_text_title ? std::optional<std::string>(*input_text_title) : std::nullopt),
    input_text_(input_text ? std::optional<FormInputTextType>(*input_text) : std::nullopt),
    input_type_(input_type ? std::optional<FormInputType>(*input_type) : std::nullopt),
    min_length_(min_length ? std::optional<std::string>(*min_length) : std::nullopt),
    max_length_(max_length ? std::optional<std::string>(*max_length) : std::nullopt) {}

const std::string* FormShowTextBoxRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormShowTextBoxRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* FormShowTextBoxRequest::text() const {
  return text_ ? &(*text_) : nullptr;
}

void FormShowTextBoxRequest::set_text(const std::string_view* value_arg) {
  text_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_text(std::string_view value_arg) {
  text_ = value_arg;
}


const FormStbButton* FormShowTextBoxRequest::button1() const {
  return button1_ ? &(*button1_) : nullptr;
}

void FormShowTextBoxRequest::set_button1(const FormStbButton* value_arg) {
  button1_ = value_arg ? std::optional<FormStbButton>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_button1(const FormStbButton& value_arg) {
  button1_ = value_arg;
}


const FormStbButton* FormShowTextBoxRequest::button2() const {
  return button2_ ? &(*button2_) : nullptr;
}

void FormShowTextBoxRequest::set_button2(const FormStbButton* value_arg) {
  button2_ = value_arg ? std::optional<FormStbButton>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_button2(const FormStbButton& value_arg) {
  button2_ = value_arg;
}


const FormStbButton* FormShowTextBoxRequest::button3() const {
  return button3_ ? &(*button3_) : nullptr;
}

void FormShowTextBoxRequest::set_button3(const FormStbButton* value_arg) {
  button3_ = value_arg ? std::optional<FormStbButton>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_button3(const FormStbButton& value_arg) {
  button3_ = value_arg;
}


const std::string* FormShowTextBoxRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FormShowTextBoxRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FormEnableKeyType* FormShowTextBoxRequest::enable_key_type() const {
  return enable_key_type_ ? &(*enable_key_type_) : nullptr;
}

void FormShowTextBoxRequest::set_enable_key_type(const FormEnableKeyType* value_arg) {
  enable_key_type_ = value_arg ? std::optional<FormEnableKeyType>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_enable_key_type(const FormEnableKeyType& value_arg) {
  enable_key_type_ = value_arg;
}


const EncodableList* FormShowTextBoxRequest::hard_key_list() const {
  return hard_key_list_ ? &(*hard_key_list_) : nullptr;
}

void FormShowTextBoxRequest::set_hard_key_list(const EncodableList* value_arg) {
  hard_key_list_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_hard_key_list(const EncodableList& value_arg) {
  hard_key_list_ = value_arg;
}


const FormSignatureBoxType* FormShowTextBoxRequest::signature_box() const {
  return signature_box_ ? &(*signature_box_) : nullptr;
}

void FormShowTextBoxRequest::set_signature_box(const FormSignatureBoxType* value_arg) {
  signature_box_ = value_arg ? std::optional<FormSignatureBoxType>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_signature_box(const FormSignatureBoxType& value_arg) {
  signature_box_ = value_arg;
}


const FormContinuousScreen* FormShowTextBoxRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FormShowTextBoxRequest::set_continuous_screen(const FormContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FormContinuousScreen>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_continuous_screen(const FormContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


const FormBarcodeName* FormShowTextBoxRequest::barcode_name() const {
  return barcode_name_ ? &(*barcode_name_) : nullptr;
}

void FormShowTextBoxRequest::set_barcode_name(const FormBarcodeName* value_arg) {
  barcode_name_ = value_arg ? std::optional<FormBarcodeName>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_barcode_name(const FormBarcodeName& value_arg) {
  barcode_name_ = value_arg;
}


const std::string* FormShowTextBoxRequest::barcode_data() const {
  return barcode_data_ ? &(*barcode_data_) : nullptr;
}

void FormShowTextBoxRequest::set_barcode_data(const std::string_view* value_arg) {
  barcode_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_barcode_data(std::string_view value_arg) {
  barcode_data_ = value_arg;
}


const std::string* FormShowTextBoxRequest::input_text_title() const {
  return input_text_title_ ? &(*input_text_title_) : nullptr;
}

void FormShowTextBoxRequest::set_input_text_title(const std::string_view* value_arg) {
  input_text_title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_input_text_title(std::string_view value_arg) {
  input_text_title_ = value_arg;
}


const FormInputTextType* FormShowTextBoxRequest::input_text() const {
  return input_text_ ? &(*input_text_) : nullptr;
}

void FormShowTextBoxRequest::set_input_text(const FormInputTextType* value_arg) {
  input_text_ = value_arg ? std::optional<FormInputTextType>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_input_text(const FormInputTextType& value_arg) {
  input_text_ = value_arg;
}


const FormInputType* FormShowTextBoxRequest::input_type() const {
  return input_type_ ? &(*input_type_) : nullptr;
}

void FormShowTextBoxRequest::set_input_type(const FormInputType* value_arg) {
  input_type_ = value_arg ? std::optional<FormInputType>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_input_type(const FormInputType& value_arg) {
  input_type_ = value_arg;
}


const std::string* FormShowTextBoxRequest::min_length() const {
  return min_length_ ? &(*min_length_) : nullptr;
}

void FormShowTextBoxRequest::set_min_length(const std::string_view* value_arg) {
  min_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_min_length(std::string_view value_arg) {
  min_length_ = value_arg;
}


const std::string* FormShowTextBoxRequest::max_length() const {
  return max_length_ ? &(*max_length_) : nullptr;
}

void FormShowTextBoxRequest::set_max_length(const std::string_view* value_arg) {
  max_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxRequest::set_max_length(std::string_view value_arg) {
  max_length_ = value_arg;
}


EncodableList FormShowTextBoxRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(17);
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(text_ ? EncodableValue(*text_) : EncodableValue());
  list.push_back(button1_ ? EncodableValue(button1_->ToEncodableList()) : EncodableValue());
  list.push_back(button2_ ? EncodableValue(button2_->ToEncodableList()) : EncodableValue());
  list.push_back(button3_ ? EncodableValue(button3_->ToEncodableList()) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(enable_key_type_ ? EncodableValue((int)(*enable_key_type_)) : EncodableValue());
  list.push_back(hard_key_list_ ? EncodableValue(*hard_key_list_) : EncodableValue());
  list.push_back(signature_box_ ? EncodableValue((int)(*signature_box_)) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  list.push_back(barcode_name_ ? EncodableValue((int)(*barcode_name_)) : EncodableValue());
  list.push_back(barcode_data_ ? EncodableValue(*barcode_data_) : EncodableValue());
  list.push_back(input_text_title_ ? EncodableValue(*input_text_title_) : EncodableValue());
  list.push_back(input_text_ ? EncodableValue((int)(*input_text_)) : EncodableValue());
  list.push_back(input_type_ ? EncodableValue((int)(*input_type_)) : EncodableValue());
  list.push_back(min_length_ ? EncodableValue(*min_length_) : EncodableValue());
  list.push_back(max_length_ ? EncodableValue(*max_length_) : EncodableValue());
  return list;
}

FormShowTextBoxRequest FormShowTextBoxRequest::FromEncodableList(const EncodableList& list) {
  FormShowTextBoxRequest decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_text = list[1];
  if (!encodable_text.IsNull()) {
    decoded.set_text(std::get<std::string>(encodable_text));
  }
  auto& encodable_button1 = list[2];
  if (!encodable_button1.IsNull()) {
    decoded.set_button1(FormStbButton::FromEncodableList(std::get<EncodableList>(encodable_button1)));
  }
  auto& encodable_button2 = list[3];
  if (!encodable_button2.IsNull()) {
    decoded.set_button2(FormStbButton::FromEncodableList(std::get<EncodableList>(encodable_button2)));
  }
  auto& encodable_button3 = list[4];
  if (!encodable_button3.IsNull()) {
    decoded.set_button3(FormStbButton::FromEncodableList(std::get<EncodableList>(encodable_button3)));
  }
  auto& encodable_timeout = list[5];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_enable_key_type = list[6];
  if (!encodable_enable_key_type.IsNull()) {
    decoded.set_enable_key_type((FormEnableKeyType)(std::get<int32_t>(encodable_enable_key_type)));
  }
  auto& encodable_hard_key_list = list[7];
  if (!encodable_hard_key_list.IsNull()) {
    decoded.set_hard_key_list(std::get<EncodableList>(encodable_hard_key_list));
  }
  auto& encodable_signature_box = list[8];
  if (!encodable_signature_box.IsNull()) {
    decoded.set_signature_box((FormSignatureBoxType)(std::get<int32_t>(encodable_signature_box)));
  }
  auto& encodable_continuous_screen = list[9];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FormContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  auto& encodable_barcode_name = list[10];
  if (!encodable_barcode_name.IsNull()) {
    decoded.set_barcode_name((FormBarcodeName)(std::get<int32_t>(encodable_barcode_name)));
  }
  auto& encodable_barcode_data = list[11];
  if (!encodable_barcode_data.IsNull()) {
    decoded.set_barcode_data(std::get<std::string>(encodable_barcode_data));
  }
  auto& encodable_input_text_title = list[12];
  if (!encodable_input_text_title.IsNull()) {
    decoded.set_input_text_title(std::get<std::string>(encodable_input_text_title));
  }
  auto& encodable_input_text = list[13];
  if (!encodable_input_text.IsNull()) {
    decoded.set_input_text((FormInputTextType)(std::get<int32_t>(encodable_input_text)));
  }
  auto& encodable_input_type = list[14];
  if (!encodable_input_type.IsNull()) {
    decoded.set_input_type((FormInputType)(std::get<int32_t>(encodable_input_type)));
  }
  auto& encodable_min_length = list[15];
  if (!encodable_min_length.IsNull()) {
    decoded.set_min_length(std::get<std::string>(encodable_min_length));
  }
  auto& encodable_max_length = list[16];
  if (!encodable_max_length.IsNull()) {
    decoded.set_max_length(std::get<std::string>(encodable_max_length));
  }
  return decoded;
}

// FormSdButton

FormSdButton::FormSdButton() {}

FormSdButton::FormSdButton(const std::string* name)
 : name_(name ? std::optional<std::string>(*name) : std::nullopt) {}

const std::string* FormSdButton::name() const {
  return name_ ? &(*name_) : nullptr;
}

void FormSdButton::set_name(const std::string_view* value_arg) {
  name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormSdButton::set_name(std::string_view value_arg) {
  name_ = value_arg;
}


EncodableList FormSdButton::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(name_ ? EncodableValue(*name_) : EncodableValue());
  return list;
}

FormSdButton FormSdButton::FromEncodableList(const EncodableList& list) {
  FormSdButton decoded;
  auto& encodable_name = list[0];
  if (!encodable_name.IsNull()) {
    decoded.set_name(std::get<std::string>(encodable_name));
  }
  return decoded;
}

// FormShowDialogRequest

FormShowDialogRequest::FormShowDialogRequest() {}

FormShowDialogRequest::FormShowDialogRequest(
  const std::string* title,
  const FormSdButton* button1,
  const FormSdButton* button2,
  const FormSdButton* button3,
  const FormSdButton* button4,
  const std::string* timeout,
  const FormContinuousScreen* continuous_screen)
 : title_(title ? std::optional<std::string>(*title) : std::nullopt),
    button1_(button1 ? std::optional<FormSdButton>(*button1) : std::nullopt),
    button2_(button2 ? std::optional<FormSdButton>(*button2) : std::nullopt),
    button3_(button3 ? std::optional<FormSdButton>(*button3) : std::nullopt),
    button4_(button4 ? std::optional<FormSdButton>(*button4) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FormContinuousScreen>(*continuous_screen) : std::nullopt) {}

const std::string* FormShowDialogRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormShowDialogRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const FormSdButton* FormShowDialogRequest::button1() const {
  return button1_ ? &(*button1_) : nullptr;
}

void FormShowDialogRequest::set_button1(const FormSdButton* value_arg) {
  button1_ = value_arg ? std::optional<FormSdButton>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_button1(const FormSdButton& value_arg) {
  button1_ = value_arg;
}


const FormSdButton* FormShowDialogRequest::button2() const {
  return button2_ ? &(*button2_) : nullptr;
}

void FormShowDialogRequest::set_button2(const FormSdButton* value_arg) {
  button2_ = value_arg ? std::optional<FormSdButton>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_button2(const FormSdButton& value_arg) {
  button2_ = value_arg;
}


const FormSdButton* FormShowDialogRequest::button3() const {
  return button3_ ? &(*button3_) : nullptr;
}

void FormShowDialogRequest::set_button3(const FormSdButton* value_arg) {
  button3_ = value_arg ? std::optional<FormSdButton>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_button3(const FormSdButton& value_arg) {
  button3_ = value_arg;
}


const FormSdButton* FormShowDialogRequest::button4() const {
  return button4_ ? &(*button4_) : nullptr;
}

void FormShowDialogRequest::set_button4(const FormSdButton* value_arg) {
  button4_ = value_arg ? std::optional<FormSdButton>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_button4(const FormSdButton& value_arg) {
  button4_ = value_arg;
}


const std::string* FormShowDialogRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FormShowDialogRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FormContinuousScreen* FormShowDialogRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FormShowDialogRequest::set_continuous_screen(const FormContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FormContinuousScreen>(*value_arg) : std::nullopt;
}

void FormShowDialogRequest::set_continuous_screen(const FormContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


EncodableList FormShowDialogRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(button1_ ? EncodableValue(button1_->ToEncodableList()) : EncodableValue());
  list.push_back(button2_ ? EncodableValue(button2_->ToEncodableList()) : EncodableValue());
  list.push_back(button3_ ? EncodableValue(button3_->ToEncodableList()) : EncodableValue());
  list.push_back(button4_ ? EncodableValue(button4_->ToEncodableList()) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  return list;
}

FormShowDialogRequest FormShowDialogRequest::FromEncodableList(const EncodableList& list) {
  FormShowDialogRequest decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_button1 = list[1];
  if (!encodable_button1.IsNull()) {
    decoded.set_button1(FormSdButton::FromEncodableList(std::get<EncodableList>(encodable_button1)));
  }
  auto& encodable_button2 = list[2];
  if (!encodable_button2.IsNull()) {
    decoded.set_button2(FormSdButton::FromEncodableList(std::get<EncodableList>(encodable_button2)));
  }
  auto& encodable_button3 = list[3];
  if (!encodable_button3.IsNull()) {
    decoded.set_button3(FormSdButton::FromEncodableList(std::get<EncodableList>(encodable_button3)));
  }
  auto& encodable_button4 = list[4];
  if (!encodable_button4.IsNull()) {
    decoded.set_button4(FormSdButton::FromEncodableList(std::get<EncodableList>(encodable_button4)));
  }
  auto& encodable_timeout = list[5];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_continuous_screen = list[6];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FormContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  return decoded;
}

// FormShowMessageRequest

FormShowMessageRequest::FormShowMessageRequest() {}

FormShowMessageRequest::FormShowMessageRequest(
  const std::string* display_message1,
  const std::string* title,
  const std::string* display_message2,
  const FormTextPushedMode* text_pushed_mode,
  const std::string* tax_line,
  const std::string* total_line,
  const std::string* image_name,
  const std::string* image_description,
  const FormLineItemAction* line_item_action,
  const EncodableList* item_indices)
 : display_message1_(display_message1 ? std::optional<std::string>(*display_message1) : std::nullopt),
    title_(title ? std::optional<std::string>(*title) : std::nullopt),
    display_message2_(display_message2 ? std::optional<std::string>(*display_message2) : std::nullopt),
    text_pushed_mode_(text_pushed_mode ? std::optional<FormTextPushedMode>(*text_pushed_mode) : std::nullopt),
    tax_line_(tax_line ? std::optional<std::string>(*tax_line) : std::nullopt),
    total_line_(total_line ? std::optional<std::string>(*total_line) : std::nullopt),
    image_name_(image_name ? std::optional<std::string>(*image_name) : std::nullopt),
    image_description_(image_description ? std::optional<std::string>(*image_description) : std::nullopt),
    line_item_action_(line_item_action ? std::optional<FormLineItemAction>(*line_item_action) : std::nullopt),
    item_indices_(item_indices ? std::optional<EncodableList>(*item_indices) : std::nullopt) {}

const std::string* FormShowMessageRequest::display_message1() const {
  return display_message1_ ? &(*display_message1_) : nullptr;
}

void FormShowMessageRequest::set_display_message1(const std::string_view* value_arg) {
  display_message1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_display_message1(std::string_view value_arg) {
  display_message1_ = value_arg;
}


const std::string* FormShowMessageRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormShowMessageRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* FormShowMessageRequest::display_message2() const {
  return display_message2_ ? &(*display_message2_) : nullptr;
}

void FormShowMessageRequest::set_display_message2(const std::string_view* value_arg) {
  display_message2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_display_message2(std::string_view value_arg) {
  display_message2_ = value_arg;
}


const FormTextPushedMode* FormShowMessageRequest::text_pushed_mode() const {
  return text_pushed_mode_ ? &(*text_pushed_mode_) : nullptr;
}

void FormShowMessageRequest::set_text_pushed_mode(const FormTextPushedMode* value_arg) {
  text_pushed_mode_ = value_arg ? std::optional<FormTextPushedMode>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_text_pushed_mode(const FormTextPushedMode& value_arg) {
  text_pushed_mode_ = value_arg;
}


const std::string* FormShowMessageRequest::tax_line() const {
  return tax_line_ ? &(*tax_line_) : nullptr;
}

void FormShowMessageRequest::set_tax_line(const std::string_view* value_arg) {
  tax_line_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_tax_line(std::string_view value_arg) {
  tax_line_ = value_arg;
}


const std::string* FormShowMessageRequest::total_line() const {
  return total_line_ ? &(*total_line_) : nullptr;
}

void FormShowMessageRequest::set_total_line(const std::string_view* value_arg) {
  total_line_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_total_line(std::string_view value_arg) {
  total_line_ = value_arg;
}


const std::string* FormShowMessageRequest::image_name() const {
  return image_name_ ? &(*image_name_) : nullptr;
}

void FormShowMessageRequest::set_image_name(const std::string_view* value_arg) {
  image_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_image_name(std::string_view value_arg) {
  image_name_ = value_arg;
}


const std::string* FormShowMessageRequest::image_description() const {
  return image_description_ ? &(*image_description_) : nullptr;
}

void FormShowMessageRequest::set_image_description(const std::string_view* value_arg) {
  image_description_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_image_description(std::string_view value_arg) {
  image_description_ = value_arg;
}


const FormLineItemAction* FormShowMessageRequest::line_item_action() const {
  return line_item_action_ ? &(*line_item_action_) : nullptr;
}

void FormShowMessageRequest::set_line_item_action(const FormLineItemAction* value_arg) {
  line_item_action_ = value_arg ? std::optional<FormLineItemAction>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_line_item_action(const FormLineItemAction& value_arg) {
  line_item_action_ = value_arg;
}


const EncodableList* FormShowMessageRequest::item_indices() const {
  return item_indices_ ? &(*item_indices_) : nullptr;
}

void FormShowMessageRequest::set_item_indices(const EncodableList* value_arg) {
  item_indices_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FormShowMessageRequest::set_item_indices(const EncodableList& value_arg) {
  item_indices_ = value_arg;
}


EncodableList FormShowMessageRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(10);
  list.push_back(display_message1_ ? EncodableValue(*display_message1_) : EncodableValue());
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(display_message2_ ? EncodableValue(*display_message2_) : EncodableValue());
  list.push_back(text_pushed_mode_ ? EncodableValue((int)(*text_pushed_mode_)) : EncodableValue());
  list.push_back(tax_line_ ? EncodableValue(*tax_line_) : EncodableValue());
  list.push_back(total_line_ ? EncodableValue(*total_line_) : EncodableValue());
  list.push_back(image_name_ ? EncodableValue(*image_name_) : EncodableValue());
  list.push_back(image_description_ ? EncodableValue(*image_description_) : EncodableValue());
  list.push_back(line_item_action_ ? EncodableValue((int)(*line_item_action_)) : EncodableValue());
  list.push_back(item_indices_ ? EncodableValue(*item_indices_) : EncodableValue());
  return list;
}

FormShowMessageRequest FormShowMessageRequest::FromEncodableList(const EncodableList& list) {
  FormShowMessageRequest decoded;
  auto& encodable_display_message1 = list[0];
  if (!encodable_display_message1.IsNull()) {
    decoded.set_display_message1(std::get<std::string>(encodable_display_message1));
  }
  auto& encodable_title = list[1];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_display_message2 = list[2];
  if (!encodable_display_message2.IsNull()) {
    decoded.set_display_message2(std::get<std::string>(encodable_display_message2));
  }
  auto& encodable_text_pushed_mode = list[3];
  if (!encodable_text_pushed_mode.IsNull()) {
    decoded.set_text_pushed_mode((FormTextPushedMode)(std::get<int32_t>(encodable_text_pushed_mode)));
  }
  auto& encodable_tax_line = list[4];
  if (!encodable_tax_line.IsNull()) {
    decoded.set_tax_line(std::get<std::string>(encodable_tax_line));
  }
  auto& encodable_total_line = list[5];
  if (!encodable_total_line.IsNull()) {
    decoded.set_total_line(std::get<std::string>(encodable_total_line));
  }
  auto& encodable_image_name = list[6];
  if (!encodable_image_name.IsNull()) {
    decoded.set_image_name(std::get<std::string>(encodable_image_name));
  }
  auto& encodable_image_description = list[7];
  if (!encodable_image_description.IsNull()) {
    decoded.set_image_description(std::get<std::string>(encodable_image_description));
  }
  auto& encodable_line_item_action = list[8];
  if (!encodable_line_item_action.IsNull()) {
    decoded.set_line_item_action((FormLineItemAction)(std::get<int32_t>(encodable_line_item_action)));
  }
  auto& encodable_item_indices = list[9];
  if (!encodable_item_indices.IsNull()) {
    decoded.set_item_indices(std::get<EncodableList>(encodable_item_indices));
  }
  return decoded;
}

// FormItemDetail

FormItemDetail::FormItemDetail() {}

FormItemDetail::FormItemDetail(
  const std::string* product_name,
  const std::string* plu_code,
  const std::string* price,
  const FormItemDetailUnit* unit,
  const std::string* unit_price,
  const std::string* tax,
  const std::string* quantity,
  const std::string* product_image_name,
  const std::string* product_image_description)
 : product_name_(product_name ? std::optional<std::string>(*product_name) : std::nullopt),
    plu_code_(plu_code ? std::optional<std::string>(*plu_code) : std::nullopt),
    price_(price ? std::optional<std::string>(*price) : std::nullopt),
    unit_(unit ? std::optional<FormItemDetailUnit>(*unit) : std::nullopt),
    unit_price_(unit_price ? std::optional<std::string>(*unit_price) : std::nullopt),
    tax_(tax ? std::optional<std::string>(*tax) : std::nullopt),
    quantity_(quantity ? std::optional<std::string>(*quantity) : std::nullopt),
    product_image_name_(product_image_name ? std::optional<std::string>(*product_image_name) : std::nullopt),
    product_image_description_(product_image_description ? std::optional<std::string>(*product_image_description) : std::nullopt) {}

const std::string* FormItemDetail::product_name() const {
  return product_name_ ? &(*product_name_) : nullptr;
}

void FormItemDetail::set_product_name(const std::string_view* value_arg) {
  product_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_product_name(std::string_view value_arg) {
  product_name_ = value_arg;
}


const std::string* FormItemDetail::plu_code() const {
  return plu_code_ ? &(*plu_code_) : nullptr;
}

void FormItemDetail::set_plu_code(const std::string_view* value_arg) {
  plu_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_plu_code(std::string_view value_arg) {
  plu_code_ = value_arg;
}


const std::string* FormItemDetail::price() const {
  return price_ ? &(*price_) : nullptr;
}

void FormItemDetail::set_price(const std::string_view* value_arg) {
  price_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_price(std::string_view value_arg) {
  price_ = value_arg;
}


const FormItemDetailUnit* FormItemDetail::unit() const {
  return unit_ ? &(*unit_) : nullptr;
}

void FormItemDetail::set_unit(const FormItemDetailUnit* value_arg) {
  unit_ = value_arg ? std::optional<FormItemDetailUnit>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_unit(const FormItemDetailUnit& value_arg) {
  unit_ = value_arg;
}


const std::string* FormItemDetail::unit_price() const {
  return unit_price_ ? &(*unit_price_) : nullptr;
}

void FormItemDetail::set_unit_price(const std::string_view* value_arg) {
  unit_price_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_unit_price(std::string_view value_arg) {
  unit_price_ = value_arg;
}


const std::string* FormItemDetail::tax() const {
  return tax_ ? &(*tax_) : nullptr;
}

void FormItemDetail::set_tax(const std::string_view* value_arg) {
  tax_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_tax(std::string_view value_arg) {
  tax_ = value_arg;
}


const std::string* FormItemDetail::quantity() const {
  return quantity_ ? &(*quantity_) : nullptr;
}

void FormItemDetail::set_quantity(const std::string_view* value_arg) {
  quantity_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_quantity(std::string_view value_arg) {
  quantity_ = value_arg;
}


const std::string* FormItemDetail::product_image_name() const {
  return product_image_name_ ? &(*product_image_name_) : nullptr;
}

void FormItemDetail::set_product_image_name(const std::string_view* value_arg) {
  product_image_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_product_image_name(std::string_view value_arg) {
  product_image_name_ = value_arg;
}


const std::string* FormItemDetail::product_image_description() const {
  return product_image_description_ ? &(*product_image_description_) : nullptr;
}

void FormItemDetail::set_product_image_description(const std::string_view* value_arg) {
  product_image_description_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormItemDetail::set_product_image_description(std::string_view value_arg) {
  product_image_description_ = value_arg;
}


EncodableList FormItemDetail::ToEncodableList() const {
  EncodableList list;
  list.reserve(9);
  list.push_back(product_name_ ? EncodableValue(*product_name_) : EncodableValue());
  list.push_back(plu_code_ ? EncodableValue(*plu_code_) : EncodableValue());
  list.push_back(price_ ? EncodableValue(*price_) : EncodableValue());
  list.push_back(unit_ ? EncodableValue((int)(*unit_)) : EncodableValue());
  list.push_back(unit_price_ ? EncodableValue(*unit_price_) : EncodableValue());
  list.push_back(tax_ ? EncodableValue(*tax_) : EncodableValue());
  list.push_back(quantity_ ? EncodableValue(*quantity_) : EncodableValue());
  list.push_back(product_image_name_ ? EncodableValue(*product_image_name_) : EncodableValue());
  list.push_back(product_image_description_ ? EncodableValue(*product_image_description_) : EncodableValue());
  return list;
}

FormItemDetail FormItemDetail::FromEncodableList(const EncodableList& list) {
  FormItemDetail decoded;
  auto& encodable_product_name = list[0];
  if (!encodable_product_name.IsNull()) {
    decoded.set_product_name(std::get<std::string>(encodable_product_name));
  }
  auto& encodable_plu_code = list[1];
  if (!encodable_plu_code.IsNull()) {
    decoded.set_plu_code(std::get<std::string>(encodable_plu_code));
  }
  auto& encodable_price = list[2];
  if (!encodable_price.IsNull()) {
    decoded.set_price(std::get<std::string>(encodable_price));
  }
  auto& encodable_unit = list[3];
  if (!encodable_unit.IsNull()) {
    decoded.set_unit((FormItemDetailUnit)(std::get<int32_t>(encodable_unit)));
  }
  auto& encodable_unit_price = list[4];
  if (!encodable_unit_price.IsNull()) {
    decoded.set_unit_price(std::get<std::string>(encodable_unit_price));
  }
  auto& encodable_tax = list[5];
  if (!encodable_tax.IsNull()) {
    decoded.set_tax(std::get<std::string>(encodable_tax));
  }
  auto& encodable_quantity = list[6];
  if (!encodable_quantity.IsNull()) {
    decoded.set_quantity(std::get<std::string>(encodable_quantity));
  }
  auto& encodable_product_image_name = list[7];
  if (!encodable_product_image_name.IsNull()) {
    decoded.set_product_image_name(std::get<std::string>(encodable_product_image_name));
  }
  auto& encodable_product_image_description = list[8];
  if (!encodable_product_image_description.IsNull()) {
    decoded.set_product_image_description(std::get<std::string>(encodable_product_image_description));
  }
  return decoded;
}

// FormShowItemRequest

FormShowItemRequest::FormShowItemRequest() {}

FormShowItemRequest::FormShowItemRequest(
  const std::string* title,
  const FormTextPushedMode* text_pushed_mode,
  const std::string* tax_line,
  const std::string* total_line,
  const EncodableList* item_details,
  const FormLineItemAction* line_item_action,
  const EncodableList* item_indices)
 : title_(title ? std::optional<std::string>(*title) : std::nullopt),
    text_pushed_mode_(text_pushed_mode ? std::optional<FormTextPushedMode>(*text_pushed_mode) : std::nullopt),
    tax_line_(tax_line ? std::optional<std::string>(*tax_line) : std::nullopt),
    total_line_(total_line ? std::optional<std::string>(*total_line) : std::nullopt),
    item_details_(item_details ? std::optional<EncodableList>(*item_details) : std::nullopt),
    line_item_action_(line_item_action ? std::optional<FormLineItemAction>(*line_item_action) : std::nullopt),
    item_indices_(item_indices ? std::optional<EncodableList>(*item_indices) : std::nullopt) {}

const std::string* FormShowItemRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormShowItemRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const FormTextPushedMode* FormShowItemRequest::text_pushed_mode() const {
  return text_pushed_mode_ ? &(*text_pushed_mode_) : nullptr;
}

void FormShowItemRequest::set_text_pushed_mode(const FormTextPushedMode* value_arg) {
  text_pushed_mode_ = value_arg ? std::optional<FormTextPushedMode>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_text_pushed_mode(const FormTextPushedMode& value_arg) {
  text_pushed_mode_ = value_arg;
}


const std::string* FormShowItemRequest::tax_line() const {
  return tax_line_ ? &(*tax_line_) : nullptr;
}

void FormShowItemRequest::set_tax_line(const std::string_view* value_arg) {
  tax_line_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_tax_line(std::string_view value_arg) {
  tax_line_ = value_arg;
}


const std::string* FormShowItemRequest::total_line() const {
  return total_line_ ? &(*total_line_) : nullptr;
}

void FormShowItemRequest::set_total_line(const std::string_view* value_arg) {
  total_line_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_total_line(std::string_view value_arg) {
  total_line_ = value_arg;
}


const EncodableList* FormShowItemRequest::item_details() const {
  return item_details_ ? &(*item_details_) : nullptr;
}

void FormShowItemRequest::set_item_details(const EncodableList* value_arg) {
  item_details_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_item_details(const EncodableList& value_arg) {
  item_details_ = value_arg;
}


const FormLineItemAction* FormShowItemRequest::line_item_action() const {
  return line_item_action_ ? &(*line_item_action_) : nullptr;
}

void FormShowItemRequest::set_line_item_action(const FormLineItemAction* value_arg) {
  line_item_action_ = value_arg ? std::optional<FormLineItemAction>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_line_item_action(const FormLineItemAction& value_arg) {
  line_item_action_ = value_arg;
}


const EncodableList* FormShowItemRequest::item_indices() const {
  return item_indices_ ? &(*item_indices_) : nullptr;
}

void FormShowItemRequest::set_item_indices(const EncodableList* value_arg) {
  item_indices_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FormShowItemRequest::set_item_indices(const EncodableList& value_arg) {
  item_indices_ = value_arg;
}


EncodableList FormShowItemRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(text_pushed_mode_ ? EncodableValue((int)(*text_pushed_mode_)) : EncodableValue());
  list.push_back(tax_line_ ? EncodableValue(*tax_line_) : EncodableValue());
  list.push_back(total_line_ ? EncodableValue(*total_line_) : EncodableValue());
  list.push_back(item_details_ ? EncodableValue(*item_details_) : EncodableValue());
  list.push_back(line_item_action_ ? EncodableValue((int)(*line_item_action_)) : EncodableValue());
  list.push_back(item_indices_ ? EncodableValue(*item_indices_) : EncodableValue());
  return list;
}

FormShowItemRequest FormShowItemRequest::FromEncodableList(const EncodableList& list) {
  FormShowItemRequest decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_text_pushed_mode = list[1];
  if (!encodable_text_pushed_mode.IsNull()) {
    decoded.set_text_pushed_mode((FormTextPushedMode)(std::get<int32_t>(encodable_text_pushed_mode)));
  }
  auto& encodable_tax_line = list[2];
  if (!encodable_tax_line.IsNull()) {
    decoded.set_tax_line(std::get<std::string>(encodable_tax_line));
  }
  auto& encodable_total_line = list[3];
  if (!encodable_total_line.IsNull()) {
    decoded.set_total_line(std::get<std::string>(encodable_total_line));
  }
  auto& encodable_item_details = list[4];
  if (!encodable_item_details.IsNull()) {
    decoded.set_item_details(std::get<EncodableList>(encodable_item_details));
  }
  auto& encodable_line_item_action = list[5];
  if (!encodable_line_item_action.IsNull()) {
    decoded.set_line_item_action((FormLineItemAction)(std::get<int32_t>(encodable_line_item_action)));
  }
  auto& encodable_item_indices = list[6];
  if (!encodable_item_indices.IsNull()) {
    decoded.set_item_indices(std::get<EncodableList>(encodable_item_indices));
  }
  return decoded;
}

// FormClearMessageRequest

FormClearMessageRequest::FormClearMessageRequest() {}

FormClearMessageRequest::FormClearMessageRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* FormClearMessageRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void FormClearMessageRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormClearMessageRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList FormClearMessageRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

FormClearMessageRequest FormClearMessageRequest::FromEncodableList(const EncodableList& list) {
  FormClearMessageRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// FormInputTextRequest

FormInputTextRequest::FormInputTextRequest() {}

FormInputTextRequest::FormInputTextRequest(
  const FormInputTextPrompt* title,
  const FormInputType* input_type,
  const std::string* min_length,
  const std::string* max_length,
  const std::string* default_value,
  const std::string* timeout,
  const FormContinuousScreen* continuous_screen)
 : title_(title ? std::optional<FormInputTextPrompt>(*title) : std::nullopt),
    input_type_(input_type ? std::optional<FormInputType>(*input_type) : std::nullopt),
    min_length_(min_length ? std::optional<std::string>(*min_length) : std::nullopt),
    max_length_(max_length ? std::optional<std::string>(*max_length) : std::nullopt),
    default_value_(default_value ? std::optional<std::string>(*default_value) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FormContinuousScreen>(*continuous_screen) : std::nullopt) {}

const FormInputTextPrompt* FormInputTextRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormInputTextRequest::set_title(const FormInputTextPrompt* value_arg) {
  title_ = value_arg ? std::optional<FormInputTextPrompt>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_title(const FormInputTextPrompt& value_arg) {
  title_ = value_arg;
}


const FormInputType* FormInputTextRequest::input_type() const {
  return input_type_ ? &(*input_type_) : nullptr;
}

void FormInputTextRequest::set_input_type(const FormInputType* value_arg) {
  input_type_ = value_arg ? std::optional<FormInputType>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_input_type(const FormInputType& value_arg) {
  input_type_ = value_arg;
}


const std::string* FormInputTextRequest::min_length() const {
  return min_length_ ? &(*min_length_) : nullptr;
}

void FormInputTextRequest::set_min_length(const std::string_view* value_arg) {
  min_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_min_length(std::string_view value_arg) {
  min_length_ = value_arg;
}


const std::string* FormInputTextRequest::max_length() const {
  return max_length_ ? &(*max_length_) : nullptr;
}

void FormInputTextRequest::set_max_length(const std::string_view* value_arg) {
  max_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_max_length(std::string_view value_arg) {
  max_length_ = value_arg;
}


const std::string* FormInputTextRequest::default_value() const {
  return default_value_ ? &(*default_value_) : nullptr;
}

void FormInputTextRequest::set_default_value(const std::string_view* value_arg) {
  default_value_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_default_value(std::string_view value_arg) {
  default_value_ = value_arg;
}


const std::string* FormInputTextRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FormInputTextRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FormContinuousScreen* FormInputTextRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FormInputTextRequest::set_continuous_screen(const FormContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FormContinuousScreen>(*value_arg) : std::nullopt;
}

void FormInputTextRequest::set_continuous_screen(const FormContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


EncodableList FormInputTextRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(title_ ? EncodableValue((int)(*title_)) : EncodableValue());
  list.push_back(input_type_ ? EncodableValue((int)(*input_type_)) : EncodableValue());
  list.push_back(min_length_ ? EncodableValue(*min_length_) : EncodableValue());
  list.push_back(max_length_ ? EncodableValue(*max_length_) : EncodableValue());
  list.push_back(default_value_ ? EncodableValue(*default_value_) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  return list;
}

FormInputTextRequest FormInputTextRequest::FromEncodableList(const EncodableList& list) {
  FormInputTextRequest decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title((FormInputTextPrompt)(std::get<int32_t>(encodable_title)));
  }
  auto& encodable_input_type = list[1];
  if (!encodable_input_type.IsNull()) {
    decoded.set_input_type((FormInputType)(std::get<int32_t>(encodable_input_type)));
  }
  auto& encodable_min_length = list[2];
  if (!encodable_min_length.IsNull()) {
    decoded.set_min_length(std::get<std::string>(encodable_min_length));
  }
  auto& encodable_max_length = list[3];
  if (!encodable_max_length.IsNull()) {
    decoded.set_max_length(std::get<std::string>(encodable_max_length));
  }
  auto& encodable_default_value = list[4];
  if (!encodable_default_value.IsNull()) {
    decoded.set_default_value(std::get<std::string>(encodable_default_value));
  }
  auto& encodable_timeout = list[5];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_continuous_screen = list[6];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FormContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  return decoded;
}

// FormShowMessageCenterRequest

FormShowMessageCenterRequest::FormShowMessageCenterRequest() {}

FormShowMessageCenterRequest::FormShowMessageCenterRequest(
  const std::string* title,
  const std::string* message1,
  const std::string* message2,
  const std::string* timeout,
  const FormPinpadType* pinpad_type,
  const std::string* icon_name)
 : title_(title ? std::optional<std::string>(*title) : std::nullopt),
    message1_(message1 ? std::optional<std::string>(*message1) : std::nullopt),
    message2_(message2 ? std::optional<std::string>(*message2) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FormPinpadType>(*pinpad_type) : std::nullopt),
    icon_name_(icon_name ? std::optional<std::string>(*icon_name) : std::nullopt) {}

const std::string* FormShowMessageCenterRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FormShowMessageCenterRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const std::string* FormShowMessageCenterRequest::message1() const {
  return message1_ ? &(*message1_) : nullptr;
}

void FormShowMessageCenterRequest::set_message1(const std::string_view* value_arg) {
  message1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterRequest::set_message1(std::string_view value_arg) {
  message1_ = value_arg;
}


const std::string* FormShowMessageCenterRequest::message2() const {
  return message2_ ? &(*message2_) : nullptr;
}

void FormShowMessageCenterRequest::set_message2(const std::string_view* value_arg) {
  message2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterRequest::set_message2(std::string_view value_arg) {
  message2_ = value_arg;
}


const std::string* FormShowMessageCenterRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FormShowMessageCenterRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FormPinpadType* FormShowMessageCenterRequest::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FormShowMessageCenterRequest::set_pinpad_type(const FormPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FormPinpadType>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterRequest::set_pinpad_type(const FormPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


const std::string* FormShowMessageCenterRequest::icon_name() const {
  return icon_name_ ? &(*icon_name_) : nullptr;
}

void FormShowMessageCenterRequest::set_icon_name(const std::string_view* value_arg) {
  icon_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterRequest::set_icon_name(std::string_view value_arg) {
  icon_name_ = value_arg;
}


EncodableList FormShowMessageCenterRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(6);
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(message1_ ? EncodableValue(*message1_) : EncodableValue());
  list.push_back(message2_ ? EncodableValue(*message2_) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  list.push_back(icon_name_ ? EncodableValue(*icon_name_) : EncodableValue());
  return list;
}

FormShowMessageCenterRequest FormShowMessageCenterRequest::FromEncodableList(const EncodableList& list) {
  FormShowMessageCenterRequest decoded;
  auto& encodable_title = list[0];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_message1 = list[1];
  if (!encodable_message1.IsNull()) {
    decoded.set_message1(std::get<std::string>(encodable_message1));
  }
  auto& encodable_message2 = list[2];
  if (!encodable_message2.IsNull()) {
    decoded.set_message2(std::get<std::string>(encodable_message2));
  }
  auto& encodable_timeout = list[3];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_pinpad_type = list[4];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FormPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  auto& encodable_icon_name = list[5];
  if (!encodable_icon_name.IsNull()) {
    decoded.set_icon_name(std::get<std::string>(encodable_icon_name));
  }
  return decoded;
}

// FormShowMessageCenterResponse

FormShowMessageCenterResponse::FormShowMessageCenterResponse() {}

FormShowMessageCenterResponse::FormShowMessageCenterResponse(
  const std::string* response_code,
  const std::string* response_message,
  const FormPinpadType* pinpad_type)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FormPinpadType>(*pinpad_type) : std::nullopt) {}

const std::string* FormShowMessageCenterResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormShowMessageCenterResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormShowMessageCenterResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormShowMessageCenterResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const FormPinpadType* FormShowMessageCenterResponse::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FormShowMessageCenterResponse::set_pinpad_type(const FormPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FormPinpadType>(*value_arg) : std::nullopt;
}

void FormShowMessageCenterResponse::set_pinpad_type(const FormPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


EncodableList FormShowMessageCenterResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  return list;
}

FormShowMessageCenterResponse FormShowMessageCenterResponse::FromEncodableList(const EncodableList& list) {
  FormShowMessageCenterResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_pinpad_type = list[2];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FormPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  return decoded;
}

// FormClearMessageResponse

FormClearMessageResponse::FormClearMessageResponse() {}

FormClearMessageResponse::FormClearMessageResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* FormClearMessageResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormClearMessageResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormClearMessageResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormClearMessageResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormClearMessageResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormClearMessageResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList FormClearMessageResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

FormClearMessageResponse FormClearMessageResponse::FromEncodableList(const EncodableList& list) {
  FormClearMessageResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// FormInputTextResponse

FormInputTextResponse::FormInputTextResponse() {}

FormInputTextResponse::FormInputTextResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* text)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    text_(text ? std::optional<std::string>(*text) : std::nullopt) {}

const std::string* FormInputTextResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormInputTextResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormInputTextResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormInputTextResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FormInputTextResponse::text() const {
  return text_ ? &(*text_) : nullptr;
}

void FormInputTextResponse::set_text(const std::string_view* value_arg) {
  text_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormInputTextResponse::set_text(std::string_view value_arg) {
  text_ = value_arg;
}


EncodableList FormInputTextResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(text_ ? EncodableValue(*text_) : EncodableValue());
  return list;
}

FormInputTextResponse FormInputTextResponse::FromEncodableList(const EncodableList& list) {
  FormInputTextResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_text = list[2];
  if (!encodable_text.IsNull()) {
    decoded.set_text(std::get<std::string>(encodable_text));
  }
  return decoded;
}

// FormRemoveCardResponse

FormRemoveCardResponse::FormRemoveCardResponse() {}

FormRemoveCardResponse::FormRemoveCardResponse(
  const std::string* response_code,
  const std::string* response_message,
  const FormPinpadType* pinpad_type)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FormPinpadType>(*pinpad_type) : std::nullopt) {}

const std::string* FormRemoveCardResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormRemoveCardResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormRemoveCardResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormRemoveCardResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormRemoveCardResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormRemoveCardResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const FormPinpadType* FormRemoveCardResponse::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FormRemoveCardResponse::set_pinpad_type(const FormPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FormPinpadType>(*value_arg) : std::nullopt;
}

void FormRemoveCardResponse::set_pinpad_type(const FormPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


EncodableList FormRemoveCardResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  return list;
}

FormRemoveCardResponse FormRemoveCardResponse::FromEncodableList(const EncodableList& list) {
  FormRemoveCardResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_pinpad_type = list[2];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FormPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  return decoded;
}

// FormShowDialogFormResponse

FormShowDialogFormResponse::FormShowDialogFormResponse() {}

FormShowDialogFormResponse::FormShowDialogFormResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* label_selected)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    label_selected_(label_selected ? std::optional<std::string>(*label_selected) : std::nullopt) {}

const std::string* FormShowDialogFormResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormShowDialogFormResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormShowDialogFormResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormShowDialogFormResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FormShowDialogFormResponse::label_selected() const {
  return label_selected_ ? &(*label_selected_) : nullptr;
}

void FormShowDialogFormResponse::set_label_selected(const std::string_view* value_arg) {
  label_selected_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogFormResponse::set_label_selected(std::string_view value_arg) {
  label_selected_ = value_arg;
}


EncodableList FormShowDialogFormResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(label_selected_ ? EncodableValue(*label_selected_) : EncodableValue());
  return list;
}

FormShowDialogFormResponse FormShowDialogFormResponse::FromEncodableList(const EncodableList& list) {
  FormShowDialogFormResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_label_selected = list[2];
  if (!encodable_label_selected.IsNull()) {
    decoded.set_label_selected(std::get<std::string>(encodable_label_selected));
  }
  return decoded;
}

// FormShowDialogResponse

FormShowDialogResponse::FormShowDialogResponse() {}

FormShowDialogResponse::FormShowDialogResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* button_number)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    button_number_(button_number ? std::optional<std::string>(*button_number) : std::nullopt) {}

const std::string* FormShowDialogResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormShowDialogResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormShowDialogResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormShowDialogResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FormShowDialogResponse::button_number() const {
  return button_number_ ? &(*button_number_) : nullptr;
}

void FormShowDialogResponse::set_button_number(const std::string_view* value_arg) {
  button_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowDialogResponse::set_button_number(std::string_view value_arg) {
  button_number_ = value_arg;
}


EncodableList FormShowDialogResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(button_number_ ? EncodableValue(*button_number_) : EncodableValue());
  return list;
}

FormShowDialogResponse FormShowDialogResponse::FromEncodableList(const EncodableList& list) {
  FormShowDialogResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_button_number = list[2];
  if (!encodable_button_number.IsNull()) {
    decoded.set_button_number(std::get<std::string>(encodable_button_number));
  }
  return decoded;
}

// FormShowMessageResponse

FormShowMessageResponse::FormShowMessageResponse() {}

FormShowMessageResponse::FormShowMessageResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* FormShowMessageResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormShowMessageResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormShowMessageResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormShowMessageResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowMessageResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList FormShowMessageResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

FormShowMessageResponse FormShowMessageResponse::FromEncodableList(const EncodableList& list) {
  FormShowMessageResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// FormShowItemResponse

FormShowItemResponse::FormShowItemResponse() {}

FormShowItemResponse::FormShowItemResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* FormShowItemResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormShowItemResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowItemResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormShowItemResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormShowItemResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowItemResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList FormShowItemResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

FormShowItemResponse FormShowItemResponse::FromEncodableList(const EncodableList& list) {
  FormShowItemResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}

// FormShowTextBoxResponse

FormShowTextBoxResponse::FormShowTextBoxResponse() {}

FormShowTextBoxResponse::FormShowTextBoxResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* button_number,
  const FormSignatureStatus* sign_status,
  const std::string* signature_data,
  const std::string* text)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    button_number_(button_number ? std::optional<std::string>(*button_number) : std::nullopt),
    sign_status_(sign_status ? std::optional<FormSignatureStatus>(*sign_status) : std::nullopt),
    signature_data_(signature_data ? std::optional<std::string>(*signature_data) : std::nullopt),
    text_(text ? std::optional<std::string>(*text) : std::nullopt) {}

const std::string* FormShowTextBoxResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FormShowTextBoxResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FormShowTextBoxResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FormShowTextBoxResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FormShowTextBoxResponse::button_number() const {
  return button_number_ ? &(*button_number_) : nullptr;
}

void FormShowTextBoxResponse::set_button_number(const std::string_view* value_arg) {
  button_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxResponse::set_button_number(std::string_view value_arg) {
  button_number_ = value_arg;
}


const FormSignatureStatus* FormShowTextBoxResponse::sign_status() const {
  return sign_status_ ? &(*sign_status_) : nullptr;
}

void FormShowTextBoxResponse::set_sign_status(const FormSignatureStatus* value_arg) {
  sign_status_ = value_arg ? std::optional<FormSignatureStatus>(*value_arg) : std::nullopt;
}

void FormShowTextBoxResponse::set_sign_status(const FormSignatureStatus& value_arg) {
  sign_status_ = value_arg;
}


const std::string* FormShowTextBoxResponse::signature_data() const {
  return signature_data_ ? &(*signature_data_) : nullptr;
}

void FormShowTextBoxResponse::set_signature_data(const std::string_view* value_arg) {
  signature_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxResponse::set_signature_data(std::string_view value_arg) {
  signature_data_ = value_arg;
}


const std::string* FormShowTextBoxResponse::text() const {
  return text_ ? &(*text_) : nullptr;
}

void FormShowTextBoxResponse::set_text(const std::string_view* value_arg) {
  text_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FormShowTextBoxResponse::set_text(std::string_view value_arg) {
  text_ = value_arg;
}


EncodableList FormShowTextBoxResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(6);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(button_number_ ? EncodableValue(*button_number_) : EncodableValue());
  list.push_back(sign_status_ ? EncodableValue((int)(*sign_status_)) : EncodableValue());
  list.push_back(signature_data_ ? EncodableValue(*signature_data_) : EncodableValue());
  list.push_back(text_ ? EncodableValue(*text_) : EncodableValue());
  return list;
}

FormShowTextBoxResponse FormShowTextBoxResponse::FromEncodableList(const EncodableList& list) {
  FormShowTextBoxResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_button_number = list[2];
  if (!encodable_button_number.IsNull()) {
    decoded.set_button_number(std::get<std::string>(encodable_button_number));
  }
  auto& encodable_sign_status = list[3];
  if (!encodable_sign_status.IsNull()) {
    decoded.set_sign_status((FormSignatureStatus)(std::get<int32_t>(encodable_sign_status)));
  }
  auto& encodable_signature_data = list[4];
  if (!encodable_signature_data.IsNull()) {
    decoded.set_signature_data(std::get<std::string>(encodable_signature_data));
  }
  auto& encodable_text = list[5];
  if (!encodable_text.IsNull()) {
    decoded.set_text(std::get<std::string>(encodable_text));
  }
  return decoded;
}


POSLinkFormApiCodecSerializer::POSLinkFormApiCodecSerializer() {}

EncodableValue POSLinkFormApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(FormClearMessageRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(FormClearMessageResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(FormInputTextRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(FormInputTextResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(FormItemDetail::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(FormRemoveCardRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(FormRemoveCardResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(FormSdButton::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 136:
      return CustomEncodableValue(FormShowDialogFormRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 137:
      return CustomEncodableValue(FormShowDialogFormResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 138:
      return CustomEncodableValue(FormShowDialogRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 139:
      return CustomEncodableValue(FormShowDialogResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 140:
      return CustomEncodableValue(FormShowItemRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 141:
      return CustomEncodableValue(FormShowItemResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 142:
      return CustomEncodableValue(FormShowMessageCenterRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 143:
      return CustomEncodableValue(FormShowMessageCenterResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 144:
      return CustomEncodableValue(FormShowMessageRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 145:
      return CustomEncodableValue(FormShowMessageResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 146:
      return CustomEncodableValue(FormShowTextBoxRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 147:
      return CustomEncodableValue(FormShowTextBoxResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 148:
      return CustomEncodableValue(FormStbButton::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkFormApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(FormClearMessageRequest)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<FormClearMessageRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormClearMessageResponse)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<FormClearMessageResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormInputTextRequest)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<FormInputTextRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormInputTextResponse)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<FormInputTextResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormItemDetail)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<FormItemDetail>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormRemoveCardRequest)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<FormRemoveCardRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormRemoveCardResponse)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<FormRemoveCardResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormSdButton)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<FormSdButton>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowDialogFormRequest)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<FormShowDialogFormRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowDialogFormResponse)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<FormShowDialogFormResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowDialogRequest)) {
      stream->WriteByte(138);
      WriteValue(EncodableValue(std::any_cast<FormShowDialogRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowDialogResponse)) {
      stream->WriteByte(139);
      WriteValue(EncodableValue(std::any_cast<FormShowDialogResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowItemRequest)) {
      stream->WriteByte(140);
      WriteValue(EncodableValue(std::any_cast<FormShowItemRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowItemResponse)) {
      stream->WriteByte(141);
      WriteValue(EncodableValue(std::any_cast<FormShowItemResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowMessageCenterRequest)) {
      stream->WriteByte(142);
      WriteValue(EncodableValue(std::any_cast<FormShowMessageCenterRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowMessageCenterResponse)) {
      stream->WriteByte(143);
      WriteValue(EncodableValue(std::any_cast<FormShowMessageCenterResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowMessageRequest)) {
      stream->WriteByte(144);
      WriteValue(EncodableValue(std::any_cast<FormShowMessageRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowMessageResponse)) {
      stream->WriteByte(145);
      WriteValue(EncodableValue(std::any_cast<FormShowMessageResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowTextBoxRequest)) {
      stream->WriteByte(146);
      WriteValue(EncodableValue(std::any_cast<FormShowTextBoxRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormShowTextBoxResponse)) {
      stream->WriteByte(147);
      WriteValue(EncodableValue(std::any_cast<FormShowTextBoxResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FormStbButton)) {
      stream->WriteByte(148);
      WriteValue(EncodableValue(std::any_cast<FormStbButton>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkFormApi.
const flutter::StandardMessageCodec& POSLinkFormApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkFormApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkFormApi` to handle messages through the `binary_messenger`.
void POSLinkFormApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkFormApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.showMessageCenter", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormShowMessageCenterRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ShowMessageCenter(req_arg, [reply](ErrorOr<FormShowMessageCenterResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.inputText", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormInputTextRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->InputText(req_arg, [reply](ErrorOr<FormInputTextResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.clearMessage", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormClearMessageRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ClearMessage(req_arg, [reply](ErrorOr<FormClearMessageResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.showItem", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormShowItemRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ShowItem(req_arg, [reply](ErrorOr<FormShowItemResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.showMessage", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormShowMessageRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ShowMessage(req_arg, [reply](ErrorOr<FormShowMessageResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.showDialog", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormShowDialogRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ShowDialog(req_arg, [reply](ErrorOr<FormShowDialogResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.showTextBox", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormShowTextBoxRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ShowTextBox(req_arg, [reply](ErrorOr<FormShowTextBoxResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.showDialogForm", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormShowDialogFormRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->ShowDialogForm(req_arg, [reply](ErrorOr<FormShowDialogFormResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFormApi.removeCard", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FormRemoveCardRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->RemoveCard(req_arg, [reply](ErrorOr<FormRemoveCardResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkFormApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkFormApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkForm
