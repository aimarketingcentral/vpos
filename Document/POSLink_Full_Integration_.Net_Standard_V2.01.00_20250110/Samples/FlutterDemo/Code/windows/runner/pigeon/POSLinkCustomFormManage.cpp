// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkCustomFormManage.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkCustomFormManage {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// CustomFormManageRunFormRequest

CustomFormManageRunFormRequest::CustomFormManageRunFormRequest() {}

CustomFormManageRunFormRequest::CustomFormManageRunFormRequest(
  const std::string* form_name,
  const std::string* timeout,
  const CustomFormManageContinuousScreen* continuous_screen)
 : form_name_(form_name ? std::optional<std::string>(*form_name) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<CustomFormManageContinuousScreen>(*continuous_screen) : std::nullopt) {}

const std::string* CustomFormManageRunFormRequest::form_name() const {
  return form_name_ ? &(*form_name_) : nullptr;
}

void CustomFormManageRunFormRequest::set_form_name(const std::string_view* value_arg) {
  form_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageRunFormRequest::set_form_name(std::string_view value_arg) {
  form_name_ = value_arg;
}


const std::string* CustomFormManageRunFormRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void CustomFormManageRunFormRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageRunFormRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const CustomFormManageContinuousScreen* CustomFormManageRunFormRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void CustomFormManageRunFormRequest::set_continuous_screen(const CustomFormManageContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<CustomFormManageContinuousScreen>(*value_arg) : std::nullopt;
}

void CustomFormManageRunFormRequest::set_continuous_screen(const CustomFormManageContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


EncodableList CustomFormManageRunFormRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(form_name_ ? EncodableValue(*form_name_) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  return list;
}

CustomFormManageRunFormRequest CustomFormManageRunFormRequest::FromEncodableList(const EncodableList& list) {
  CustomFormManageRunFormRequest decoded;
  auto& encodable_form_name = list[0];
  if (!encodable_form_name.IsNull()) {
    decoded.set_form_name(std::get<std::string>(encodable_form_name));
  }
  auto& encodable_timeout = list[1];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_continuous_screen = list[2];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((CustomFormManageContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  return decoded;
}

// CustomFormManageSetVarListRequest

CustomFormManageSetVarListRequest::CustomFormManageSetVarListRequest() {}

CustomFormManageSetVarListRequest::CustomFormManageSetVarListRequest(const std::string* var_list)
 : var_list_(var_list ? std::optional<std::string>(*var_list) : std::nullopt) {}

const std::string* CustomFormManageSetVarListRequest::var_list() const {
  return var_list_ ? &(*var_list_) : nullptr;
}

void CustomFormManageSetVarListRequest::set_var_list(const std::string_view* value_arg) {
  var_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageSetVarListRequest::set_var_list(std::string_view value_arg) {
  var_list_ = value_arg;
}


EncodableList CustomFormManageSetVarListRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(var_list_ ? EncodableValue(*var_list_) : EncodableValue());
  return list;
}

CustomFormManageSetVarListRequest CustomFormManageSetVarListRequest::FromEncodableList(const EncodableList& list) {
  CustomFormManageSetVarListRequest decoded;
  auto& encodable_var_list = list[0];
  if (!encodable_var_list.IsNull()) {
    decoded.set_var_list(std::get<std::string>(encodable_var_list));
  }
  return decoded;
}

// CustomFormManageGetVarListRequest

CustomFormManageGetVarListRequest::CustomFormManageGetVarListRequest() {}

CustomFormManageGetVarListRequest::CustomFormManageGetVarListRequest(const std::string* var_name_list)
 : var_name_list_(var_name_list ? std::optional<std::string>(*var_name_list) : std::nullopt) {}

const std::string* CustomFormManageGetVarListRequest::var_name_list() const {
  return var_name_list_ ? &(*var_name_list_) : nullptr;
}

void CustomFormManageGetVarListRequest::set_var_name_list(const std::string_view* value_arg) {
  var_name_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetVarListRequest::set_var_name_list(std::string_view value_arg) {
  var_name_list_ = value_arg;
}


EncodableList CustomFormManageGetVarListRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(var_name_list_ ? EncodableValue(*var_name_list_) : EncodableValue());
  return list;
}

CustomFormManageGetVarListRequest CustomFormManageGetVarListRequest::FromEncodableList(const EncodableList& list) {
  CustomFormManageGetVarListRequest decoded;
  auto& encodable_var_name_list = list[0];
  if (!encodable_var_name_list.IsNull()) {
    decoded.set_var_name_list(std::get<std::string>(encodable_var_name_list));
  }
  return decoded;
}

// CustomFormManageGetFormListRequest

CustomFormManageGetFormListRequest::CustomFormManageGetFormListRequest() {}

CustomFormManageGetFormListRequest::CustomFormManageGetFormListRequest(const CustomFormManageFormType* form_type)
 : form_type_(form_type ? std::optional<CustomFormManageFormType>(*form_type) : std::nullopt) {}

const CustomFormManageFormType* CustomFormManageGetFormListRequest::form_type() const {
  return form_type_ ? &(*form_type_) : nullptr;
}

void CustomFormManageGetFormListRequest::set_form_type(const CustomFormManageFormType* value_arg) {
  form_type_ = value_arg ? std::optional<CustomFormManageFormType>(*value_arg) : std::nullopt;
}

void CustomFormManageGetFormListRequest::set_form_type(const CustomFormManageFormType& value_arg) {
  form_type_ = value_arg;
}


EncodableList CustomFormManageGetFormListRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(form_type_ ? EncodableValue((int)(*form_type_)) : EncodableValue());
  return list;
}

CustomFormManageGetFormListRequest CustomFormManageGetFormListRequest::FromEncodableList(const EncodableList& list) {
  CustomFormManageGetFormListRequest decoded;
  auto& encodable_form_type = list[0];
  if (!encodable_form_type.IsNull()) {
    decoded.set_form_type((CustomFormManageFormType)(std::get<int32_t>(encodable_form_type)));
  }
  return decoded;
}

// CustomFormManageGetVarListResponse

CustomFormManageGetVarListResponse::CustomFormManageGetVarListResponse() {}

CustomFormManageGetVarListResponse::CustomFormManageGetVarListResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* var_list)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    var_list_(var_list ? std::optional<std::string>(*var_list) : std::nullopt) {}

const std::string* CustomFormManageGetVarListResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void CustomFormManageGetVarListResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetVarListResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* CustomFormManageGetVarListResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void CustomFormManageGetVarListResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetVarListResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* CustomFormManageGetVarListResponse::var_list() const {
  return var_list_ ? &(*var_list_) : nullptr;
}

void CustomFormManageGetVarListResponse::set_var_list(const std::string_view* value_arg) {
  var_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetVarListResponse::set_var_list(std::string_view value_arg) {
  var_list_ = value_arg;
}


EncodableList CustomFormManageGetVarListResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(var_list_ ? EncodableValue(*var_list_) : EncodableValue());
  return list;
}

CustomFormManageGetVarListResponse CustomFormManageGetVarListResponse::FromEncodableList(const EncodableList& list) {
  CustomFormManageGetVarListResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_var_list = list[2];
  if (!encodable_var_list.IsNull()) {
    decoded.set_var_list(std::get<std::string>(encodable_var_list));
  }
  return decoded;
}

// CustomFormManageGetFormListResponse

CustomFormManageGetFormListResponse::CustomFormManageGetFormListResponse() {}

CustomFormManageGetFormListResponse::CustomFormManageGetFormListResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* form_list)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    form_list_(form_list ? std::optional<std::string>(*form_list) : std::nullopt) {}

const std::string* CustomFormManageGetFormListResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void CustomFormManageGetFormListResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetFormListResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* CustomFormManageGetFormListResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void CustomFormManageGetFormListResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetFormListResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* CustomFormManageGetFormListResponse::form_list() const {
  return form_list_ ? &(*form_list_) : nullptr;
}

void CustomFormManageGetFormListResponse::set_form_list(const std::string_view* value_arg) {
  form_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageGetFormListResponse::set_form_list(std::string_view value_arg) {
  form_list_ = value_arg;
}


EncodableList CustomFormManageGetFormListResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(form_list_ ? EncodableValue(*form_list_) : EncodableValue());
  return list;
}

CustomFormManageGetFormListResponse CustomFormManageGetFormListResponse::FromEncodableList(const EncodableList& list) {
  CustomFormManageGetFormListResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_form_list = list[2];
  if (!encodable_form_list.IsNull()) {
    decoded.set_form_list(std::get<std::string>(encodable_form_list));
  }
  return decoded;
}

// CustomFormManageRunFormResponse

CustomFormManageRunFormResponse::CustomFormManageRunFormResponse() {}

CustomFormManageRunFormResponse::CustomFormManageRunFormResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* run_form_result)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    run_form_result_(run_form_result ? std::optional<std::string>(*run_form_result) : std::nullopt) {}

const std::string* CustomFormManageRunFormResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void CustomFormManageRunFormResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageRunFormResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* CustomFormManageRunFormResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void CustomFormManageRunFormResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageRunFormResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* CustomFormManageRunFormResponse::run_form_result() const {
  return run_form_result_ ? &(*run_form_result_) : nullptr;
}

void CustomFormManageRunFormResponse::set_run_form_result(const std::string_view* value_arg) {
  run_form_result_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageRunFormResponse::set_run_form_result(std::string_view value_arg) {
  run_form_result_ = value_arg;
}


EncodableList CustomFormManageRunFormResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(run_form_result_ ? EncodableValue(*run_form_result_) : EncodableValue());
  return list;
}

CustomFormManageRunFormResponse CustomFormManageRunFormResponse::FromEncodableList(const EncodableList& list) {
  CustomFormManageRunFormResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_run_form_result = list[2];
  if (!encodable_run_form_result.IsNull()) {
    decoded.set_run_form_result(std::get<std::string>(encodable_run_form_result));
  }
  return decoded;
}

// CustomFormManageSetVarListResponse

CustomFormManageSetVarListResponse::CustomFormManageSetVarListResponse() {}

CustomFormManageSetVarListResponse::CustomFormManageSetVarListResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* CustomFormManageSetVarListResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void CustomFormManageSetVarListResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageSetVarListResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* CustomFormManageSetVarListResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void CustomFormManageSetVarListResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CustomFormManageSetVarListResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList CustomFormManageSetVarListResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

CustomFormManageSetVarListResponse CustomFormManageSetVarListResponse::FromEncodableList(const EncodableList& list) {
  CustomFormManageSetVarListResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}


POSLinkCustomFormManageApiCodecSerializer::POSLinkCustomFormManageApiCodecSerializer() {}

EncodableValue POSLinkCustomFormManageApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(CustomFormManageGetFormListRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(CustomFormManageGetFormListResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(CustomFormManageGetVarListRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(CustomFormManageGetVarListResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(CustomFormManageRunFormRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(CustomFormManageRunFormResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(CustomFormManageSetVarListRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(CustomFormManageSetVarListResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkCustomFormManageApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(CustomFormManageGetFormListRequest)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageGetFormListRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageGetFormListResponse)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageGetFormListResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageGetVarListRequest)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageGetVarListRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageGetVarListResponse)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageGetVarListResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageRunFormRequest)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageRunFormRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageRunFormResponse)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageRunFormResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageSetVarListRequest)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageSetVarListRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(CustomFormManageSetVarListResponse)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<CustomFormManageSetVarListResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkCustomFormManageApi.
const flutter::StandardMessageCodec& POSLinkCustomFormManageApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkCustomFormManageApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkCustomFormManageApi` to handle messages through the `binary_messenger`.
void POSLinkCustomFormManageApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkCustomFormManageApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkCustomFormManageApi.getFormList", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const CustomFormManageGetFormListRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetFormList(req_arg, [reply](ErrorOr<CustomFormManageGetFormListResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkCustomFormManageApi.getVarList", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const CustomFormManageGetVarListRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetVarList(req_arg, [reply](ErrorOr<CustomFormManageGetVarListResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkCustomFormManageApi.setVarList", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const CustomFormManageSetVarListRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->SetVarList(req_arg, [reply](ErrorOr<CustomFormManageSetVarListResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkCustomFormManageApi.runForm", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const CustomFormManageRunFormRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->RunForm(req_arg, [reply](ErrorOr<CustomFormManageRunFormResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkCustomFormManageApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkCustomFormManageApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkCustomFormManage
