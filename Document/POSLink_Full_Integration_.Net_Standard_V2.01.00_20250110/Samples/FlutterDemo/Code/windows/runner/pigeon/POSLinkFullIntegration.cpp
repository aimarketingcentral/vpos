// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkFullIntegration.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkFullIntegration {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// FullIntegrationSetEmvTlvDataRequest

FullIntegrationSetEmvTlvDataRequest::FullIntegrationSetEmvTlvDataRequest() {}

FullIntegrationSetEmvTlvDataRequest::FullIntegrationSetEmvTlvDataRequest(
  const FullIntegrationTlvType* tlv_type,
  const std::string* emv_tlv_data)
 : tlv_type_(tlv_type ? std::optional<FullIntegrationTlvType>(*tlv_type) : std::nullopt),
    emv_tlv_data_(emv_tlv_data ? std::optional<std::string>(*emv_tlv_data) : std::nullopt) {}

const FullIntegrationTlvType* FullIntegrationSetEmvTlvDataRequest::tlv_type() const {
  return tlv_type_ ? &(*tlv_type_) : nullptr;
}

void FullIntegrationSetEmvTlvDataRequest::set_tlv_type(const FullIntegrationTlvType* value_arg) {
  tlv_type_ = value_arg ? std::optional<FullIntegrationTlvType>(*value_arg) : std::nullopt;
}

void FullIntegrationSetEmvTlvDataRequest::set_tlv_type(const FullIntegrationTlvType& value_arg) {
  tlv_type_ = value_arg;
}


const std::string* FullIntegrationSetEmvTlvDataRequest::emv_tlv_data() const {
  return emv_tlv_data_ ? &(*emv_tlv_data_) : nullptr;
}

void FullIntegrationSetEmvTlvDataRequest::set_emv_tlv_data(const std::string_view* value_arg) {
  emv_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationSetEmvTlvDataRequest::set_emv_tlv_data(std::string_view value_arg) {
  emv_tlv_data_ = value_arg;
}


EncodableList FullIntegrationSetEmvTlvDataRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(tlv_type_ ? EncodableValue((int)(*tlv_type_)) : EncodableValue());
  list.push_back(emv_tlv_data_ ? EncodableValue(*emv_tlv_data_) : EncodableValue());
  return list;
}

FullIntegrationSetEmvTlvDataRequest FullIntegrationSetEmvTlvDataRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationSetEmvTlvDataRequest decoded;
  auto& encodable_tlv_type = list[0];
  if (!encodable_tlv_type.IsNull()) {
    decoded.set_tlv_type((FullIntegrationTlvType)(std::get<int32_t>(encodable_tlv_type)));
  }
  auto& encodable_emv_tlv_data = list[1];
  if (!encodable_emv_tlv_data.IsNull()) {
    decoded.set_emv_tlv_data(std::get<std::string>(encodable_emv_tlv_data));
  }
  return decoded;
}

// FullIntegrationGetPinBlockRequest

FullIntegrationGetPinBlockRequest::FullIntegrationGetPinBlockRequest() {}

FullIntegrationGetPinBlockRequest::FullIntegrationGetPinBlockRequest(
  const std::string* account_number,
  const FullIntegrationEncryptionType* encryption_type,
  const std::string* key_slot,
  const std::string* pin_min_length,
  const std::string* pin_max_length,
  const FullIntegrationAllowOnlinePinBypass* allow_online_pin_bypass,
  const FullIntegrationPinAlgorithm* pin_algorithm,
  const std::string* timeout,
  const FullIntegrationEdcType* edc_type,
  const FullIntegrationTransactionType* transaction_type,
  const std::string* title,
  const FullIntegrationPinpadType* pinpad_type,
  const FullIntegrationKsnFlag* ksn_flag)
 : account_number_(account_number ? std::optional<std::string>(*account_number) : std::nullopt),
    encryption_type_(encryption_type ? std::optional<FullIntegrationEncryptionType>(*encryption_type) : std::nullopt),
    key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt),
    pin_min_length_(pin_min_length ? std::optional<std::string>(*pin_min_length) : std::nullopt),
    pin_max_length_(pin_max_length ? std::optional<std::string>(*pin_max_length) : std::nullopt),
    allow_online_pin_bypass_(allow_online_pin_bypass ? std::optional<FullIntegrationAllowOnlinePinBypass>(*allow_online_pin_bypass) : std::nullopt),
    pin_algorithm_(pin_algorithm ? std::optional<FullIntegrationPinAlgorithm>(*pin_algorithm) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    edc_type_(edc_type ? std::optional<FullIntegrationEdcType>(*edc_type) : std::nullopt),
    transaction_type_(transaction_type ? std::optional<FullIntegrationTransactionType>(*transaction_type) : std::nullopt),
    title_(title ? std::optional<std::string>(*title) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FullIntegrationPinpadType>(*pinpad_type) : std::nullopt),
    ksn_flag_(ksn_flag ? std::optional<FullIntegrationKsnFlag>(*ksn_flag) : std::nullopt) {}

const std::string* FullIntegrationGetPinBlockRequest::account_number() const {
  return account_number_ ? &(*account_number_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_account_number(const std::string_view* value_arg) {
  account_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_account_number(std::string_view value_arg) {
  account_number_ = value_arg;
}


const FullIntegrationEncryptionType* FullIntegrationGetPinBlockRequest::encryption_type() const {
  return encryption_type_ ? &(*encryption_type_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_encryption_type(const FullIntegrationEncryptionType* value_arg) {
  encryption_type_ = value_arg ? std::optional<FullIntegrationEncryptionType>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_encryption_type(const FullIntegrationEncryptionType& value_arg) {
  encryption_type_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockRequest::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockRequest::pin_min_length() const {
  return pin_min_length_ ? &(*pin_min_length_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_pin_min_length(const std::string_view* value_arg) {
  pin_min_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_pin_min_length(std::string_view value_arg) {
  pin_min_length_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockRequest::pin_max_length() const {
  return pin_max_length_ ? &(*pin_max_length_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_pin_max_length(const std::string_view* value_arg) {
  pin_max_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_pin_max_length(std::string_view value_arg) {
  pin_max_length_ = value_arg;
}


const FullIntegrationAllowOnlinePinBypass* FullIntegrationGetPinBlockRequest::allow_online_pin_bypass() const {
  return allow_online_pin_bypass_ ? &(*allow_online_pin_bypass_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_allow_online_pin_bypass(const FullIntegrationAllowOnlinePinBypass* value_arg) {
  allow_online_pin_bypass_ = value_arg ? std::optional<FullIntegrationAllowOnlinePinBypass>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_allow_online_pin_bypass(const FullIntegrationAllowOnlinePinBypass& value_arg) {
  allow_online_pin_bypass_ = value_arg;
}


const FullIntegrationPinAlgorithm* FullIntegrationGetPinBlockRequest::pin_algorithm() const {
  return pin_algorithm_ ? &(*pin_algorithm_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_pin_algorithm(const FullIntegrationPinAlgorithm* value_arg) {
  pin_algorithm_ = value_arg ? std::optional<FullIntegrationPinAlgorithm>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_pin_algorithm(const FullIntegrationPinAlgorithm& value_arg) {
  pin_algorithm_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FullIntegrationEdcType* FullIntegrationGetPinBlockRequest::edc_type() const {
  return edc_type_ ? &(*edc_type_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_edc_type(const FullIntegrationEdcType* value_arg) {
  edc_type_ = value_arg ? std::optional<FullIntegrationEdcType>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_edc_type(const FullIntegrationEdcType& value_arg) {
  edc_type_ = value_arg;
}


const FullIntegrationTransactionType* FullIntegrationGetPinBlockRequest::transaction_type() const {
  return transaction_type_ ? &(*transaction_type_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_transaction_type(const FullIntegrationTransactionType* value_arg) {
  transaction_type_ = value_arg ? std::optional<FullIntegrationTransactionType>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_transaction_type(const FullIntegrationTransactionType& value_arg) {
  transaction_type_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


const FullIntegrationPinpadType* FullIntegrationGetPinBlockRequest::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_pinpad_type(const FullIntegrationPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FullIntegrationPinpadType>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_pinpad_type(const FullIntegrationPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


const FullIntegrationKsnFlag* FullIntegrationGetPinBlockRequest::ksn_flag() const {
  return ksn_flag_ ? &(*ksn_flag_) : nullptr;
}

void FullIntegrationGetPinBlockRequest::set_ksn_flag(const FullIntegrationKsnFlag* value_arg) {
  ksn_flag_ = value_arg ? std::optional<FullIntegrationKsnFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockRequest::set_ksn_flag(const FullIntegrationKsnFlag& value_arg) {
  ksn_flag_ = value_arg;
}


EncodableList FullIntegrationGetPinBlockRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(13);
  list.push_back(account_number_ ? EncodableValue(*account_number_) : EncodableValue());
  list.push_back(encryption_type_ ? EncodableValue((int)(*encryption_type_)) : EncodableValue());
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  list.push_back(pin_min_length_ ? EncodableValue(*pin_min_length_) : EncodableValue());
  list.push_back(pin_max_length_ ? EncodableValue(*pin_max_length_) : EncodableValue());
  list.push_back(allow_online_pin_bypass_ ? EncodableValue((int)(*allow_online_pin_bypass_)) : EncodableValue());
  list.push_back(pin_algorithm_ ? EncodableValue((int)(*pin_algorithm_)) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(edc_type_ ? EncodableValue((int)(*edc_type_)) : EncodableValue());
  list.push_back(transaction_type_ ? EncodableValue((int)(*transaction_type_)) : EncodableValue());
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  list.push_back(ksn_flag_ ? EncodableValue((int)(*ksn_flag_)) : EncodableValue());
  return list;
}

FullIntegrationGetPinBlockRequest FullIntegrationGetPinBlockRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationGetPinBlockRequest decoded;
  auto& encodable_account_number = list[0];
  if (!encodable_account_number.IsNull()) {
    decoded.set_account_number(std::get<std::string>(encodable_account_number));
  }
  auto& encodable_encryption_type = list[1];
  if (!encodable_encryption_type.IsNull()) {
    decoded.set_encryption_type((FullIntegrationEncryptionType)(std::get<int32_t>(encodable_encryption_type)));
  }
  auto& encodable_key_slot = list[2];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  auto& encodable_pin_min_length = list[3];
  if (!encodable_pin_min_length.IsNull()) {
    decoded.set_pin_min_length(std::get<std::string>(encodable_pin_min_length));
  }
  auto& encodable_pin_max_length = list[4];
  if (!encodable_pin_max_length.IsNull()) {
    decoded.set_pin_max_length(std::get<std::string>(encodable_pin_max_length));
  }
  auto& encodable_allow_online_pin_bypass = list[5];
  if (!encodable_allow_online_pin_bypass.IsNull()) {
    decoded.set_allow_online_pin_bypass((FullIntegrationAllowOnlinePinBypass)(std::get<int32_t>(encodable_allow_online_pin_bypass)));
  }
  auto& encodable_pin_algorithm = list[6];
  if (!encodable_pin_algorithm.IsNull()) {
    decoded.set_pin_algorithm((FullIntegrationPinAlgorithm)(std::get<int32_t>(encodable_pin_algorithm)));
  }
  auto& encodable_timeout = list[7];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_edc_type = list[8];
  if (!encodable_edc_type.IsNull()) {
    decoded.set_edc_type((FullIntegrationEdcType)(std::get<int32_t>(encodable_edc_type)));
  }
  auto& encodable_transaction_type = list[9];
  if (!encodable_transaction_type.IsNull()) {
    decoded.set_transaction_type((FullIntegrationTransactionType)(std::get<int32_t>(encodable_transaction_type)));
  }
  auto& encodable_title = list[10];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  auto& encodable_pinpad_type = list[11];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FullIntegrationPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  auto& encodable_ksn_flag = list[12];
  if (!encodable_ksn_flag.IsNull()) {
    decoded.set_ksn_flag((FullIntegrationKsnFlag)(std::get<int32_t>(encodable_ksn_flag)));
  }
  return decoded;
}

// FullIntegrationTerminalConfiguration

FullIntegrationTerminalConfiguration::FullIntegrationTerminalConfiguration() {}

FullIntegrationTerminalConfiguration::FullIntegrationTerminalConfiguration(
  const std::string* emv_kernel_configuration_selection,
  const std::string* transaction_date,
  const std::string* transaction_time,
  const std::string* currency_code,
  const std::string* currency_exponent,
  const std::string* merchant_category_code,
  const std::string* transaction_sequence_number,
  const std::string* transaction_cvm_limit)
 : emv_kernel_configuration_selection_(emv_kernel_configuration_selection ? std::optional<std::string>(*emv_kernel_configuration_selection) : std::nullopt),
    transaction_date_(transaction_date ? std::optional<std::string>(*transaction_date) : std::nullopt),
    transaction_time_(transaction_time ? std::optional<std::string>(*transaction_time) : std::nullopt),
    currency_code_(currency_code ? std::optional<std::string>(*currency_code) : std::nullopt),
    currency_exponent_(currency_exponent ? std::optional<std::string>(*currency_exponent) : std::nullopt),
    merchant_category_code_(merchant_category_code ? std::optional<std::string>(*merchant_category_code) : std::nullopt),
    transaction_sequence_number_(transaction_sequence_number ? std::optional<std::string>(*transaction_sequence_number) : std::nullopt),
    transaction_cvm_limit_(transaction_cvm_limit ? std::optional<std::string>(*transaction_cvm_limit) : std::nullopt) {}

const std::string* FullIntegrationTerminalConfiguration::emv_kernel_configuration_selection() const {
  return emv_kernel_configuration_selection_ ? &(*emv_kernel_configuration_selection_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_emv_kernel_configuration_selection(const std::string_view* value_arg) {
  emv_kernel_configuration_selection_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_emv_kernel_configuration_selection(std::string_view value_arg) {
  emv_kernel_configuration_selection_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::transaction_date() const {
  return transaction_date_ ? &(*transaction_date_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_transaction_date(const std::string_view* value_arg) {
  transaction_date_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_transaction_date(std::string_view value_arg) {
  transaction_date_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::transaction_time() const {
  return transaction_time_ ? &(*transaction_time_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_transaction_time(const std::string_view* value_arg) {
  transaction_time_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_transaction_time(std::string_view value_arg) {
  transaction_time_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::currency_code() const {
  return currency_code_ ? &(*currency_code_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_currency_code(const std::string_view* value_arg) {
  currency_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_currency_code(std::string_view value_arg) {
  currency_code_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::currency_exponent() const {
  return currency_exponent_ ? &(*currency_exponent_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_currency_exponent(const std::string_view* value_arg) {
  currency_exponent_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_currency_exponent(std::string_view value_arg) {
  currency_exponent_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::merchant_category_code() const {
  return merchant_category_code_ ? &(*merchant_category_code_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_merchant_category_code(const std::string_view* value_arg) {
  merchant_category_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_merchant_category_code(std::string_view value_arg) {
  merchant_category_code_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::transaction_sequence_number() const {
  return transaction_sequence_number_ ? &(*transaction_sequence_number_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_transaction_sequence_number(const std::string_view* value_arg) {
  transaction_sequence_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_transaction_sequence_number(std::string_view value_arg) {
  transaction_sequence_number_ = value_arg;
}


const std::string* FullIntegrationTerminalConfiguration::transaction_cvm_limit() const {
  return transaction_cvm_limit_ ? &(*transaction_cvm_limit_) : nullptr;
}

void FullIntegrationTerminalConfiguration::set_transaction_cvm_limit(const std::string_view* value_arg) {
  transaction_cvm_limit_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationTerminalConfiguration::set_transaction_cvm_limit(std::string_view value_arg) {
  transaction_cvm_limit_ = value_arg;
}


EncodableList FullIntegrationTerminalConfiguration::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(emv_kernel_configuration_selection_ ? EncodableValue(*emv_kernel_configuration_selection_) : EncodableValue());
  list.push_back(transaction_date_ ? EncodableValue(*transaction_date_) : EncodableValue());
  list.push_back(transaction_time_ ? EncodableValue(*transaction_time_) : EncodableValue());
  list.push_back(currency_code_ ? EncodableValue(*currency_code_) : EncodableValue());
  list.push_back(currency_exponent_ ? EncodableValue(*currency_exponent_) : EncodableValue());
  list.push_back(merchant_category_code_ ? EncodableValue(*merchant_category_code_) : EncodableValue());
  list.push_back(transaction_sequence_number_ ? EncodableValue(*transaction_sequence_number_) : EncodableValue());
  list.push_back(transaction_cvm_limit_ ? EncodableValue(*transaction_cvm_limit_) : EncodableValue());
  return list;
}

FullIntegrationTerminalConfiguration FullIntegrationTerminalConfiguration::FromEncodableList(const EncodableList& list) {
  FullIntegrationTerminalConfiguration decoded;
  auto& encodable_emv_kernel_configuration_selection = list[0];
  if (!encodable_emv_kernel_configuration_selection.IsNull()) {
    decoded.set_emv_kernel_configuration_selection(std::get<std::string>(encodable_emv_kernel_configuration_selection));
  }
  auto& encodable_transaction_date = list[1];
  if (!encodable_transaction_date.IsNull()) {
    decoded.set_transaction_date(std::get<std::string>(encodable_transaction_date));
  }
  auto& encodable_transaction_time = list[2];
  if (!encodable_transaction_time.IsNull()) {
    decoded.set_transaction_time(std::get<std::string>(encodable_transaction_time));
  }
  auto& encodable_currency_code = list[3];
  if (!encodable_currency_code.IsNull()) {
    decoded.set_currency_code(std::get<std::string>(encodable_currency_code));
  }
  auto& encodable_currency_exponent = list[4];
  if (!encodable_currency_exponent.IsNull()) {
    decoded.set_currency_exponent(std::get<std::string>(encodable_currency_exponent));
  }
  auto& encodable_merchant_category_code = list[5];
  if (!encodable_merchant_category_code.IsNull()) {
    decoded.set_merchant_category_code(std::get<std::string>(encodable_merchant_category_code));
  }
  auto& encodable_transaction_sequence_number = list[6];
  if (!encodable_transaction_sequence_number.IsNull()) {
    decoded.set_transaction_sequence_number(std::get<std::string>(encodable_transaction_sequence_number));
  }
  auto& encodable_transaction_cvm_limit = list[7];
  if (!encodable_transaction_cvm_limit.IsNull()) {
    decoded.set_transaction_cvm_limit(std::get<std::string>(encodable_transaction_cvm_limit));
  }
  return decoded;
}

// FullIntegrationAmountRequest

FullIntegrationAmountRequest::FullIntegrationAmountRequest() {}

FullIntegrationAmountRequest::FullIntegrationAmountRequest(
  const std::string* transaction_amount,
  const std::string* tip_amount,
  const std::string* cash_back_amount,
  const std::string* merchant_fee,
  const std::string* tax_amount,
  const std::string* fuel_amount,
  const std::string* service_fee,
  const std::string* original_amount)
 : transaction_amount_(transaction_amount ? std::optional<std::string>(*transaction_amount) : std::nullopt),
    tip_amount_(tip_amount ? std::optional<std::string>(*tip_amount) : std::nullopt),
    cash_back_amount_(cash_back_amount ? std::optional<std::string>(*cash_back_amount) : std::nullopt),
    merchant_fee_(merchant_fee ? std::optional<std::string>(*merchant_fee) : std::nullopt),
    tax_amount_(tax_amount ? std::optional<std::string>(*tax_amount) : std::nullopt),
    fuel_amount_(fuel_amount ? std::optional<std::string>(*fuel_amount) : std::nullopt),
    service_fee_(service_fee ? std::optional<std::string>(*service_fee) : std::nullopt),
    original_amount_(original_amount ? std::optional<std::string>(*original_amount) : std::nullopt) {}

const std::string* FullIntegrationAmountRequest::transaction_amount() const {
  return transaction_amount_ ? &(*transaction_amount_) : nullptr;
}

void FullIntegrationAmountRequest::set_transaction_amount(const std::string_view* value_arg) {
  transaction_amount_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_transaction_amount(std::string_view value_arg) {
  transaction_amount_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::tip_amount() const {
  return tip_amount_ ? &(*tip_amount_) : nullptr;
}

void FullIntegrationAmountRequest::set_tip_amount(const std::string_view* value_arg) {
  tip_amount_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_tip_amount(std::string_view value_arg) {
  tip_amount_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::cash_back_amount() const {
  return cash_back_amount_ ? &(*cash_back_amount_) : nullptr;
}

void FullIntegrationAmountRequest::set_cash_back_amount(const std::string_view* value_arg) {
  cash_back_amount_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_cash_back_amount(std::string_view value_arg) {
  cash_back_amount_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::merchant_fee() const {
  return merchant_fee_ ? &(*merchant_fee_) : nullptr;
}

void FullIntegrationAmountRequest::set_merchant_fee(const std::string_view* value_arg) {
  merchant_fee_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_merchant_fee(std::string_view value_arg) {
  merchant_fee_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::tax_amount() const {
  return tax_amount_ ? &(*tax_amount_) : nullptr;
}

void FullIntegrationAmountRequest::set_tax_amount(const std::string_view* value_arg) {
  tax_amount_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_tax_amount(std::string_view value_arg) {
  tax_amount_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::fuel_amount() const {
  return fuel_amount_ ? &(*fuel_amount_) : nullptr;
}

void FullIntegrationAmountRequest::set_fuel_amount(const std::string_view* value_arg) {
  fuel_amount_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_fuel_amount(std::string_view value_arg) {
  fuel_amount_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::service_fee() const {
  return service_fee_ ? &(*service_fee_) : nullptr;
}

void FullIntegrationAmountRequest::set_service_fee(const std::string_view* value_arg) {
  service_fee_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_service_fee(std::string_view value_arg) {
  service_fee_ = value_arg;
}


const std::string* FullIntegrationAmountRequest::original_amount() const {
  return original_amount_ ? &(*original_amount_) : nullptr;
}

void FullIntegrationAmountRequest::set_original_amount(const std::string_view* value_arg) {
  original_amount_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAmountRequest::set_original_amount(std::string_view value_arg) {
  original_amount_ = value_arg;
}


EncodableList FullIntegrationAmountRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(transaction_amount_ ? EncodableValue(*transaction_amount_) : EncodableValue());
  list.push_back(tip_amount_ ? EncodableValue(*tip_amount_) : EncodableValue());
  list.push_back(cash_back_amount_ ? EncodableValue(*cash_back_amount_) : EncodableValue());
  list.push_back(merchant_fee_ ? EncodableValue(*merchant_fee_) : EncodableValue());
  list.push_back(tax_amount_ ? EncodableValue(*tax_amount_) : EncodableValue());
  list.push_back(fuel_amount_ ? EncodableValue(*fuel_amount_) : EncodableValue());
  list.push_back(service_fee_ ? EncodableValue(*service_fee_) : EncodableValue());
  list.push_back(original_amount_ ? EncodableValue(*original_amount_) : EncodableValue());
  return list;
}

FullIntegrationAmountRequest FullIntegrationAmountRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationAmountRequest decoded;
  auto& encodable_transaction_amount = list[0];
  if (!encodable_transaction_amount.IsNull()) {
    decoded.set_transaction_amount(std::get<std::string>(encodable_transaction_amount));
  }
  auto& encodable_tip_amount = list[1];
  if (!encodable_tip_amount.IsNull()) {
    decoded.set_tip_amount(std::get<std::string>(encodable_tip_amount));
  }
  auto& encodable_cash_back_amount = list[2];
  if (!encodable_cash_back_amount.IsNull()) {
    decoded.set_cash_back_amount(std::get<std::string>(encodable_cash_back_amount));
  }
  auto& encodable_merchant_fee = list[3];
  if (!encodable_merchant_fee.IsNull()) {
    decoded.set_merchant_fee(std::get<std::string>(encodable_merchant_fee));
  }
  auto& encodable_tax_amount = list[4];
  if (!encodable_tax_amount.IsNull()) {
    decoded.set_tax_amount(std::get<std::string>(encodable_tax_amount));
  }
  auto& encodable_fuel_amount = list[5];
  if (!encodable_fuel_amount.IsNull()) {
    decoded.set_fuel_amount(std::get<std::string>(encodable_fuel_amount));
  }
  auto& encodable_service_fee = list[6];
  if (!encodable_service_fee.IsNull()) {
    decoded.set_service_fee(std::get<std::string>(encodable_service_fee));
  }
  auto& encodable_original_amount = list[7];
  if (!encodable_original_amount.IsNull()) {
    decoded.set_original_amount(std::get<std::string>(encodable_original_amount));
  }
  return decoded;
}

// FullIntegrationAuthorizeCardRequest

FullIntegrationAuthorizeCardRequest::FullIntegrationAuthorizeCardRequest() {}

FullIntegrationAuthorizeCardRequest::FullIntegrationAuthorizeCardRequest(
  const FullIntegrationAmountRequest* amount_information,
  const FullIntegrationMerchantDecision* merchant_decision,
  const FullIntegrationEncryptionType* pin_encryption_type,
  const std::string* pin_key_slot,
  const std::string* pin_min_length,
  const std::string* pin_max_length,
  const FullIntegrationPinBypass* pin_bypass,
  const FullIntegrationPinAlgorithm* pin_algorithm,
  const FullIntegrationTerminalConfiguration* terminal_configuration,
  const std::string* tag_list,
  const std::string* timeout,
  const FullIntegrationContinuousScreen* continuous_screen,
  const FullIntegrationPinpadType* pinpad_type,
  const FullIntegrationKsnFlag* ksn_flag,
  const std::string* title)
 : amount_information_(amount_information ? std::optional<FullIntegrationAmountRequest>(*amount_information) : std::nullopt),
    merchant_decision_(merchant_decision ? std::optional<FullIntegrationMerchantDecision>(*merchant_decision) : std::nullopt),
    pin_encryption_type_(pin_encryption_type ? std::optional<FullIntegrationEncryptionType>(*pin_encryption_type) : std::nullopt),
    pin_key_slot_(pin_key_slot ? std::optional<std::string>(*pin_key_slot) : std::nullopt),
    pin_min_length_(pin_min_length ? std::optional<std::string>(*pin_min_length) : std::nullopt),
    pin_max_length_(pin_max_length ? std::optional<std::string>(*pin_max_length) : std::nullopt),
    pin_bypass_(pin_bypass ? std::optional<FullIntegrationPinBypass>(*pin_bypass) : std::nullopt),
    pin_algorithm_(pin_algorithm ? std::optional<FullIntegrationPinAlgorithm>(*pin_algorithm) : std::nullopt),
    terminal_configuration_(terminal_configuration ? std::optional<FullIntegrationTerminalConfiguration>(*terminal_configuration) : std::nullopt),
    tag_list_(tag_list ? std::optional<std::string>(*tag_list) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FullIntegrationContinuousScreen>(*continuous_screen) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FullIntegrationPinpadType>(*pinpad_type) : std::nullopt),
    ksn_flag_(ksn_flag ? std::optional<FullIntegrationKsnFlag>(*ksn_flag) : std::nullopt),
    title_(title ? std::optional<std::string>(*title) : std::nullopt) {}

const FullIntegrationAmountRequest* FullIntegrationAuthorizeCardRequest::amount_information() const {
  return amount_information_ ? &(*amount_information_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_amount_information(const FullIntegrationAmountRequest* value_arg) {
  amount_information_ = value_arg ? std::optional<FullIntegrationAmountRequest>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_amount_information(const FullIntegrationAmountRequest& value_arg) {
  amount_information_ = value_arg;
}


const FullIntegrationMerchantDecision* FullIntegrationAuthorizeCardRequest::merchant_decision() const {
  return merchant_decision_ ? &(*merchant_decision_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_merchant_decision(const FullIntegrationMerchantDecision* value_arg) {
  merchant_decision_ = value_arg ? std::optional<FullIntegrationMerchantDecision>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_merchant_decision(const FullIntegrationMerchantDecision& value_arg) {
  merchant_decision_ = value_arg;
}


const FullIntegrationEncryptionType* FullIntegrationAuthorizeCardRequest::pin_encryption_type() const {
  return pin_encryption_type_ ? &(*pin_encryption_type_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pin_encryption_type(const FullIntegrationEncryptionType* value_arg) {
  pin_encryption_type_ = value_arg ? std::optional<FullIntegrationEncryptionType>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pin_encryption_type(const FullIntegrationEncryptionType& value_arg) {
  pin_encryption_type_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardRequest::pin_key_slot() const {
  return pin_key_slot_ ? &(*pin_key_slot_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pin_key_slot(const std::string_view* value_arg) {
  pin_key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pin_key_slot(std::string_view value_arg) {
  pin_key_slot_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardRequest::pin_min_length() const {
  return pin_min_length_ ? &(*pin_min_length_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pin_min_length(const std::string_view* value_arg) {
  pin_min_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pin_min_length(std::string_view value_arg) {
  pin_min_length_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardRequest::pin_max_length() const {
  return pin_max_length_ ? &(*pin_max_length_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pin_max_length(const std::string_view* value_arg) {
  pin_max_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pin_max_length(std::string_view value_arg) {
  pin_max_length_ = value_arg;
}


const FullIntegrationPinBypass* FullIntegrationAuthorizeCardRequest::pin_bypass() const {
  return pin_bypass_ ? &(*pin_bypass_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pin_bypass(const FullIntegrationPinBypass* value_arg) {
  pin_bypass_ = value_arg ? std::optional<FullIntegrationPinBypass>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pin_bypass(const FullIntegrationPinBypass& value_arg) {
  pin_bypass_ = value_arg;
}


const FullIntegrationPinAlgorithm* FullIntegrationAuthorizeCardRequest::pin_algorithm() const {
  return pin_algorithm_ ? &(*pin_algorithm_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pin_algorithm(const FullIntegrationPinAlgorithm* value_arg) {
  pin_algorithm_ = value_arg ? std::optional<FullIntegrationPinAlgorithm>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pin_algorithm(const FullIntegrationPinAlgorithm& value_arg) {
  pin_algorithm_ = value_arg;
}


const FullIntegrationTerminalConfiguration* FullIntegrationAuthorizeCardRequest::terminal_configuration() const {
  return terminal_configuration_ ? &(*terminal_configuration_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_terminal_configuration(const FullIntegrationTerminalConfiguration* value_arg) {
  terminal_configuration_ = value_arg ? std::optional<FullIntegrationTerminalConfiguration>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_terminal_configuration(const FullIntegrationTerminalConfiguration& value_arg) {
  terminal_configuration_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardRequest::tag_list() const {
  return tag_list_ ? &(*tag_list_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_tag_list(const std::string_view* value_arg) {
  tag_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_tag_list(std::string_view value_arg) {
  tag_list_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FullIntegrationContinuousScreen* FullIntegrationAuthorizeCardRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_continuous_screen(const FullIntegrationContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FullIntegrationContinuousScreen>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_continuous_screen(const FullIntegrationContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


const FullIntegrationPinpadType* FullIntegrationAuthorizeCardRequest::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_pinpad_type(const FullIntegrationPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FullIntegrationPinpadType>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_pinpad_type(const FullIntegrationPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


const FullIntegrationKsnFlag* FullIntegrationAuthorizeCardRequest::ksn_flag() const {
  return ksn_flag_ ? &(*ksn_flag_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_ksn_flag(const FullIntegrationKsnFlag* value_arg) {
  ksn_flag_ = value_arg ? std::optional<FullIntegrationKsnFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_ksn_flag(const FullIntegrationKsnFlag& value_arg) {
  ksn_flag_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardRequest::title() const {
  return title_ ? &(*title_) : nullptr;
}

void FullIntegrationAuthorizeCardRequest::set_title(const std::string_view* value_arg) {
  title_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardRequest::set_title(std::string_view value_arg) {
  title_ = value_arg;
}


EncodableList FullIntegrationAuthorizeCardRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(15);
  list.push_back(amount_information_ ? EncodableValue(amount_information_->ToEncodableList()) : EncodableValue());
  list.push_back(merchant_decision_ ? EncodableValue((int)(*merchant_decision_)) : EncodableValue());
  list.push_back(pin_encryption_type_ ? EncodableValue((int)(*pin_encryption_type_)) : EncodableValue());
  list.push_back(pin_key_slot_ ? EncodableValue(*pin_key_slot_) : EncodableValue());
  list.push_back(pin_min_length_ ? EncodableValue(*pin_min_length_) : EncodableValue());
  list.push_back(pin_max_length_ ? EncodableValue(*pin_max_length_) : EncodableValue());
  list.push_back(pin_bypass_ ? EncodableValue((int)(*pin_bypass_)) : EncodableValue());
  list.push_back(pin_algorithm_ ? EncodableValue((int)(*pin_algorithm_)) : EncodableValue());
  list.push_back(terminal_configuration_ ? EncodableValue(terminal_configuration_->ToEncodableList()) : EncodableValue());
  list.push_back(tag_list_ ? EncodableValue(*tag_list_) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  list.push_back(ksn_flag_ ? EncodableValue((int)(*ksn_flag_)) : EncodableValue());
  list.push_back(title_ ? EncodableValue(*title_) : EncodableValue());
  return list;
}

FullIntegrationAuthorizeCardRequest FullIntegrationAuthorizeCardRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationAuthorizeCardRequest decoded;
  auto& encodable_amount_information = list[0];
  if (!encodable_amount_information.IsNull()) {
    decoded.set_amount_information(FullIntegrationAmountRequest::FromEncodableList(std::get<EncodableList>(encodable_amount_information)));
  }
  auto& encodable_merchant_decision = list[1];
  if (!encodable_merchant_decision.IsNull()) {
    decoded.set_merchant_decision((FullIntegrationMerchantDecision)(std::get<int32_t>(encodable_merchant_decision)));
  }
  auto& encodable_pin_encryption_type = list[2];
  if (!encodable_pin_encryption_type.IsNull()) {
    decoded.set_pin_encryption_type((FullIntegrationEncryptionType)(std::get<int32_t>(encodable_pin_encryption_type)));
  }
  auto& encodable_pin_key_slot = list[3];
  if (!encodable_pin_key_slot.IsNull()) {
    decoded.set_pin_key_slot(std::get<std::string>(encodable_pin_key_slot));
  }
  auto& encodable_pin_min_length = list[4];
  if (!encodable_pin_min_length.IsNull()) {
    decoded.set_pin_min_length(std::get<std::string>(encodable_pin_min_length));
  }
  auto& encodable_pin_max_length = list[5];
  if (!encodable_pin_max_length.IsNull()) {
    decoded.set_pin_max_length(std::get<std::string>(encodable_pin_max_length));
  }
  auto& encodable_pin_bypass = list[6];
  if (!encodable_pin_bypass.IsNull()) {
    decoded.set_pin_bypass((FullIntegrationPinBypass)(std::get<int32_t>(encodable_pin_bypass)));
  }
  auto& encodable_pin_algorithm = list[7];
  if (!encodable_pin_algorithm.IsNull()) {
    decoded.set_pin_algorithm((FullIntegrationPinAlgorithm)(std::get<int32_t>(encodable_pin_algorithm)));
  }
  auto& encodable_terminal_configuration = list[8];
  if (!encodable_terminal_configuration.IsNull()) {
    decoded.set_terminal_configuration(FullIntegrationTerminalConfiguration::FromEncodableList(std::get<EncodableList>(encodable_terminal_configuration)));
  }
  auto& encodable_tag_list = list[9];
  if (!encodable_tag_list.IsNull()) {
    decoded.set_tag_list(std::get<std::string>(encodable_tag_list));
  }
  auto& encodable_timeout = list[10];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_continuous_screen = list[11];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FullIntegrationContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  auto& encodable_pinpad_type = list[12];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FullIntegrationPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  auto& encodable_ksn_flag = list[13];
  if (!encodable_ksn_flag.IsNull()) {
    decoded.set_ksn_flag((FullIntegrationKsnFlag)(std::get<int32_t>(encodable_ksn_flag)));
  }
  auto& encodable_title = list[14];
  if (!encodable_title.IsNull()) {
    decoded.set_title(std::get<std::string>(encodable_title));
  }
  return decoded;
}

// FullIntegrationCompleteOnlineEmvRequest

FullIntegrationCompleteOnlineEmvRequest::FullIntegrationCompleteOnlineEmvRequest() {}

FullIntegrationCompleteOnlineEmvRequest::FullIntegrationCompleteOnlineEmvRequest(
  const FullIntegrationOnlineAuthorizationResult* online_authorization_result,
  const std::string* response_code,
  const std::string* authorization_code,
  const std::string* issuer_authentication_data,
  const std::string* issuer_script1,
  const std::string* issuer_script2,
  const std::string* tag_list,
  const FullIntegrationContinuousScreen* continuous_screen)
 : online_authorization_result_(online_authorization_result ? std::optional<FullIntegrationOnlineAuthorizationResult>(*online_authorization_result) : std::nullopt),
    response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    authorization_code_(authorization_code ? std::optional<std::string>(*authorization_code) : std::nullopt),
    issuer_authentication_data_(issuer_authentication_data ? std::optional<std::string>(*issuer_authentication_data) : std::nullopt),
    issuer_script1_(issuer_script1 ? std::optional<std::string>(*issuer_script1) : std::nullopt),
    issuer_script2_(issuer_script2 ? std::optional<std::string>(*issuer_script2) : std::nullopt),
    tag_list_(tag_list ? std::optional<std::string>(*tag_list) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FullIntegrationContinuousScreen>(*continuous_screen) : std::nullopt) {}

const FullIntegrationOnlineAuthorizationResult* FullIntegrationCompleteOnlineEmvRequest::online_authorization_result() const {
  return online_authorization_result_ ? &(*online_authorization_result_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_online_authorization_result(const FullIntegrationOnlineAuthorizationResult* value_arg) {
  online_authorization_result_ = value_arg ? std::optional<FullIntegrationOnlineAuthorizationResult>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_online_authorization_result(const FullIntegrationOnlineAuthorizationResult& value_arg) {
  online_authorization_result_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvRequest::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvRequest::authorization_code() const {
  return authorization_code_ ? &(*authorization_code_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_authorization_code(const std::string_view* value_arg) {
  authorization_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_authorization_code(std::string_view value_arg) {
  authorization_code_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvRequest::issuer_authentication_data() const {
  return issuer_authentication_data_ ? &(*issuer_authentication_data_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_issuer_authentication_data(const std::string_view* value_arg) {
  issuer_authentication_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_issuer_authentication_data(std::string_view value_arg) {
  issuer_authentication_data_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvRequest::issuer_script1() const {
  return issuer_script1_ ? &(*issuer_script1_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_issuer_script1(const std::string_view* value_arg) {
  issuer_script1_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_issuer_script1(std::string_view value_arg) {
  issuer_script1_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvRequest::issuer_script2() const {
  return issuer_script2_ ? &(*issuer_script2_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_issuer_script2(const std::string_view* value_arg) {
  issuer_script2_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_issuer_script2(std::string_view value_arg) {
  issuer_script2_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvRequest::tag_list() const {
  return tag_list_ ? &(*tag_list_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_tag_list(const std::string_view* value_arg) {
  tag_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_tag_list(std::string_view value_arg) {
  tag_list_ = value_arg;
}


const FullIntegrationContinuousScreen* FullIntegrationCompleteOnlineEmvRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvRequest::set_continuous_screen(const FullIntegrationContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FullIntegrationContinuousScreen>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvRequest::set_continuous_screen(const FullIntegrationContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


EncodableList FullIntegrationCompleteOnlineEmvRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(online_authorization_result_ ? EncodableValue((int)(*online_authorization_result_)) : EncodableValue());
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(authorization_code_ ? EncodableValue(*authorization_code_) : EncodableValue());
  list.push_back(issuer_authentication_data_ ? EncodableValue(*issuer_authentication_data_) : EncodableValue());
  list.push_back(issuer_script1_ ? EncodableValue(*issuer_script1_) : EncodableValue());
  list.push_back(issuer_script2_ ? EncodableValue(*issuer_script2_) : EncodableValue());
  list.push_back(tag_list_ ? EncodableValue(*tag_list_) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  return list;
}

FullIntegrationCompleteOnlineEmvRequest FullIntegrationCompleteOnlineEmvRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationCompleteOnlineEmvRequest decoded;
  auto& encodable_online_authorization_result = list[0];
  if (!encodable_online_authorization_result.IsNull()) {
    decoded.set_online_authorization_result((FullIntegrationOnlineAuthorizationResult)(std::get<int32_t>(encodable_online_authorization_result)));
  }
  auto& encodable_response_code = list[1];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_authorization_code = list[2];
  if (!encodable_authorization_code.IsNull()) {
    decoded.set_authorization_code(std::get<std::string>(encodable_authorization_code));
  }
  auto& encodable_issuer_authentication_data = list[3];
  if (!encodable_issuer_authentication_data.IsNull()) {
    decoded.set_issuer_authentication_data(std::get<std::string>(encodable_issuer_authentication_data));
  }
  auto& encodable_issuer_script1 = list[4];
  if (!encodable_issuer_script1.IsNull()) {
    decoded.set_issuer_script1(std::get<std::string>(encodable_issuer_script1));
  }
  auto& encodable_issuer_script2 = list[5];
  if (!encodable_issuer_script2.IsNull()) {
    decoded.set_issuer_script2(std::get<std::string>(encodable_issuer_script2));
  }
  auto& encodable_tag_list = list[6];
  if (!encodable_tag_list.IsNull()) {
    decoded.set_tag_list(std::get<std::string>(encodable_tag_list));
  }
  auto& encodable_continuous_screen = list[7];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FullIntegrationContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  return decoded;
}

// FullIntegrationCustomMacInformationRequest

FullIntegrationCustomMacInformationRequest::FullIntegrationCustomMacInformationRequest() {}

FullIntegrationCustomMacInformationRequest::FullIntegrationCustomMacInformationRequest(
  const FullIntegrationMacKeyType* key_type,
  const FullIntegrationMacWorkMode* work_mode,
  const std::string* key_slot,
  const EncodableList* data)
 : key_type_(key_type ? std::optional<FullIntegrationMacKeyType>(*key_type) : std::nullopt),
    work_mode_(work_mode ? std::optional<FullIntegrationMacWorkMode>(*work_mode) : std::nullopt),
    key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt),
    data_(data ? std::optional<EncodableList>(*data) : std::nullopt) {}

const FullIntegrationMacKeyType* FullIntegrationCustomMacInformationRequest::key_type() const {
  return key_type_ ? &(*key_type_) : nullptr;
}

void FullIntegrationCustomMacInformationRequest::set_key_type(const FullIntegrationMacKeyType* value_arg) {
  key_type_ = value_arg ? std::optional<FullIntegrationMacKeyType>(*value_arg) : std::nullopt;
}

void FullIntegrationCustomMacInformationRequest::set_key_type(const FullIntegrationMacKeyType& value_arg) {
  key_type_ = value_arg;
}


const FullIntegrationMacWorkMode* FullIntegrationCustomMacInformationRequest::work_mode() const {
  return work_mode_ ? &(*work_mode_) : nullptr;
}

void FullIntegrationCustomMacInformationRequest::set_work_mode(const FullIntegrationMacWorkMode* value_arg) {
  work_mode_ = value_arg ? std::optional<FullIntegrationMacWorkMode>(*value_arg) : std::nullopt;
}

void FullIntegrationCustomMacInformationRequest::set_work_mode(const FullIntegrationMacWorkMode& value_arg) {
  work_mode_ = value_arg;
}


const std::string* FullIntegrationCustomMacInformationRequest::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void FullIntegrationCustomMacInformationRequest::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCustomMacInformationRequest::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


const EncodableList* FullIntegrationCustomMacInformationRequest::data() const {
  return data_ ? &(*data_) : nullptr;
}

void FullIntegrationCustomMacInformationRequest::set_data(const EncodableList* value_arg) {
  data_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FullIntegrationCustomMacInformationRequest::set_data(const EncodableList& value_arg) {
  data_ = value_arg;
}


EncodableList FullIntegrationCustomMacInformationRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(key_type_ ? EncodableValue((int)(*key_type_)) : EncodableValue());
  list.push_back(work_mode_ ? EncodableValue((int)(*work_mode_)) : EncodableValue());
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  list.push_back(data_ ? EncodableValue(*data_) : EncodableValue());
  return list;
}

FullIntegrationCustomMacInformationRequest FullIntegrationCustomMacInformationRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationCustomMacInformationRequest decoded;
  auto& encodable_key_type = list[0];
  if (!encodable_key_type.IsNull()) {
    decoded.set_key_type((FullIntegrationMacKeyType)(std::get<int32_t>(encodable_key_type)));
  }
  auto& encodable_work_mode = list[1];
  if (!encodable_work_mode.IsNull()) {
    decoded.set_work_mode((FullIntegrationMacWorkMode)(std::get<int32_t>(encodable_work_mode)));
  }
  auto& encodable_key_slot = list[2];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  auto& encodable_data = list[3];
  if (!encodable_data.IsNull()) {
    decoded.set_data(std::get<EncodableList>(encodable_data));
  }
  return decoded;
}

// FullIntegrationAdditionalPrompts

FullIntegrationAdditionalPrompts::FullIntegrationAdditionalPrompts() {}

FullIntegrationAdditionalPrompts::FullIntegrationAdditionalPrompts(
  const FullIntegrationPrompt* expiry_date_prompt,
  const FullIntegrationPrompt* cvv_prompt,
  const FullIntegrationPrompt* zip_code_prompt)
 : expiry_date_prompt_(expiry_date_prompt ? std::optional<FullIntegrationPrompt>(*expiry_date_prompt) : std::nullopt),
    cvv_prompt_(cvv_prompt ? std::optional<FullIntegrationPrompt>(*cvv_prompt) : std::nullopt),
    zip_code_prompt_(zip_code_prompt ? std::optional<FullIntegrationPrompt>(*zip_code_prompt) : std::nullopt) {}

const FullIntegrationPrompt* FullIntegrationAdditionalPrompts::expiry_date_prompt() const {
  return expiry_date_prompt_ ? &(*expiry_date_prompt_) : nullptr;
}

void FullIntegrationAdditionalPrompts::set_expiry_date_prompt(const FullIntegrationPrompt* value_arg) {
  expiry_date_prompt_ = value_arg ? std::optional<FullIntegrationPrompt>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalPrompts::set_expiry_date_prompt(const FullIntegrationPrompt& value_arg) {
  expiry_date_prompt_ = value_arg;
}


const FullIntegrationPrompt* FullIntegrationAdditionalPrompts::cvv_prompt() const {
  return cvv_prompt_ ? &(*cvv_prompt_) : nullptr;
}

void FullIntegrationAdditionalPrompts::set_cvv_prompt(const FullIntegrationPrompt* value_arg) {
  cvv_prompt_ = value_arg ? std::optional<FullIntegrationPrompt>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalPrompts::set_cvv_prompt(const FullIntegrationPrompt& value_arg) {
  cvv_prompt_ = value_arg;
}


const FullIntegrationPrompt* FullIntegrationAdditionalPrompts::zip_code_prompt() const {
  return zip_code_prompt_ ? &(*zip_code_prompt_) : nullptr;
}

void FullIntegrationAdditionalPrompts::set_zip_code_prompt(const FullIntegrationPrompt* value_arg) {
  zip_code_prompt_ = value_arg ? std::optional<FullIntegrationPrompt>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalPrompts::set_zip_code_prompt(const FullIntegrationPrompt& value_arg) {
  zip_code_prompt_ = value_arg;
}


EncodableList FullIntegrationAdditionalPrompts::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(expiry_date_prompt_ ? EncodableValue((int)(*expiry_date_prompt_)) : EncodableValue());
  list.push_back(cvv_prompt_ ? EncodableValue((int)(*cvv_prompt_)) : EncodableValue());
  list.push_back(zip_code_prompt_ ? EncodableValue((int)(*zip_code_prompt_)) : EncodableValue());
  return list;
}

FullIntegrationAdditionalPrompts FullIntegrationAdditionalPrompts::FromEncodableList(const EncodableList& list) {
  FullIntegrationAdditionalPrompts decoded;
  auto& encodable_expiry_date_prompt = list[0];
  if (!encodable_expiry_date_prompt.IsNull()) {
    decoded.set_expiry_date_prompt((FullIntegrationPrompt)(std::get<int32_t>(encodable_expiry_date_prompt)));
  }
  auto& encodable_cvv_prompt = list[1];
  if (!encodable_cvv_prompt.IsNull()) {
    decoded.set_cvv_prompt((FullIntegrationPrompt)(std::get<int32_t>(encodable_cvv_prompt)));
  }
  auto& encodable_zip_code_prompt = list[2];
  if (!encodable_zip_code_prompt.IsNull()) {
    decoded.set_zip_code_prompt((FullIntegrationPrompt)(std::get<int32_t>(encodable_zip_code_prompt)));
  }
  return decoded;
}

// FullIntegrationInputAccountWithEmvRequest

FullIntegrationInputAccountWithEmvRequest::FullIntegrationInputAccountWithEmvRequest() {}

FullIntegrationInputAccountWithEmvRequest::FullIntegrationInputAccountWithEmvRequest(
  const FullIntegrationEdcType* edc_type,
  const FullIntegrationTransactionType* transaction_type,
  const FullIntegrationAmountRequest* amount_information,
  const FullIntegrationPinpadEnableFlag* magnetic_swipe_pinpad_enable_flag,
  const FullIntegrationPinpadTypeFlag* magnetic_swipe_pinpad_type_flag,
  const FullIntegrationPinpadEnableFlag* manual_pinpad_enable_flag,
  const FullIntegrationPinpadEnableFlag* contactless_pinpad_enable_flag,
  const FullIntegrationPinpadTypeFlag* contactless_pinpad_type_flag,
  const FullIntegrationPinpadEnableFlag* contact_emv_pinpad_enable_flag,
  const FullIntegrationPinpadTypeFlag* contact_emv_pinpad_type_flag,
  const FullIntegrationPinpadEnableFlag* fallback_swipe_pinpad_enable_flag,
  const FullIntegrationLaserScannerFlag* laser_scanner_flag,
  const FullIntegrationFrontCameraFlag* front_camera_flag,
  const FullIntegrationRearCameraFlag* rear_camera_flag,
  const FullIntegrationAdditionalPrompts* additional_prompts,
  const FullIntegrationDataEncryptionFlag* encryption_flag,
  const std::string* key_slot,
  const std::string* padding_char,
  const FullIntegrationTrackDataSentinel* track_data_sentinel,
  const std::string* min_account_length,
  const std::string* max_account_length,
  const FullIntegrationTerminalConfiguration* terminal_configuration,
  const std::string* tag_list,
  const std::string* timeout,
  const FullIntegrationStatusReportFlag* status_report_flag,
  const FullIntegrationContinuousScreen* continuous_screen,
  const FullIntegrationPinpadEnableFlag* fallback_insert_pinpad_enable_flag,
  const FullIntegrationKsnFlag* ksn_flag,
  const EncodableList* custom_data,
  const FullIntegrationPinpadEnableFlag* fallback_to_manual_pinpad_enable_flag,
  const FullIntegrationCustomMacInformationRequest* custom_mac_information)
 : edc_type_(edc_type ? std::optional<FullIntegrationEdcType>(*edc_type) : std::nullopt),
    transaction_type_(transaction_type ? std::optional<FullIntegrationTransactionType>(*transaction_type) : std::nullopt),
    amount_information_(amount_information ? std::optional<FullIntegrationAmountRequest>(*amount_information) : std::nullopt),
    magnetic_swipe_pinpad_enable_flag_(magnetic_swipe_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*magnetic_swipe_pinpad_enable_flag) : std::nullopt),
    magnetic_swipe_pinpad_type_flag_(magnetic_swipe_pinpad_type_flag ? std::optional<FullIntegrationPinpadTypeFlag>(*magnetic_swipe_pinpad_type_flag) : std::nullopt),
    manual_pinpad_enable_flag_(manual_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*manual_pinpad_enable_flag) : std::nullopt),
    contactless_pinpad_enable_flag_(contactless_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*contactless_pinpad_enable_flag) : std::nullopt),
    contactless_pinpad_type_flag_(contactless_pinpad_type_flag ? std::optional<FullIntegrationPinpadTypeFlag>(*contactless_pinpad_type_flag) : std::nullopt),
    contact_emv_pinpad_enable_flag_(contact_emv_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*contact_emv_pinpad_enable_flag) : std::nullopt),
    contact_emv_pinpad_type_flag_(contact_emv_pinpad_type_flag ? std::optional<FullIntegrationPinpadTypeFlag>(*contact_emv_pinpad_type_flag) : std::nullopt),
    fallback_swipe_pinpad_enable_flag_(fallback_swipe_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*fallback_swipe_pinpad_enable_flag) : std::nullopt),
    laser_scanner_flag_(laser_scanner_flag ? std::optional<FullIntegrationLaserScannerFlag>(*laser_scanner_flag) : std::nullopt),
    front_camera_flag_(front_camera_flag ? std::optional<FullIntegrationFrontCameraFlag>(*front_camera_flag) : std::nullopt),
    rear_camera_flag_(rear_camera_flag ? std::optional<FullIntegrationRearCameraFlag>(*rear_camera_flag) : std::nullopt),
    additional_prompts_(additional_prompts ? std::optional<FullIntegrationAdditionalPrompts>(*additional_prompts) : std::nullopt),
    encryption_flag_(encryption_flag ? std::optional<FullIntegrationDataEncryptionFlag>(*encryption_flag) : std::nullopt),
    key_slot_(key_slot ? std::optional<std::string>(*key_slot) : std::nullopt),
    padding_char_(padding_char ? std::optional<std::string>(*padding_char) : std::nullopt),
    track_data_sentinel_(track_data_sentinel ? std::optional<FullIntegrationTrackDataSentinel>(*track_data_sentinel) : std::nullopt),
    min_account_length_(min_account_length ? std::optional<std::string>(*min_account_length) : std::nullopt),
    max_account_length_(max_account_length ? std::optional<std::string>(*max_account_length) : std::nullopt),
    terminal_configuration_(terminal_configuration ? std::optional<FullIntegrationTerminalConfiguration>(*terminal_configuration) : std::nullopt),
    tag_list_(tag_list ? std::optional<std::string>(*tag_list) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt),
    status_report_flag_(status_report_flag ? std::optional<FullIntegrationStatusReportFlag>(*status_report_flag) : std::nullopt),
    continuous_screen_(continuous_screen ? std::optional<FullIntegrationContinuousScreen>(*continuous_screen) : std::nullopt),
    fallback_insert_pinpad_enable_flag_(fallback_insert_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*fallback_insert_pinpad_enable_flag) : std::nullopt),
    ksn_flag_(ksn_flag ? std::optional<FullIntegrationKsnFlag>(*ksn_flag) : std::nullopt),
    custom_data_(custom_data ? std::optional<EncodableList>(*custom_data) : std::nullopt),
    fallback_to_manual_pinpad_enable_flag_(fallback_to_manual_pinpad_enable_flag ? std::optional<FullIntegrationPinpadEnableFlag>(*fallback_to_manual_pinpad_enable_flag) : std::nullopt),
    custom_mac_information_(custom_mac_information ? std::optional<FullIntegrationCustomMacInformationRequest>(*custom_mac_information) : std::nullopt) {}

const FullIntegrationEdcType* FullIntegrationInputAccountWithEmvRequest::edc_type() const {
  return edc_type_ ? &(*edc_type_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_edc_type(const FullIntegrationEdcType* value_arg) {
  edc_type_ = value_arg ? std::optional<FullIntegrationEdcType>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_edc_type(const FullIntegrationEdcType& value_arg) {
  edc_type_ = value_arg;
}


const FullIntegrationTransactionType* FullIntegrationInputAccountWithEmvRequest::transaction_type() const {
  return transaction_type_ ? &(*transaction_type_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_transaction_type(const FullIntegrationTransactionType* value_arg) {
  transaction_type_ = value_arg ? std::optional<FullIntegrationTransactionType>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_transaction_type(const FullIntegrationTransactionType& value_arg) {
  transaction_type_ = value_arg;
}


const FullIntegrationAmountRequest* FullIntegrationInputAccountWithEmvRequest::amount_information() const {
  return amount_information_ ? &(*amount_information_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_amount_information(const FullIntegrationAmountRequest* value_arg) {
  amount_information_ = value_arg ? std::optional<FullIntegrationAmountRequest>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_amount_information(const FullIntegrationAmountRequest& value_arg) {
  amount_information_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::magnetic_swipe_pinpad_enable_flag() const {
  return magnetic_swipe_pinpad_enable_flag_ ? &(*magnetic_swipe_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_magnetic_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  magnetic_swipe_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_magnetic_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  magnetic_swipe_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationPinpadTypeFlag* FullIntegrationInputAccountWithEmvRequest::magnetic_swipe_pinpad_type_flag() const {
  return magnetic_swipe_pinpad_type_flag_ ? &(*magnetic_swipe_pinpad_type_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_magnetic_swipe_pinpad_type_flag(const FullIntegrationPinpadTypeFlag* value_arg) {
  magnetic_swipe_pinpad_type_flag_ = value_arg ? std::optional<FullIntegrationPinpadTypeFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_magnetic_swipe_pinpad_type_flag(const FullIntegrationPinpadTypeFlag& value_arg) {
  magnetic_swipe_pinpad_type_flag_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::manual_pinpad_enable_flag() const {
  return manual_pinpad_enable_flag_ ? &(*manual_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  manual_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  manual_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::contactless_pinpad_enable_flag() const {
  return contactless_pinpad_enable_flag_ ? &(*contactless_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_contactless_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  contactless_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_contactless_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  contactless_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationPinpadTypeFlag* FullIntegrationInputAccountWithEmvRequest::contactless_pinpad_type_flag() const {
  return contactless_pinpad_type_flag_ ? &(*contactless_pinpad_type_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_contactless_pinpad_type_flag(const FullIntegrationPinpadTypeFlag* value_arg) {
  contactless_pinpad_type_flag_ = value_arg ? std::optional<FullIntegrationPinpadTypeFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_contactless_pinpad_type_flag(const FullIntegrationPinpadTypeFlag& value_arg) {
  contactless_pinpad_type_flag_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::contact_emv_pinpad_enable_flag() const {
  return contact_emv_pinpad_enable_flag_ ? &(*contact_emv_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_contact_emv_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  contact_emv_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_contact_emv_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  contact_emv_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationPinpadTypeFlag* FullIntegrationInputAccountWithEmvRequest::contact_emv_pinpad_type_flag() const {
  return contact_emv_pinpad_type_flag_ ? &(*contact_emv_pinpad_type_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_contact_emv_pinpad_type_flag(const FullIntegrationPinpadTypeFlag* value_arg) {
  contact_emv_pinpad_type_flag_ = value_arg ? std::optional<FullIntegrationPinpadTypeFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_contact_emv_pinpad_type_flag(const FullIntegrationPinpadTypeFlag& value_arg) {
  contact_emv_pinpad_type_flag_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::fallback_swipe_pinpad_enable_flag() const {
  return fallback_swipe_pinpad_enable_flag_ ? &(*fallback_swipe_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_fallback_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  fallback_swipe_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_fallback_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  fallback_swipe_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationLaserScannerFlag* FullIntegrationInputAccountWithEmvRequest::laser_scanner_flag() const {
  return laser_scanner_flag_ ? &(*laser_scanner_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_laser_scanner_flag(const FullIntegrationLaserScannerFlag* value_arg) {
  laser_scanner_flag_ = value_arg ? std::optional<FullIntegrationLaserScannerFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_laser_scanner_flag(const FullIntegrationLaserScannerFlag& value_arg) {
  laser_scanner_flag_ = value_arg;
}


const FullIntegrationFrontCameraFlag* FullIntegrationInputAccountWithEmvRequest::front_camera_flag() const {
  return front_camera_flag_ ? &(*front_camera_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_front_camera_flag(const FullIntegrationFrontCameraFlag* value_arg) {
  front_camera_flag_ = value_arg ? std::optional<FullIntegrationFrontCameraFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_front_camera_flag(const FullIntegrationFrontCameraFlag& value_arg) {
  front_camera_flag_ = value_arg;
}


const FullIntegrationRearCameraFlag* FullIntegrationInputAccountWithEmvRequest::rear_camera_flag() const {
  return rear_camera_flag_ ? &(*rear_camera_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_rear_camera_flag(const FullIntegrationRearCameraFlag* value_arg) {
  rear_camera_flag_ = value_arg ? std::optional<FullIntegrationRearCameraFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_rear_camera_flag(const FullIntegrationRearCameraFlag& value_arg) {
  rear_camera_flag_ = value_arg;
}


const FullIntegrationAdditionalPrompts* FullIntegrationInputAccountWithEmvRequest::additional_prompts() const {
  return additional_prompts_ ? &(*additional_prompts_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_additional_prompts(const FullIntegrationAdditionalPrompts* value_arg) {
  additional_prompts_ = value_arg ? std::optional<FullIntegrationAdditionalPrompts>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_additional_prompts(const FullIntegrationAdditionalPrompts& value_arg) {
  additional_prompts_ = value_arg;
}


const FullIntegrationDataEncryptionFlag* FullIntegrationInputAccountWithEmvRequest::encryption_flag() const {
  return encryption_flag_ ? &(*encryption_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_encryption_flag(const FullIntegrationDataEncryptionFlag* value_arg) {
  encryption_flag_ = value_arg ? std::optional<FullIntegrationDataEncryptionFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_encryption_flag(const FullIntegrationDataEncryptionFlag& value_arg) {
  encryption_flag_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvRequest::key_slot() const {
  return key_slot_ ? &(*key_slot_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_key_slot(const std::string_view* value_arg) {
  key_slot_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_key_slot(std::string_view value_arg) {
  key_slot_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvRequest::padding_char() const {
  return padding_char_ ? &(*padding_char_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_padding_char(const std::string_view* value_arg) {
  padding_char_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_padding_char(std::string_view value_arg) {
  padding_char_ = value_arg;
}


const FullIntegrationTrackDataSentinel* FullIntegrationInputAccountWithEmvRequest::track_data_sentinel() const {
  return track_data_sentinel_ ? &(*track_data_sentinel_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_track_data_sentinel(const FullIntegrationTrackDataSentinel* value_arg) {
  track_data_sentinel_ = value_arg ? std::optional<FullIntegrationTrackDataSentinel>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_track_data_sentinel(const FullIntegrationTrackDataSentinel& value_arg) {
  track_data_sentinel_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvRequest::min_account_length() const {
  return min_account_length_ ? &(*min_account_length_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_min_account_length(const std::string_view* value_arg) {
  min_account_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_min_account_length(std::string_view value_arg) {
  min_account_length_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvRequest::max_account_length() const {
  return max_account_length_ ? &(*max_account_length_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_max_account_length(const std::string_view* value_arg) {
  max_account_length_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_max_account_length(std::string_view value_arg) {
  max_account_length_ = value_arg;
}


const FullIntegrationTerminalConfiguration* FullIntegrationInputAccountWithEmvRequest::terminal_configuration() const {
  return terminal_configuration_ ? &(*terminal_configuration_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_terminal_configuration(const FullIntegrationTerminalConfiguration* value_arg) {
  terminal_configuration_ = value_arg ? std::optional<FullIntegrationTerminalConfiguration>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_terminal_configuration(const FullIntegrationTerminalConfiguration& value_arg) {
  terminal_configuration_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvRequest::tag_list() const {
  return tag_list_ ? &(*tag_list_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_tag_list(const std::string_view* value_arg) {
  tag_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_tag_list(std::string_view value_arg) {
  tag_list_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


const FullIntegrationStatusReportFlag* FullIntegrationInputAccountWithEmvRequest::status_report_flag() const {
  return status_report_flag_ ? &(*status_report_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_status_report_flag(const FullIntegrationStatusReportFlag* value_arg) {
  status_report_flag_ = value_arg ? std::optional<FullIntegrationStatusReportFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_status_report_flag(const FullIntegrationStatusReportFlag& value_arg) {
  status_report_flag_ = value_arg;
}


const FullIntegrationContinuousScreen* FullIntegrationInputAccountWithEmvRequest::continuous_screen() const {
  return continuous_screen_ ? &(*continuous_screen_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_continuous_screen(const FullIntegrationContinuousScreen* value_arg) {
  continuous_screen_ = value_arg ? std::optional<FullIntegrationContinuousScreen>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_continuous_screen(const FullIntegrationContinuousScreen& value_arg) {
  continuous_screen_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::fallback_insert_pinpad_enable_flag() const {
  return fallback_insert_pinpad_enable_flag_ ? &(*fallback_insert_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_fallback_insert_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  fallback_insert_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_fallback_insert_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  fallback_insert_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationKsnFlag* FullIntegrationInputAccountWithEmvRequest::ksn_flag() const {
  return ksn_flag_ ? &(*ksn_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_ksn_flag(const FullIntegrationKsnFlag* value_arg) {
  ksn_flag_ = value_arg ? std::optional<FullIntegrationKsnFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_ksn_flag(const FullIntegrationKsnFlag& value_arg) {
  ksn_flag_ = value_arg;
}


const EncodableList* FullIntegrationInputAccountWithEmvRequest::custom_data() const {
  return custom_data_ ? &(*custom_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_custom_data(const EncodableList* value_arg) {
  custom_data_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_custom_data(const EncodableList& value_arg) {
  custom_data_ = value_arg;
}


const FullIntegrationPinpadEnableFlag* FullIntegrationInputAccountWithEmvRequest::fallback_to_manual_pinpad_enable_flag() const {
  return fallback_to_manual_pinpad_enable_flag_ ? &(*fallback_to_manual_pinpad_enable_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_fallback_to_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg) {
  fallback_to_manual_pinpad_enable_flag_ = value_arg ? std::optional<FullIntegrationPinpadEnableFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_fallback_to_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg) {
  fallback_to_manual_pinpad_enable_flag_ = value_arg;
}


const FullIntegrationCustomMacInformationRequest* FullIntegrationInputAccountWithEmvRequest::custom_mac_information() const {
  return custom_mac_information_ ? &(*custom_mac_information_) : nullptr;
}

void FullIntegrationInputAccountWithEmvRequest::set_custom_mac_information(const FullIntegrationCustomMacInformationRequest* value_arg) {
  custom_mac_information_ = value_arg ? std::optional<FullIntegrationCustomMacInformationRequest>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvRequest::set_custom_mac_information(const FullIntegrationCustomMacInformationRequest& value_arg) {
  custom_mac_information_ = value_arg;
}


EncodableList FullIntegrationInputAccountWithEmvRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(31);
  list.push_back(edc_type_ ? EncodableValue((int)(*edc_type_)) : EncodableValue());
  list.push_back(transaction_type_ ? EncodableValue((int)(*transaction_type_)) : EncodableValue());
  list.push_back(amount_information_ ? EncodableValue(amount_information_->ToEncodableList()) : EncodableValue());
  list.push_back(magnetic_swipe_pinpad_enable_flag_ ? EncodableValue((int)(*magnetic_swipe_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(magnetic_swipe_pinpad_type_flag_ ? EncodableValue((int)(*magnetic_swipe_pinpad_type_flag_)) : EncodableValue());
  list.push_back(manual_pinpad_enable_flag_ ? EncodableValue((int)(*manual_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(contactless_pinpad_enable_flag_ ? EncodableValue((int)(*contactless_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(contactless_pinpad_type_flag_ ? EncodableValue((int)(*contactless_pinpad_type_flag_)) : EncodableValue());
  list.push_back(contact_emv_pinpad_enable_flag_ ? EncodableValue((int)(*contact_emv_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(contact_emv_pinpad_type_flag_ ? EncodableValue((int)(*contact_emv_pinpad_type_flag_)) : EncodableValue());
  list.push_back(fallback_swipe_pinpad_enable_flag_ ? EncodableValue((int)(*fallback_swipe_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(laser_scanner_flag_ ? EncodableValue((int)(*laser_scanner_flag_)) : EncodableValue());
  list.push_back(front_camera_flag_ ? EncodableValue((int)(*front_camera_flag_)) : EncodableValue());
  list.push_back(rear_camera_flag_ ? EncodableValue((int)(*rear_camera_flag_)) : EncodableValue());
  list.push_back(additional_prompts_ ? EncodableValue(additional_prompts_->ToEncodableList()) : EncodableValue());
  list.push_back(encryption_flag_ ? EncodableValue((int)(*encryption_flag_)) : EncodableValue());
  list.push_back(key_slot_ ? EncodableValue(*key_slot_) : EncodableValue());
  list.push_back(padding_char_ ? EncodableValue(*padding_char_) : EncodableValue());
  list.push_back(track_data_sentinel_ ? EncodableValue((int)(*track_data_sentinel_)) : EncodableValue());
  list.push_back(min_account_length_ ? EncodableValue(*min_account_length_) : EncodableValue());
  list.push_back(max_account_length_ ? EncodableValue(*max_account_length_) : EncodableValue());
  list.push_back(terminal_configuration_ ? EncodableValue(terminal_configuration_->ToEncodableList()) : EncodableValue());
  list.push_back(tag_list_ ? EncodableValue(*tag_list_) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  list.push_back(status_report_flag_ ? EncodableValue((int)(*status_report_flag_)) : EncodableValue());
  list.push_back(continuous_screen_ ? EncodableValue((int)(*continuous_screen_)) : EncodableValue());
  list.push_back(fallback_insert_pinpad_enable_flag_ ? EncodableValue((int)(*fallback_insert_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(ksn_flag_ ? EncodableValue((int)(*ksn_flag_)) : EncodableValue());
  list.push_back(custom_data_ ? EncodableValue(*custom_data_) : EncodableValue());
  list.push_back(fallback_to_manual_pinpad_enable_flag_ ? EncodableValue((int)(*fallback_to_manual_pinpad_enable_flag_)) : EncodableValue());
  list.push_back(custom_mac_information_ ? EncodableValue(custom_mac_information_->ToEncodableList()) : EncodableValue());
  return list;
}

FullIntegrationInputAccountWithEmvRequest FullIntegrationInputAccountWithEmvRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationInputAccountWithEmvRequest decoded;
  auto& encodable_edc_type = list[0];
  if (!encodable_edc_type.IsNull()) {
    decoded.set_edc_type((FullIntegrationEdcType)(std::get<int32_t>(encodable_edc_type)));
  }
  auto& encodable_transaction_type = list[1];
  if (!encodable_transaction_type.IsNull()) {
    decoded.set_transaction_type((FullIntegrationTransactionType)(std::get<int32_t>(encodable_transaction_type)));
  }
  auto& encodable_amount_information = list[2];
  if (!encodable_amount_information.IsNull()) {
    decoded.set_amount_information(FullIntegrationAmountRequest::FromEncodableList(std::get<EncodableList>(encodable_amount_information)));
  }
  auto& encodable_magnetic_swipe_pinpad_enable_flag = list[3];
  if (!encodable_magnetic_swipe_pinpad_enable_flag.IsNull()) {
    decoded.set_magnetic_swipe_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_magnetic_swipe_pinpad_enable_flag)));
  }
  auto& encodable_magnetic_swipe_pinpad_type_flag = list[4];
  if (!encodable_magnetic_swipe_pinpad_type_flag.IsNull()) {
    decoded.set_magnetic_swipe_pinpad_type_flag((FullIntegrationPinpadTypeFlag)(std::get<int32_t>(encodable_magnetic_swipe_pinpad_type_flag)));
  }
  auto& encodable_manual_pinpad_enable_flag = list[5];
  if (!encodable_manual_pinpad_enable_flag.IsNull()) {
    decoded.set_manual_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_manual_pinpad_enable_flag)));
  }
  auto& encodable_contactless_pinpad_enable_flag = list[6];
  if (!encodable_contactless_pinpad_enable_flag.IsNull()) {
    decoded.set_contactless_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_contactless_pinpad_enable_flag)));
  }
  auto& encodable_contactless_pinpad_type_flag = list[7];
  if (!encodable_contactless_pinpad_type_flag.IsNull()) {
    decoded.set_contactless_pinpad_type_flag((FullIntegrationPinpadTypeFlag)(std::get<int32_t>(encodable_contactless_pinpad_type_flag)));
  }
  auto& encodable_contact_emv_pinpad_enable_flag = list[8];
  if (!encodable_contact_emv_pinpad_enable_flag.IsNull()) {
    decoded.set_contact_emv_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_contact_emv_pinpad_enable_flag)));
  }
  auto& encodable_contact_emv_pinpad_type_flag = list[9];
  if (!encodable_contact_emv_pinpad_type_flag.IsNull()) {
    decoded.set_contact_emv_pinpad_type_flag((FullIntegrationPinpadTypeFlag)(std::get<int32_t>(encodable_contact_emv_pinpad_type_flag)));
  }
  auto& encodable_fallback_swipe_pinpad_enable_flag = list[10];
  if (!encodable_fallback_swipe_pinpad_enable_flag.IsNull()) {
    decoded.set_fallback_swipe_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_fallback_swipe_pinpad_enable_flag)));
  }
  auto& encodable_laser_scanner_flag = list[11];
  if (!encodable_laser_scanner_flag.IsNull()) {
    decoded.set_laser_scanner_flag((FullIntegrationLaserScannerFlag)(std::get<int32_t>(encodable_laser_scanner_flag)));
  }
  auto& encodable_front_camera_flag = list[12];
  if (!encodable_front_camera_flag.IsNull()) {
    decoded.set_front_camera_flag((FullIntegrationFrontCameraFlag)(std::get<int32_t>(encodable_front_camera_flag)));
  }
  auto& encodable_rear_camera_flag = list[13];
  if (!encodable_rear_camera_flag.IsNull()) {
    decoded.set_rear_camera_flag((FullIntegrationRearCameraFlag)(std::get<int32_t>(encodable_rear_camera_flag)));
  }
  auto& encodable_additional_prompts = list[14];
  if (!encodable_additional_prompts.IsNull()) {
    decoded.set_additional_prompts(FullIntegrationAdditionalPrompts::FromEncodableList(std::get<EncodableList>(encodable_additional_prompts)));
  }
  auto& encodable_encryption_flag = list[15];
  if (!encodable_encryption_flag.IsNull()) {
    decoded.set_encryption_flag((FullIntegrationDataEncryptionFlag)(std::get<int32_t>(encodable_encryption_flag)));
  }
  auto& encodable_key_slot = list[16];
  if (!encodable_key_slot.IsNull()) {
    decoded.set_key_slot(std::get<std::string>(encodable_key_slot));
  }
  auto& encodable_padding_char = list[17];
  if (!encodable_padding_char.IsNull()) {
    decoded.set_padding_char(std::get<std::string>(encodable_padding_char));
  }
  auto& encodable_track_data_sentinel = list[18];
  if (!encodable_track_data_sentinel.IsNull()) {
    decoded.set_track_data_sentinel((FullIntegrationTrackDataSentinel)(std::get<int32_t>(encodable_track_data_sentinel)));
  }
  auto& encodable_min_account_length = list[19];
  if (!encodable_min_account_length.IsNull()) {
    decoded.set_min_account_length(std::get<std::string>(encodable_min_account_length));
  }
  auto& encodable_max_account_length = list[20];
  if (!encodable_max_account_length.IsNull()) {
    decoded.set_max_account_length(std::get<std::string>(encodable_max_account_length));
  }
  auto& encodable_terminal_configuration = list[21];
  if (!encodable_terminal_configuration.IsNull()) {
    decoded.set_terminal_configuration(FullIntegrationTerminalConfiguration::FromEncodableList(std::get<EncodableList>(encodable_terminal_configuration)));
  }
  auto& encodable_tag_list = list[22];
  if (!encodable_tag_list.IsNull()) {
    decoded.set_tag_list(std::get<std::string>(encodable_tag_list));
  }
  auto& encodable_timeout = list[23];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  auto& encodable_status_report_flag = list[24];
  if (!encodable_status_report_flag.IsNull()) {
    decoded.set_status_report_flag((FullIntegrationStatusReportFlag)(std::get<int32_t>(encodable_status_report_flag)));
  }
  auto& encodable_continuous_screen = list[25];
  if (!encodable_continuous_screen.IsNull()) {
    decoded.set_continuous_screen((FullIntegrationContinuousScreen)(std::get<int32_t>(encodable_continuous_screen)));
  }
  auto& encodable_fallback_insert_pinpad_enable_flag = list[26];
  if (!encodable_fallback_insert_pinpad_enable_flag.IsNull()) {
    decoded.set_fallback_insert_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_fallback_insert_pinpad_enable_flag)));
  }
  auto& encodable_ksn_flag = list[27];
  if (!encodable_ksn_flag.IsNull()) {
    decoded.set_ksn_flag((FullIntegrationKsnFlag)(std::get<int32_t>(encodable_ksn_flag)));
  }
  auto& encodable_custom_data = list[28];
  if (!encodable_custom_data.IsNull()) {
    decoded.set_custom_data(std::get<EncodableList>(encodable_custom_data));
  }
  auto& encodable_fallback_to_manual_pinpad_enable_flag = list[29];
  if (!encodable_fallback_to_manual_pinpad_enable_flag.IsNull()) {
    decoded.set_fallback_to_manual_pinpad_enable_flag((FullIntegrationPinpadEnableFlag)(std::get<int32_t>(encodable_fallback_to_manual_pinpad_enable_flag)));
  }
  auto& encodable_custom_mac_information = list[30];
  if (!encodable_custom_mac_information.IsNull()) {
    decoded.set_custom_mac_information(FullIntegrationCustomMacInformationRequest::FromEncodableList(std::get<EncodableList>(encodable_custom_mac_information)));
  }
  return decoded;
}

// FullIntegrationGetEmvTlvDataRequest

FullIntegrationGetEmvTlvDataRequest::FullIntegrationGetEmvTlvDataRequest() {}

FullIntegrationGetEmvTlvDataRequest::FullIntegrationGetEmvTlvDataRequest(
  const FullIntegrationTlvType* tlv_type,
  const std::string* tag_list)
 : tlv_type_(tlv_type ? std::optional<FullIntegrationTlvType>(*tlv_type) : std::nullopt),
    tag_list_(tag_list ? std::optional<std::string>(*tag_list) : std::nullopt) {}

const FullIntegrationTlvType* FullIntegrationGetEmvTlvDataRequest::tlv_type() const {
  return tlv_type_ ? &(*tlv_type_) : nullptr;
}

void FullIntegrationGetEmvTlvDataRequest::set_tlv_type(const FullIntegrationTlvType* value_arg) {
  tlv_type_ = value_arg ? std::optional<FullIntegrationTlvType>(*value_arg) : std::nullopt;
}

void FullIntegrationGetEmvTlvDataRequest::set_tlv_type(const FullIntegrationTlvType& value_arg) {
  tlv_type_ = value_arg;
}


const std::string* FullIntegrationGetEmvTlvDataRequest::tag_list() const {
  return tag_list_ ? &(*tag_list_) : nullptr;
}

void FullIntegrationGetEmvTlvDataRequest::set_tag_list(const std::string_view* value_arg) {
  tag_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetEmvTlvDataRequest::set_tag_list(std::string_view value_arg) {
  tag_list_ = value_arg;
}


EncodableList FullIntegrationGetEmvTlvDataRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(tlv_type_ ? EncodableValue((int)(*tlv_type_)) : EncodableValue());
  list.push_back(tag_list_ ? EncodableValue(*tag_list_) : EncodableValue());
  return list;
}

FullIntegrationGetEmvTlvDataRequest FullIntegrationGetEmvTlvDataRequest::FromEncodableList(const EncodableList& list) {
  FullIntegrationGetEmvTlvDataRequest decoded;
  auto& encodable_tlv_type = list[0];
  if (!encodable_tlv_type.IsNull()) {
    decoded.set_tlv_type((FullIntegrationTlvType)(std::get<int32_t>(encodable_tlv_type)));
  }
  auto& encodable_tag_list = list[1];
  if (!encodable_tag_list.IsNull()) {
    decoded.set_tag_list(std::get<std::string>(encodable_tag_list));
  }
  return decoded;
}

// FullIntegrationAuthorizeCardResponse

FullIntegrationAuthorizeCardResponse::FullIntegrationAuthorizeCardResponse() {}

FullIntegrationAuthorizeCardResponse::FullIntegrationAuthorizeCardResponse(
  const std::string* response_code,
  const std::string* response_message,
  const FullIntegrationFirstGacResult* authorization_result,
  const FullIntegrationSignatureFlag* signature_flag,
  const FullIntegrationPinBypassStatus* pin_bypass_status,
  const std::string* pin_block,
  const std::string* ksn,
  const std::string* emv_tlv_data,
  const FullIntegrationCardholderVerificationMethod* cvm,
  const FullIntegrationPinpadType* pinpad_type)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    authorization_result_(authorization_result ? std::optional<FullIntegrationFirstGacResult>(*authorization_result) : std::nullopt),
    signature_flag_(signature_flag ? std::optional<FullIntegrationSignatureFlag>(*signature_flag) : std::nullopt),
    pin_bypass_status_(pin_bypass_status ? std::optional<FullIntegrationPinBypassStatus>(*pin_bypass_status) : std::nullopt),
    pin_block_(pin_block ? std::optional<std::string>(*pin_block) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt),
    emv_tlv_data_(emv_tlv_data ? std::optional<std::string>(*emv_tlv_data) : std::nullopt),
    cvm_(cvm ? std::optional<FullIntegrationCardholderVerificationMethod>(*cvm) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FullIntegrationPinpadType>(*pinpad_type) : std::nullopt) {}

const std::string* FullIntegrationAuthorizeCardResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const FullIntegrationFirstGacResult* FullIntegrationAuthorizeCardResponse::authorization_result() const {
  return authorization_result_ ? &(*authorization_result_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_authorization_result(const FullIntegrationFirstGacResult* value_arg) {
  authorization_result_ = value_arg ? std::optional<FullIntegrationFirstGacResult>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_authorization_result(const FullIntegrationFirstGacResult& value_arg) {
  authorization_result_ = value_arg;
}


const FullIntegrationSignatureFlag* FullIntegrationAuthorizeCardResponse::signature_flag() const {
  return signature_flag_ ? &(*signature_flag_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_signature_flag(const FullIntegrationSignatureFlag* value_arg) {
  signature_flag_ = value_arg ? std::optional<FullIntegrationSignatureFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_signature_flag(const FullIntegrationSignatureFlag& value_arg) {
  signature_flag_ = value_arg;
}


const FullIntegrationPinBypassStatus* FullIntegrationAuthorizeCardResponse::pin_bypass_status() const {
  return pin_bypass_status_ ? &(*pin_bypass_status_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_pin_bypass_status(const FullIntegrationPinBypassStatus* value_arg) {
  pin_bypass_status_ = value_arg ? std::optional<FullIntegrationPinBypassStatus>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_pin_bypass_status(const FullIntegrationPinBypassStatus& value_arg) {
  pin_bypass_status_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardResponse::pin_block() const {
  return pin_block_ ? &(*pin_block_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_pin_block(const std::string_view* value_arg) {
  pin_block_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_pin_block(std::string_view value_arg) {
  pin_block_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardResponse::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


const std::string* FullIntegrationAuthorizeCardResponse::emv_tlv_data() const {
  return emv_tlv_data_ ? &(*emv_tlv_data_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_emv_tlv_data(const std::string_view* value_arg) {
  emv_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_emv_tlv_data(std::string_view value_arg) {
  emv_tlv_data_ = value_arg;
}


const FullIntegrationCardholderVerificationMethod* FullIntegrationAuthorizeCardResponse::cvm() const {
  return cvm_ ? &(*cvm_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_cvm(const FullIntegrationCardholderVerificationMethod* value_arg) {
  cvm_ = value_arg ? std::optional<FullIntegrationCardholderVerificationMethod>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_cvm(const FullIntegrationCardholderVerificationMethod& value_arg) {
  cvm_ = value_arg;
}


const FullIntegrationPinpadType* FullIntegrationAuthorizeCardResponse::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FullIntegrationAuthorizeCardResponse::set_pinpad_type(const FullIntegrationPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FullIntegrationPinpadType>(*value_arg) : std::nullopt;
}

void FullIntegrationAuthorizeCardResponse::set_pinpad_type(const FullIntegrationPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


EncodableList FullIntegrationAuthorizeCardResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(10);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(authorization_result_ ? EncodableValue((int)(*authorization_result_)) : EncodableValue());
  list.push_back(signature_flag_ ? EncodableValue((int)(*signature_flag_)) : EncodableValue());
  list.push_back(pin_bypass_status_ ? EncodableValue((int)(*pin_bypass_status_)) : EncodableValue());
  list.push_back(pin_block_ ? EncodableValue(*pin_block_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  list.push_back(emv_tlv_data_ ? EncodableValue(*emv_tlv_data_) : EncodableValue());
  list.push_back(cvm_ ? EncodableValue((int)(*cvm_)) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  return list;
}

FullIntegrationAuthorizeCardResponse FullIntegrationAuthorizeCardResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationAuthorizeCardResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_authorization_result = list[2];
  if (!encodable_authorization_result.IsNull()) {
    decoded.set_authorization_result((FullIntegrationFirstGacResult)(std::get<int32_t>(encodable_authorization_result)));
  }
  auto& encodable_signature_flag = list[3];
  if (!encodable_signature_flag.IsNull()) {
    decoded.set_signature_flag((FullIntegrationSignatureFlag)(std::get<int32_t>(encodable_signature_flag)));
  }
  auto& encodable_pin_bypass_status = list[4];
  if (!encodable_pin_bypass_status.IsNull()) {
    decoded.set_pin_bypass_status((FullIntegrationPinBypassStatus)(std::get<int32_t>(encodable_pin_bypass_status)));
  }
  auto& encodable_pin_block = list[5];
  if (!encodable_pin_block.IsNull()) {
    decoded.set_pin_block(std::get<std::string>(encodable_pin_block));
  }
  auto& encodable_ksn = list[6];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  auto& encodable_emv_tlv_data = list[7];
  if (!encodable_emv_tlv_data.IsNull()) {
    decoded.set_emv_tlv_data(std::get<std::string>(encodable_emv_tlv_data));
  }
  auto& encodable_cvm = list[8];
  if (!encodable_cvm.IsNull()) {
    decoded.set_cvm((FullIntegrationCardholderVerificationMethod)(std::get<int32_t>(encodable_cvm)));
  }
  auto& encodable_pinpad_type = list[9];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FullIntegrationPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  return decoded;
}

// FullIntegrationCompleteOnlineEmvResponse

FullIntegrationCompleteOnlineEmvResponse::FullIntegrationCompleteOnlineEmvResponse() {}

FullIntegrationCompleteOnlineEmvResponse::FullIntegrationCompleteOnlineEmvResponse(
  const std::string* response_code,
  const std::string* response_message,
  const FullIntegrationSecondGacResult* authorization_result,
  const std::string* emv_tlv_data,
  const std::string* issuer_script_results)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    authorization_result_(authorization_result ? std::optional<FullIntegrationSecondGacResult>(*authorization_result) : std::nullopt),
    emv_tlv_data_(emv_tlv_data ? std::optional<std::string>(*emv_tlv_data) : std::nullopt),
    issuer_script_results_(issuer_script_results ? std::optional<std::string>(*issuer_script_results) : std::nullopt) {}

const std::string* FullIntegrationCompleteOnlineEmvResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const FullIntegrationSecondGacResult* FullIntegrationCompleteOnlineEmvResponse::authorization_result() const {
  return authorization_result_ ? &(*authorization_result_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvResponse::set_authorization_result(const FullIntegrationSecondGacResult* value_arg) {
  authorization_result_ = value_arg ? std::optional<FullIntegrationSecondGacResult>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvResponse::set_authorization_result(const FullIntegrationSecondGacResult& value_arg) {
  authorization_result_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvResponse::emv_tlv_data() const {
  return emv_tlv_data_ ? &(*emv_tlv_data_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvResponse::set_emv_tlv_data(const std::string_view* value_arg) {
  emv_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvResponse::set_emv_tlv_data(std::string_view value_arg) {
  emv_tlv_data_ = value_arg;
}


const std::string* FullIntegrationCompleteOnlineEmvResponse::issuer_script_results() const {
  return issuer_script_results_ ? &(*issuer_script_results_) : nullptr;
}

void FullIntegrationCompleteOnlineEmvResponse::set_issuer_script_results(const std::string_view* value_arg) {
  issuer_script_results_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCompleteOnlineEmvResponse::set_issuer_script_results(std::string_view value_arg) {
  issuer_script_results_ = value_arg;
}


EncodableList FullIntegrationCompleteOnlineEmvResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(authorization_result_ ? EncodableValue((int)(*authorization_result_)) : EncodableValue());
  list.push_back(emv_tlv_data_ ? EncodableValue(*emv_tlv_data_) : EncodableValue());
  list.push_back(issuer_script_results_ ? EncodableValue(*issuer_script_results_) : EncodableValue());
  return list;
}

FullIntegrationCompleteOnlineEmvResponse FullIntegrationCompleteOnlineEmvResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationCompleteOnlineEmvResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_authorization_result = list[2];
  if (!encodable_authorization_result.IsNull()) {
    decoded.set_authorization_result((FullIntegrationSecondGacResult)(std::get<int32_t>(encodable_authorization_result)));
  }
  auto& encodable_emv_tlv_data = list[3];
  if (!encodable_emv_tlv_data.IsNull()) {
    decoded.set_emv_tlv_data(std::get<std::string>(encodable_emv_tlv_data));
  }
  auto& encodable_issuer_script_results = list[4];
  if (!encodable_issuer_script_results.IsNull()) {
    decoded.set_issuer_script_results(std::get<std::string>(encodable_issuer_script_results));
  }
  return decoded;
}

// FullIntegrationSetEmvTlvDataResponse

FullIntegrationSetEmvTlvDataResponse::FullIntegrationSetEmvTlvDataResponse() {}

FullIntegrationSetEmvTlvDataResponse::FullIntegrationSetEmvTlvDataResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* tag_list)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    tag_list_(tag_list ? std::optional<std::string>(*tag_list) : std::nullopt) {}

const std::string* FullIntegrationSetEmvTlvDataResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationSetEmvTlvDataResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationSetEmvTlvDataResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationSetEmvTlvDataResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FullIntegrationSetEmvTlvDataResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationSetEmvTlvDataResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FullIntegrationSetEmvTlvDataResponse::tag_list() const {
  return tag_list_ ? &(*tag_list_) : nullptr;
}

void FullIntegrationSetEmvTlvDataResponse::set_tag_list(const std::string_view* value_arg) {
  tag_list_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationSetEmvTlvDataResponse::set_tag_list(std::string_view value_arg) {
  tag_list_ = value_arg;
}


EncodableList FullIntegrationSetEmvTlvDataResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(tag_list_ ? EncodableValue(*tag_list_) : EncodableValue());
  return list;
}

FullIntegrationSetEmvTlvDataResponse FullIntegrationSetEmvTlvDataResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationSetEmvTlvDataResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_tag_list = list[2];
  if (!encodable_tag_list.IsNull()) {
    decoded.set_tag_list(std::get<std::string>(encodable_tag_list));
  }
  return decoded;
}

// FullIntegrationGetPinBlockResponse

FullIntegrationGetPinBlockResponse::FullIntegrationGetPinBlockResponse() {}

FullIntegrationGetPinBlockResponse::FullIntegrationGetPinBlockResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* pin_block,
  const std::string* ksn,
  const FullIntegrationPinpadType* pinpad_type)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    pin_block_(pin_block ? std::optional<std::string>(*pin_block) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FullIntegrationPinpadType>(*pinpad_type) : std::nullopt) {}

const std::string* FullIntegrationGetPinBlockResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationGetPinBlockResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FullIntegrationGetPinBlockResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockResponse::pin_block() const {
  return pin_block_ ? &(*pin_block_) : nullptr;
}

void FullIntegrationGetPinBlockResponse::set_pin_block(const std::string_view* value_arg) {
  pin_block_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockResponse::set_pin_block(std::string_view value_arg) {
  pin_block_ = value_arg;
}


const std::string* FullIntegrationGetPinBlockResponse::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void FullIntegrationGetPinBlockResponse::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockResponse::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


const FullIntegrationPinpadType* FullIntegrationGetPinBlockResponse::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FullIntegrationGetPinBlockResponse::set_pinpad_type(const FullIntegrationPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FullIntegrationPinpadType>(*value_arg) : std::nullopt;
}

void FullIntegrationGetPinBlockResponse::set_pinpad_type(const FullIntegrationPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


EncodableList FullIntegrationGetPinBlockResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(pin_block_ ? EncodableValue(*pin_block_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  return list;
}

FullIntegrationGetPinBlockResponse FullIntegrationGetPinBlockResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationGetPinBlockResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_pin_block = list[2];
  if (!encodable_pin_block.IsNull()) {
    decoded.set_pin_block(std::get<std::string>(encodable_pin_block));
  }
  auto& encodable_ksn = list[3];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  auto& encodable_pinpad_type = list[4];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FullIntegrationPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  return decoded;
}

// FullIntegrationCustomMacDataResponse

FullIntegrationCustomMacDataResponse::FullIntegrationCustomMacDataResponse() {}

FullIntegrationCustomMacDataResponse::FullIntegrationCustomMacDataResponse(
  const EncodableList* data,
  const std::string* ksn)
 : data_(data ? std::optional<EncodableList>(*data) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt) {}

const EncodableList* FullIntegrationCustomMacDataResponse::data() const {
  return data_ ? &(*data_) : nullptr;
}

void FullIntegrationCustomMacDataResponse::set_data(const EncodableList* value_arg) {
  data_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FullIntegrationCustomMacDataResponse::set_data(const EncodableList& value_arg) {
  data_ = value_arg;
}


const std::string* FullIntegrationCustomMacDataResponse::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void FullIntegrationCustomMacDataResponse::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationCustomMacDataResponse::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


EncodableList FullIntegrationCustomMacDataResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(data_ ? EncodableValue(*data_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  return list;
}

FullIntegrationCustomMacDataResponse FullIntegrationCustomMacDataResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationCustomMacDataResponse decoded;
  auto& encodable_data = list[0];
  if (!encodable_data.IsNull()) {
    decoded.set_data(std::get<EncodableList>(encodable_data));
  }
  auto& encodable_ksn = list[1];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  return decoded;
}

// FullIntegrationVasResponse

FullIntegrationVasResponse::FullIntegrationVasResponse() {}

FullIntegrationVasResponse::FullIntegrationVasResponse(
  const FullIntegrationVasResponseCode* vas_code,
  const EncodableList* vas_data,
  const std::string* ndef_data)
 : vas_code_(vas_code ? std::optional<FullIntegrationVasResponseCode>(*vas_code) : std::nullopt),
    vas_data_(vas_data ? std::optional<EncodableList>(*vas_data) : std::nullopt),
    ndef_data_(ndef_data ? std::optional<std::string>(*ndef_data) : std::nullopt) {}

const FullIntegrationVasResponseCode* FullIntegrationVasResponse::vas_code() const {
  return vas_code_ ? &(*vas_code_) : nullptr;
}

void FullIntegrationVasResponse::set_vas_code(const FullIntegrationVasResponseCode* value_arg) {
  vas_code_ = value_arg ? std::optional<FullIntegrationVasResponseCode>(*value_arg) : std::nullopt;
}

void FullIntegrationVasResponse::set_vas_code(const FullIntegrationVasResponseCode& value_arg) {
  vas_code_ = value_arg;
}


const EncodableList* FullIntegrationVasResponse::vas_data() const {
  return vas_data_ ? &(*vas_data_) : nullptr;
}

void FullIntegrationVasResponse::set_vas_data(const EncodableList* value_arg) {
  vas_data_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FullIntegrationVasResponse::set_vas_data(const EncodableList& value_arg) {
  vas_data_ = value_arg;
}


const std::string* FullIntegrationVasResponse::ndef_data() const {
  return ndef_data_ ? &(*ndef_data_) : nullptr;
}

void FullIntegrationVasResponse::set_ndef_data(const std::string_view* value_arg) {
  ndef_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationVasResponse::set_ndef_data(std::string_view value_arg) {
  ndef_data_ = value_arg;
}


EncodableList FullIntegrationVasResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(vas_code_ ? EncodableValue((int)(*vas_code_)) : EncodableValue());
  list.push_back(vas_data_ ? EncodableValue(*vas_data_) : EncodableValue());
  list.push_back(ndef_data_ ? EncodableValue(*ndef_data_) : EncodableValue());
  return list;
}

FullIntegrationVasResponse FullIntegrationVasResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationVasResponse decoded;
  auto& encodable_vas_code = list[0];
  if (!encodable_vas_code.IsNull()) {
    decoded.set_vas_code((FullIntegrationVasResponseCode)(std::get<int32_t>(encodable_vas_code)));
  }
  auto& encodable_vas_data = list[1];
  if (!encodable_vas_data.IsNull()) {
    decoded.set_vas_data(std::get<EncodableList>(encodable_vas_data));
  }
  auto& encodable_ndef_data = list[2];
  if (!encodable_ndef_data.IsNull()) {
    decoded.set_ndef_data(std::get<std::string>(encodable_ndef_data));
  }
  return decoded;
}

// FullIntegrationAdditionalAccountResponse

FullIntegrationAdditionalAccountResponse::FullIntegrationAdditionalAccountResponse() {}

FullIntegrationAdditionalAccountResponse::FullIntegrationAdditionalAccountResponse(
  const std::string* expiry_date,
  const std::string* card_holder_name,
  const std::string* service_code,
  const std::string* cvv_code,
  const std::string* zip_code)
 : expiry_date_(expiry_date ? std::optional<std::string>(*expiry_date) : std::nullopt),
    card_holder_name_(card_holder_name ? std::optional<std::string>(*card_holder_name) : std::nullopt),
    service_code_(service_code ? std::optional<std::string>(*service_code) : std::nullopt),
    cvv_code_(cvv_code ? std::optional<std::string>(*cvv_code) : std::nullopt),
    zip_code_(zip_code ? std::optional<std::string>(*zip_code) : std::nullopt) {}

const std::string* FullIntegrationAdditionalAccountResponse::expiry_date() const {
  return expiry_date_ ? &(*expiry_date_) : nullptr;
}

void FullIntegrationAdditionalAccountResponse::set_expiry_date(const std::string_view* value_arg) {
  expiry_date_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalAccountResponse::set_expiry_date(std::string_view value_arg) {
  expiry_date_ = value_arg;
}


const std::string* FullIntegrationAdditionalAccountResponse::card_holder_name() const {
  return card_holder_name_ ? &(*card_holder_name_) : nullptr;
}

void FullIntegrationAdditionalAccountResponse::set_card_holder_name(const std::string_view* value_arg) {
  card_holder_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalAccountResponse::set_card_holder_name(std::string_view value_arg) {
  card_holder_name_ = value_arg;
}


const std::string* FullIntegrationAdditionalAccountResponse::service_code() const {
  return service_code_ ? &(*service_code_) : nullptr;
}

void FullIntegrationAdditionalAccountResponse::set_service_code(const std::string_view* value_arg) {
  service_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalAccountResponse::set_service_code(std::string_view value_arg) {
  service_code_ = value_arg;
}


const std::string* FullIntegrationAdditionalAccountResponse::cvv_code() const {
  return cvv_code_ ? &(*cvv_code_) : nullptr;
}

void FullIntegrationAdditionalAccountResponse::set_cvv_code(const std::string_view* value_arg) {
  cvv_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalAccountResponse::set_cvv_code(std::string_view value_arg) {
  cvv_code_ = value_arg;
}


const std::string* FullIntegrationAdditionalAccountResponse::zip_code() const {
  return zip_code_ ? &(*zip_code_) : nullptr;
}

void FullIntegrationAdditionalAccountResponse::set_zip_code(const std::string_view* value_arg) {
  zip_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationAdditionalAccountResponse::set_zip_code(std::string_view value_arg) {
  zip_code_ = value_arg;
}


EncodableList FullIntegrationAdditionalAccountResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(expiry_date_ ? EncodableValue(*expiry_date_) : EncodableValue());
  list.push_back(card_holder_name_ ? EncodableValue(*card_holder_name_) : EncodableValue());
  list.push_back(service_code_ ? EncodableValue(*service_code_) : EncodableValue());
  list.push_back(cvv_code_ ? EncodableValue(*cvv_code_) : EncodableValue());
  list.push_back(zip_code_ ? EncodableValue(*zip_code_) : EncodableValue());
  return list;
}

FullIntegrationAdditionalAccountResponse FullIntegrationAdditionalAccountResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationAdditionalAccountResponse decoded;
  auto& encodable_expiry_date = list[0];
  if (!encodable_expiry_date.IsNull()) {
    decoded.set_expiry_date(std::get<std::string>(encodable_expiry_date));
  }
  auto& encodable_card_holder_name = list[1];
  if (!encodable_card_holder_name.IsNull()) {
    decoded.set_card_holder_name(std::get<std::string>(encodable_card_holder_name));
  }
  auto& encodable_service_code = list[2];
  if (!encodable_service_code.IsNull()) {
    decoded.set_service_code(std::get<std::string>(encodable_service_code));
  }
  auto& encodable_cvv_code = list[3];
  if (!encodable_cvv_code.IsNull()) {
    decoded.set_cvv_code(std::get<std::string>(encodable_cvv_code));
  }
  auto& encodable_zip_code = list[4];
  if (!encodable_zip_code.IsNull()) {
    decoded.set_zip_code(std::get<std::string>(encodable_zip_code));
  }
  return decoded;
}

// FullIntegrationInputAccountWithEmvResponse

FullIntegrationInputAccountWithEmvResponse::FullIntegrationInputAccountWithEmvResponse() {}

FullIntegrationInputAccountWithEmvResponse::FullIntegrationInputAccountWithEmvResponse(
  const std::string* response_code,
  const std::string* response_message,
  const FullIntegrationEntryMode* entry_mode,
  const std::string* track1_data,
  const std::string* track2_data,
  const std::string* track3_data,
  const std::string* pan,
  const std::string* masked_pan,
  const FullIntegrationBarcodeType* barcode_type,
  const std::string* barcode_data,
  const std::string* ksn,
  const std::string* etb,
  const FullIntegrationContactlessTransactionPath* contactless_transaction_path,
  const FullIntegrationFirstGacResult* authorization_result,
  const FullIntegrationSignatureFlag* signature_flag,
  const FullIntegrationOnlinePinFlag* online_pin_flag,
  const std::string* emv_tlv_data,
  const std::string* encrypted_emv_tlv_data,
  const std::string* encrypted_sensitive_tlv_data,
  const FullIntegrationAdditionalAccountResponse* additional_account_information,
  const FullIntegrationCardholderVerificationMethod* cvm,
  const FullIntegrationVasResponse* vas_information,
  const FullIntegrationPinpadType* pinpad_type,
  const FullIntegrationLuhnValidationResult* luhn_validation_result,
  const EncodableList* custom_encrypted_data,
  const FullIntegrationCustomMacDataResponse* custom_mac_data)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    entry_mode_(entry_mode ? std::optional<FullIntegrationEntryMode>(*entry_mode) : std::nullopt),
    track1_data_(track1_data ? std::optional<std::string>(*track1_data) : std::nullopt),
    track2_data_(track2_data ? std::optional<std::string>(*track2_data) : std::nullopt),
    track3_data_(track3_data ? std::optional<std::string>(*track3_data) : std::nullopt),
    pan_(pan ? std::optional<std::string>(*pan) : std::nullopt),
    masked_pan_(masked_pan ? std::optional<std::string>(*masked_pan) : std::nullopt),
    barcode_type_(barcode_type ? std::optional<FullIntegrationBarcodeType>(*barcode_type) : std::nullopt),
    barcode_data_(barcode_data ? std::optional<std::string>(*barcode_data) : std::nullopt),
    ksn_(ksn ? std::optional<std::string>(*ksn) : std::nullopt),
    etb_(etb ? std::optional<std::string>(*etb) : std::nullopt),
    contactless_transaction_path_(contactless_transaction_path ? std::optional<FullIntegrationContactlessTransactionPath>(*contactless_transaction_path) : std::nullopt),
    authorization_result_(authorization_result ? std::optional<FullIntegrationFirstGacResult>(*authorization_result) : std::nullopt),
    signature_flag_(signature_flag ? std::optional<FullIntegrationSignatureFlag>(*signature_flag) : std::nullopt),
    online_pin_flag_(online_pin_flag ? std::optional<FullIntegrationOnlinePinFlag>(*online_pin_flag) : std::nullopt),
    emv_tlv_data_(emv_tlv_data ? std::optional<std::string>(*emv_tlv_data) : std::nullopt),
    encrypted_emv_tlv_data_(encrypted_emv_tlv_data ? std::optional<std::string>(*encrypted_emv_tlv_data) : std::nullopt),
    encrypted_sensitive_tlv_data_(encrypted_sensitive_tlv_data ? std::optional<std::string>(*encrypted_sensitive_tlv_data) : std::nullopt),
    additional_account_information_(additional_account_information ? std::optional<FullIntegrationAdditionalAccountResponse>(*additional_account_information) : std::nullopt),
    cvm_(cvm ? std::optional<FullIntegrationCardholderVerificationMethod>(*cvm) : std::nullopt),
    vas_information_(vas_information ? std::optional<FullIntegrationVasResponse>(*vas_information) : std::nullopt),
    pinpad_type_(pinpad_type ? std::optional<FullIntegrationPinpadType>(*pinpad_type) : std::nullopt),
    luhn_validation_result_(luhn_validation_result ? std::optional<FullIntegrationLuhnValidationResult>(*luhn_validation_result) : std::nullopt),
    custom_encrypted_data_(custom_encrypted_data ? std::optional<EncodableList>(*custom_encrypted_data) : std::nullopt),
    custom_mac_data_(custom_mac_data ? std::optional<FullIntegrationCustomMacDataResponse>(*custom_mac_data) : std::nullopt) {}

const std::string* FullIntegrationInputAccountWithEmvResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const FullIntegrationEntryMode* FullIntegrationInputAccountWithEmvResponse::entry_mode() const {
  return entry_mode_ ? &(*entry_mode_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_entry_mode(const FullIntegrationEntryMode* value_arg) {
  entry_mode_ = value_arg ? std::optional<FullIntegrationEntryMode>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_entry_mode(const FullIntegrationEntryMode& value_arg) {
  entry_mode_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::track1_data() const {
  return track1_data_ ? &(*track1_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_track1_data(const std::string_view* value_arg) {
  track1_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_track1_data(std::string_view value_arg) {
  track1_data_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::track2_data() const {
  return track2_data_ ? &(*track2_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_track2_data(const std::string_view* value_arg) {
  track2_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_track2_data(std::string_view value_arg) {
  track2_data_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::track3_data() const {
  return track3_data_ ? &(*track3_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_track3_data(const std::string_view* value_arg) {
  track3_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_track3_data(std::string_view value_arg) {
  track3_data_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::pan() const {
  return pan_ ? &(*pan_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_pan(const std::string_view* value_arg) {
  pan_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_pan(std::string_view value_arg) {
  pan_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::masked_pan() const {
  return masked_pan_ ? &(*masked_pan_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_masked_pan(const std::string_view* value_arg) {
  masked_pan_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_masked_pan(std::string_view value_arg) {
  masked_pan_ = value_arg;
}


const FullIntegrationBarcodeType* FullIntegrationInputAccountWithEmvResponse::barcode_type() const {
  return barcode_type_ ? &(*barcode_type_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_barcode_type(const FullIntegrationBarcodeType* value_arg) {
  barcode_type_ = value_arg ? std::optional<FullIntegrationBarcodeType>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_barcode_type(const FullIntegrationBarcodeType& value_arg) {
  barcode_type_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::barcode_data() const {
  return barcode_data_ ? &(*barcode_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_barcode_data(const std::string_view* value_arg) {
  barcode_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_barcode_data(std::string_view value_arg) {
  barcode_data_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::ksn() const {
  return ksn_ ? &(*ksn_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_ksn(const std::string_view* value_arg) {
  ksn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_ksn(std::string_view value_arg) {
  ksn_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::etb() const {
  return etb_ ? &(*etb_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_etb(const std::string_view* value_arg) {
  etb_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_etb(std::string_view value_arg) {
  etb_ = value_arg;
}


const FullIntegrationContactlessTransactionPath* FullIntegrationInputAccountWithEmvResponse::contactless_transaction_path() const {
  return contactless_transaction_path_ ? &(*contactless_transaction_path_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_contactless_transaction_path(const FullIntegrationContactlessTransactionPath* value_arg) {
  contactless_transaction_path_ = value_arg ? std::optional<FullIntegrationContactlessTransactionPath>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_contactless_transaction_path(const FullIntegrationContactlessTransactionPath& value_arg) {
  contactless_transaction_path_ = value_arg;
}


const FullIntegrationFirstGacResult* FullIntegrationInputAccountWithEmvResponse::authorization_result() const {
  return authorization_result_ ? &(*authorization_result_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_authorization_result(const FullIntegrationFirstGacResult* value_arg) {
  authorization_result_ = value_arg ? std::optional<FullIntegrationFirstGacResult>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_authorization_result(const FullIntegrationFirstGacResult& value_arg) {
  authorization_result_ = value_arg;
}


const FullIntegrationSignatureFlag* FullIntegrationInputAccountWithEmvResponse::signature_flag() const {
  return signature_flag_ ? &(*signature_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_signature_flag(const FullIntegrationSignatureFlag* value_arg) {
  signature_flag_ = value_arg ? std::optional<FullIntegrationSignatureFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_signature_flag(const FullIntegrationSignatureFlag& value_arg) {
  signature_flag_ = value_arg;
}


const FullIntegrationOnlinePinFlag* FullIntegrationInputAccountWithEmvResponse::online_pin_flag() const {
  return online_pin_flag_ ? &(*online_pin_flag_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_online_pin_flag(const FullIntegrationOnlinePinFlag* value_arg) {
  online_pin_flag_ = value_arg ? std::optional<FullIntegrationOnlinePinFlag>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_online_pin_flag(const FullIntegrationOnlinePinFlag& value_arg) {
  online_pin_flag_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::emv_tlv_data() const {
  return emv_tlv_data_ ? &(*emv_tlv_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_emv_tlv_data(const std::string_view* value_arg) {
  emv_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_emv_tlv_data(std::string_view value_arg) {
  emv_tlv_data_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::encrypted_emv_tlv_data() const {
  return encrypted_emv_tlv_data_ ? &(*encrypted_emv_tlv_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_encrypted_emv_tlv_data(const std::string_view* value_arg) {
  encrypted_emv_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_encrypted_emv_tlv_data(std::string_view value_arg) {
  encrypted_emv_tlv_data_ = value_arg;
}


const std::string* FullIntegrationInputAccountWithEmvResponse::encrypted_sensitive_tlv_data() const {
  return encrypted_sensitive_tlv_data_ ? &(*encrypted_sensitive_tlv_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_encrypted_sensitive_tlv_data(const std::string_view* value_arg) {
  encrypted_sensitive_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_encrypted_sensitive_tlv_data(std::string_view value_arg) {
  encrypted_sensitive_tlv_data_ = value_arg;
}


const FullIntegrationAdditionalAccountResponse* FullIntegrationInputAccountWithEmvResponse::additional_account_information() const {
  return additional_account_information_ ? &(*additional_account_information_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_additional_account_information(const FullIntegrationAdditionalAccountResponse* value_arg) {
  additional_account_information_ = value_arg ? std::optional<FullIntegrationAdditionalAccountResponse>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_additional_account_information(const FullIntegrationAdditionalAccountResponse& value_arg) {
  additional_account_information_ = value_arg;
}


const FullIntegrationCardholderVerificationMethod* FullIntegrationInputAccountWithEmvResponse::cvm() const {
  return cvm_ ? &(*cvm_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_cvm(const FullIntegrationCardholderVerificationMethod* value_arg) {
  cvm_ = value_arg ? std::optional<FullIntegrationCardholderVerificationMethod>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_cvm(const FullIntegrationCardholderVerificationMethod& value_arg) {
  cvm_ = value_arg;
}


const FullIntegrationVasResponse* FullIntegrationInputAccountWithEmvResponse::vas_information() const {
  return vas_information_ ? &(*vas_information_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_vas_information(const FullIntegrationVasResponse* value_arg) {
  vas_information_ = value_arg ? std::optional<FullIntegrationVasResponse>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_vas_information(const FullIntegrationVasResponse& value_arg) {
  vas_information_ = value_arg;
}


const FullIntegrationPinpadType* FullIntegrationInputAccountWithEmvResponse::pinpad_type() const {
  return pinpad_type_ ? &(*pinpad_type_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_pinpad_type(const FullIntegrationPinpadType* value_arg) {
  pinpad_type_ = value_arg ? std::optional<FullIntegrationPinpadType>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_pinpad_type(const FullIntegrationPinpadType& value_arg) {
  pinpad_type_ = value_arg;
}


const FullIntegrationLuhnValidationResult* FullIntegrationInputAccountWithEmvResponse::luhn_validation_result() const {
  return luhn_validation_result_ ? &(*luhn_validation_result_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_luhn_validation_result(const FullIntegrationLuhnValidationResult* value_arg) {
  luhn_validation_result_ = value_arg ? std::optional<FullIntegrationLuhnValidationResult>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_luhn_validation_result(const FullIntegrationLuhnValidationResult& value_arg) {
  luhn_validation_result_ = value_arg;
}


const EncodableList* FullIntegrationInputAccountWithEmvResponse::custom_encrypted_data() const {
  return custom_encrypted_data_ ? &(*custom_encrypted_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_custom_encrypted_data(const EncodableList* value_arg) {
  custom_encrypted_data_ = value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_custom_encrypted_data(const EncodableList& value_arg) {
  custom_encrypted_data_ = value_arg;
}


const FullIntegrationCustomMacDataResponse* FullIntegrationInputAccountWithEmvResponse::custom_mac_data() const {
  return custom_mac_data_ ? &(*custom_mac_data_) : nullptr;
}

void FullIntegrationInputAccountWithEmvResponse::set_custom_mac_data(const FullIntegrationCustomMacDataResponse* value_arg) {
  custom_mac_data_ = value_arg ? std::optional<FullIntegrationCustomMacDataResponse>(*value_arg) : std::nullopt;
}

void FullIntegrationInputAccountWithEmvResponse::set_custom_mac_data(const FullIntegrationCustomMacDataResponse& value_arg) {
  custom_mac_data_ = value_arg;
}


EncodableList FullIntegrationInputAccountWithEmvResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(26);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(entry_mode_ ? EncodableValue((int)(*entry_mode_)) : EncodableValue());
  list.push_back(track1_data_ ? EncodableValue(*track1_data_) : EncodableValue());
  list.push_back(track2_data_ ? EncodableValue(*track2_data_) : EncodableValue());
  list.push_back(track3_data_ ? EncodableValue(*track3_data_) : EncodableValue());
  list.push_back(pan_ ? EncodableValue(*pan_) : EncodableValue());
  list.push_back(masked_pan_ ? EncodableValue(*masked_pan_) : EncodableValue());
  list.push_back(barcode_type_ ? EncodableValue((int)(*barcode_type_)) : EncodableValue());
  list.push_back(barcode_data_ ? EncodableValue(*barcode_data_) : EncodableValue());
  list.push_back(ksn_ ? EncodableValue(*ksn_) : EncodableValue());
  list.push_back(etb_ ? EncodableValue(*etb_) : EncodableValue());
  list.push_back(contactless_transaction_path_ ? EncodableValue((int)(*contactless_transaction_path_)) : EncodableValue());
  list.push_back(authorization_result_ ? EncodableValue((int)(*authorization_result_)) : EncodableValue());
  list.push_back(signature_flag_ ? EncodableValue((int)(*signature_flag_)) : EncodableValue());
  list.push_back(online_pin_flag_ ? EncodableValue((int)(*online_pin_flag_)) : EncodableValue());
  list.push_back(emv_tlv_data_ ? EncodableValue(*emv_tlv_data_) : EncodableValue());
  list.push_back(encrypted_emv_tlv_data_ ? EncodableValue(*encrypted_emv_tlv_data_) : EncodableValue());
  list.push_back(encrypted_sensitive_tlv_data_ ? EncodableValue(*encrypted_sensitive_tlv_data_) : EncodableValue());
  list.push_back(additional_account_information_ ? EncodableValue(additional_account_information_->ToEncodableList()) : EncodableValue());
  list.push_back(cvm_ ? EncodableValue((int)(*cvm_)) : EncodableValue());
  list.push_back(vas_information_ ? EncodableValue(vas_information_->ToEncodableList()) : EncodableValue());
  list.push_back(pinpad_type_ ? EncodableValue((int)(*pinpad_type_)) : EncodableValue());
  list.push_back(luhn_validation_result_ ? EncodableValue((int)(*luhn_validation_result_)) : EncodableValue());
  list.push_back(custom_encrypted_data_ ? EncodableValue(*custom_encrypted_data_) : EncodableValue());
  list.push_back(custom_mac_data_ ? EncodableValue(custom_mac_data_->ToEncodableList()) : EncodableValue());
  return list;
}

FullIntegrationInputAccountWithEmvResponse FullIntegrationInputAccountWithEmvResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationInputAccountWithEmvResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_entry_mode = list[2];
  if (!encodable_entry_mode.IsNull()) {
    decoded.set_entry_mode((FullIntegrationEntryMode)(std::get<int32_t>(encodable_entry_mode)));
  }
  auto& encodable_track1_data = list[3];
  if (!encodable_track1_data.IsNull()) {
    decoded.set_track1_data(std::get<std::string>(encodable_track1_data));
  }
  auto& encodable_track2_data = list[4];
  if (!encodable_track2_data.IsNull()) {
    decoded.set_track2_data(std::get<std::string>(encodable_track2_data));
  }
  auto& encodable_track3_data = list[5];
  if (!encodable_track3_data.IsNull()) {
    decoded.set_track3_data(std::get<std::string>(encodable_track3_data));
  }
  auto& encodable_pan = list[6];
  if (!encodable_pan.IsNull()) {
    decoded.set_pan(std::get<std::string>(encodable_pan));
  }
  auto& encodable_masked_pan = list[7];
  if (!encodable_masked_pan.IsNull()) {
    decoded.set_masked_pan(std::get<std::string>(encodable_masked_pan));
  }
  auto& encodable_barcode_type = list[8];
  if (!encodable_barcode_type.IsNull()) {
    decoded.set_barcode_type((FullIntegrationBarcodeType)(std::get<int32_t>(encodable_barcode_type)));
  }
  auto& encodable_barcode_data = list[9];
  if (!encodable_barcode_data.IsNull()) {
    decoded.set_barcode_data(std::get<std::string>(encodable_barcode_data));
  }
  auto& encodable_ksn = list[10];
  if (!encodable_ksn.IsNull()) {
    decoded.set_ksn(std::get<std::string>(encodable_ksn));
  }
  auto& encodable_etb = list[11];
  if (!encodable_etb.IsNull()) {
    decoded.set_etb(std::get<std::string>(encodable_etb));
  }
  auto& encodable_contactless_transaction_path = list[12];
  if (!encodable_contactless_transaction_path.IsNull()) {
    decoded.set_contactless_transaction_path((FullIntegrationContactlessTransactionPath)(std::get<int32_t>(encodable_contactless_transaction_path)));
  }
  auto& encodable_authorization_result = list[13];
  if (!encodable_authorization_result.IsNull()) {
    decoded.set_authorization_result((FullIntegrationFirstGacResult)(std::get<int32_t>(encodable_authorization_result)));
  }
  auto& encodable_signature_flag = list[14];
  if (!encodable_signature_flag.IsNull()) {
    decoded.set_signature_flag((FullIntegrationSignatureFlag)(std::get<int32_t>(encodable_signature_flag)));
  }
  auto& encodable_online_pin_flag = list[15];
  if (!encodable_online_pin_flag.IsNull()) {
    decoded.set_online_pin_flag((FullIntegrationOnlinePinFlag)(std::get<int32_t>(encodable_online_pin_flag)));
  }
  auto& encodable_emv_tlv_data = list[16];
  if (!encodable_emv_tlv_data.IsNull()) {
    decoded.set_emv_tlv_data(std::get<std::string>(encodable_emv_tlv_data));
  }
  auto& encodable_encrypted_emv_tlv_data = list[17];
  if (!encodable_encrypted_emv_tlv_data.IsNull()) {
    decoded.set_encrypted_emv_tlv_data(std::get<std::string>(encodable_encrypted_emv_tlv_data));
  }
  auto& encodable_encrypted_sensitive_tlv_data = list[18];
  if (!encodable_encrypted_sensitive_tlv_data.IsNull()) {
    decoded.set_encrypted_sensitive_tlv_data(std::get<std::string>(encodable_encrypted_sensitive_tlv_data));
  }
  auto& encodable_additional_account_information = list[19];
  if (!encodable_additional_account_information.IsNull()) {
    decoded.set_additional_account_information(FullIntegrationAdditionalAccountResponse::FromEncodableList(std::get<EncodableList>(encodable_additional_account_information)));
  }
  auto& encodable_cvm = list[20];
  if (!encodable_cvm.IsNull()) {
    decoded.set_cvm((FullIntegrationCardholderVerificationMethod)(std::get<int32_t>(encodable_cvm)));
  }
  auto& encodable_vas_information = list[21];
  if (!encodable_vas_information.IsNull()) {
    decoded.set_vas_information(FullIntegrationVasResponse::FromEncodableList(std::get<EncodableList>(encodable_vas_information)));
  }
  auto& encodable_pinpad_type = list[22];
  if (!encodable_pinpad_type.IsNull()) {
    decoded.set_pinpad_type((FullIntegrationPinpadType)(std::get<int32_t>(encodable_pinpad_type)));
  }
  auto& encodable_luhn_validation_result = list[23];
  if (!encodable_luhn_validation_result.IsNull()) {
    decoded.set_luhn_validation_result((FullIntegrationLuhnValidationResult)(std::get<int32_t>(encodable_luhn_validation_result)));
  }
  auto& encodable_custom_encrypted_data = list[24];
  if (!encodable_custom_encrypted_data.IsNull()) {
    decoded.set_custom_encrypted_data(std::get<EncodableList>(encodable_custom_encrypted_data));
  }
  auto& encodable_custom_mac_data = list[25];
  if (!encodable_custom_mac_data.IsNull()) {
    decoded.set_custom_mac_data(FullIntegrationCustomMacDataResponse::FromEncodableList(std::get<EncodableList>(encodable_custom_mac_data)));
  }
  return decoded;
}

// FullIntegrationGetEmvTlvDataResponse

FullIntegrationGetEmvTlvDataResponse::FullIntegrationGetEmvTlvDataResponse() {}

FullIntegrationGetEmvTlvDataResponse::FullIntegrationGetEmvTlvDataResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* emv_tlv_data)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    emv_tlv_data_(emv_tlv_data ? std::optional<std::string>(*emv_tlv_data) : std::nullopt) {}

const std::string* FullIntegrationGetEmvTlvDataResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void FullIntegrationGetEmvTlvDataResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetEmvTlvDataResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* FullIntegrationGetEmvTlvDataResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void FullIntegrationGetEmvTlvDataResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetEmvTlvDataResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* FullIntegrationGetEmvTlvDataResponse::emv_tlv_data() const {
  return emv_tlv_data_ ? &(*emv_tlv_data_) : nullptr;
}

void FullIntegrationGetEmvTlvDataResponse::set_emv_tlv_data(const std::string_view* value_arg) {
  emv_tlv_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void FullIntegrationGetEmvTlvDataResponse::set_emv_tlv_data(std::string_view value_arg) {
  emv_tlv_data_ = value_arg;
}


EncodableList FullIntegrationGetEmvTlvDataResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(emv_tlv_data_ ? EncodableValue(*emv_tlv_data_) : EncodableValue());
  return list;
}

FullIntegrationGetEmvTlvDataResponse FullIntegrationGetEmvTlvDataResponse::FromEncodableList(const EncodableList& list) {
  FullIntegrationGetEmvTlvDataResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_emv_tlv_data = list[2];
  if (!encodable_emv_tlv_data.IsNull()) {
    decoded.set_emv_tlv_data(std::get<std::string>(encodable_emv_tlv_data));
  }
  return decoded;
}


POSLinkFullIntegrationApiCodecSerializer::POSLinkFullIntegrationApiCodecSerializer() {}

EncodableValue POSLinkFullIntegrationApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(FullIntegrationAdditionalAccountResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(FullIntegrationAdditionalPrompts::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(FullIntegrationAmountRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(FullIntegrationAuthorizeCardRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(FullIntegrationAuthorizeCardResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(FullIntegrationCompleteOnlineEmvRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(FullIntegrationCompleteOnlineEmvResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(FullIntegrationCustomMacDataResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 136:
      return CustomEncodableValue(FullIntegrationCustomMacInformationRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 137:
      return CustomEncodableValue(FullIntegrationGetEmvTlvDataRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 138:
      return CustomEncodableValue(FullIntegrationGetEmvTlvDataResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 139:
      return CustomEncodableValue(FullIntegrationGetPinBlockRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 140:
      return CustomEncodableValue(FullIntegrationGetPinBlockResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 141:
      return CustomEncodableValue(FullIntegrationInputAccountWithEmvRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 142:
      return CustomEncodableValue(FullIntegrationInputAccountWithEmvResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 143:
      return CustomEncodableValue(FullIntegrationSetEmvTlvDataRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 144:
      return CustomEncodableValue(FullIntegrationSetEmvTlvDataResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 145:
      return CustomEncodableValue(FullIntegrationTerminalConfiguration::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 146:
      return CustomEncodableValue(FullIntegrationVasResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkFullIntegrationApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(FullIntegrationAdditionalAccountResponse)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationAdditionalAccountResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationAdditionalPrompts)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationAdditionalPrompts>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationAmountRequest)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationAmountRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationAuthorizeCardRequest)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationAuthorizeCardRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationAuthorizeCardResponse)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationAuthorizeCardResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationCompleteOnlineEmvRequest)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationCompleteOnlineEmvRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationCompleteOnlineEmvResponse)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationCompleteOnlineEmvResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationCustomMacDataResponse)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationCustomMacDataResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationCustomMacInformationRequest)) {
      stream->WriteByte(136);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationCustomMacInformationRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationGetEmvTlvDataRequest)) {
      stream->WriteByte(137);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationGetEmvTlvDataRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationGetEmvTlvDataResponse)) {
      stream->WriteByte(138);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationGetEmvTlvDataResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationGetPinBlockRequest)) {
      stream->WriteByte(139);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationGetPinBlockRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationGetPinBlockResponse)) {
      stream->WriteByte(140);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationGetPinBlockResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationInputAccountWithEmvRequest)) {
      stream->WriteByte(141);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationInputAccountWithEmvRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationInputAccountWithEmvResponse)) {
      stream->WriteByte(142);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationInputAccountWithEmvResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationSetEmvTlvDataRequest)) {
      stream->WriteByte(143);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationSetEmvTlvDataRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationSetEmvTlvDataResponse)) {
      stream->WriteByte(144);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationSetEmvTlvDataResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationTerminalConfiguration)) {
      stream->WriteByte(145);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationTerminalConfiguration>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(FullIntegrationVasResponse)) {
      stream->WriteByte(146);
      WriteValue(EncodableValue(std::any_cast<FullIntegrationVasResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkFullIntegrationApi.
const flutter::StandardMessageCodec& POSLinkFullIntegrationApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkFullIntegrationApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkFullIntegrationApi` to handle messages through the `binary_messenger`.
void POSLinkFullIntegrationApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkFullIntegrationApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFullIntegrationApi.getEmvTlvData", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FullIntegrationGetEmvTlvDataRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetEmvTlvData(req_arg, [reply](ErrorOr<FullIntegrationGetEmvTlvDataResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFullIntegrationApi.inputAccountWithEmv", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FullIntegrationInputAccountWithEmvRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->InputAccountWithEmv(req_arg, [reply](ErrorOr<FullIntegrationInputAccountWithEmvResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFullIntegrationApi.completeOnlineEmv", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FullIntegrationCompleteOnlineEmvRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->CompleteOnlineEmv(req_arg, [reply](ErrorOr<FullIntegrationCompleteOnlineEmvResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFullIntegrationApi.authorizeCard", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FullIntegrationAuthorizeCardRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->AuthorizeCard(req_arg, [reply](ErrorOr<FullIntegrationAuthorizeCardResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFullIntegrationApi.getPinBlock", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FullIntegrationGetPinBlockRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->GetPinBlock(req_arg, [reply](ErrorOr<FullIntegrationGetPinBlockResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkFullIntegrationApi.setEmvTlvData", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const FullIntegrationSetEmvTlvDataRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->SetEmvTlvData(req_arg, [reply](ErrorOr<FullIntegrationSetEmvTlvDataResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkFullIntegrationApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkFullIntegrationApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkFullIntegration
