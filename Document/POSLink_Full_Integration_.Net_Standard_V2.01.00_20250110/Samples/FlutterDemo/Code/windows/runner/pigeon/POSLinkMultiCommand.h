// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_POSLINKMULTICOMMAND_POSLINKMULTICOMMAND_H_
#define PIGEON_POSLINKMULTICOMMAND_POSLINKMULTICOMMAND_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkMultiCommand {

// Generated class from Pigeon.

class FlutterError {
 public:
  FlutterError(const std::string& code)
    : code_(code) {}
  FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) { new(&v_) T(rhs); }
  ErrorOr(const T&& rhs) { v_ = std::move(rhs); }
  ErrorOr(const FlutterError& rhs) {
    new(&v_) FlutterError(rhs);
  }
  ErrorOr(const FlutterError&& rhs) { v_ = std::move(rhs); }

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class POSLinkMultiCommandApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class Response {
 public:
  Response();
  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);


 private:
  Response(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class POSLinkMultiCommandApi;
  friend class POSLinkMultiCommandApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;

};

class POSLinkMultiCommandApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:

  inline static POSLinkMultiCommandApiCodecSerializer& GetInstance() {
    static POSLinkMultiCommandApiCodecSerializer sInstance;
    return sInstance;
  }

  POSLinkMultiCommandApiCodecSerializer();

 public:
  void WriteValue(const flutter::EncodableValue& value, flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(uint8_t type, flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class POSLinkMultiCommandApi {
 public:
  POSLinkMultiCommandApi(const POSLinkMultiCommandApi&) = delete;
  POSLinkMultiCommandApi& operator=(const POSLinkMultiCommandApi&) = delete;
  virtual ~POSLinkMultiCommandApi() { };
  virtual std::optional<FlutterError> StartMultiCommand() = 0;
  virtual std::optional<FlutterError> CancelMultiCommand() = 0;
  virtual void CompleteMultiCommand(std::function<void(ErrorOr<Response> reply)> result) = 0;

  // The codec used by POSLinkMultiCommandApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `POSLinkMultiCommandApi` to handle messages through the `binary_messenger`.
  static void SetUp(flutter::BinaryMessenger* binary_messenger, POSLinkMultiCommandApi* api);
  static flutter::EncodableMap WrapError(std::string_view error_message);
  static flutter::EncodableMap WrapError(const FlutterError& error);

 protected:
  POSLinkMultiCommandApi() = default;

};
}  // namespace POSLinkMultiCommand
#endif  // PIGEON_POSLINKMULTICOMMAND_POSLINKMULTICOMMAND_H_
