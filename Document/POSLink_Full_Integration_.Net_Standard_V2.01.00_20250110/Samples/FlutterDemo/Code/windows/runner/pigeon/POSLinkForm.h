// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_POSLINKFORM_H_
#define PIGEON_POSLINKFORM_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkForm {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class POSLinkFormApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class FormHardKey {
  NotSet = 0,
  Key0 = 1,
  Key1 = 2,
  Key2 = 3,
  Key3 = 4,
  Key4 = 5,
  Key5 = 6,
  Key6 = 7,
  Key7 = 8,
  Key8 = 9,
  Key9 = 10,
  Clear = 11,
  Cancel = 12,
  Ok = 13
};

enum class FormSignatureStatus {
  NotSet = 0,
  SignatureNotProvided = 1,
  SignatureProvided = 2
};

enum class FormPinpadType {
  NotSet = 0,
  InternalPinpad = 1,
  ExternalPinpad = 2,
  RnibPinpad = 3,
  ExternalPinpadFirst = 4
};

enum class FormInputTextPrompt {
  NotSet = 0,
  EnterAmount = 1,
  EnterPoints = 2,
  EnterTableNumber = 3,
  EnterTheNumberOfGuests = 4,
  EnterOrderNumber = 5,
  EnterTicketNumber = 6,
  EnterVoucherNumber = 7,
  EnterAuthCode = 8,
  EnterTip = 9,
  EnterCashBack = 10,
  EnterMerchantFee = 11,
  EnterSurchargeFee = 12,
  EnterYourAddress = 13,
  EnterYourZipCode = 14,
  EnterCustomerCode = 15,
  EnterPoNumber = 16,
  EnterDestinationZip = 17,
  EnterProductDescription = 18,
  EnterMerchantTaxId = 19,
  EnterTaxAmount = 20,
  EnterTaxExemptId = 21,
  EnterReferenceNumber = 22,
  EnterPhoneNumber = 23,
  EnterSocialSecurity = 24,
  EnterUserName = 25,
  EnterCustomerServicePhone = 26,
  EnterOriginalTransactionDate = 27,
  EnterOriginalTransactionTime = 28,
  EnterDate = 29,
  EnterTime = 30,
  EnterPassword = 31
};

enum class FormInputType {
  NotSet = 0,
  AlphaNumeric = 1,
  Numeric = 2,
  Date = 3,
  Time = 4,
  Currency = 5,
  Password = 6,
  PhoneNumber = 7,
  SocialSecurity = 8
};

enum class FormContinuousScreen {
  NotSet = 0,
  Default = 1,
  NotGoToIdleScreen = 2
};

enum class FormTextPushedMode {
  NotSet = 0,
  Topdown = 1,
  BottomUp = 2
};

enum class FormItemDetailUnit {
  NotSet = 0,
  PerItem = 1,
  PerPound = 2,
  PerFoot = 3
};

enum class FormLineItemAction {
  NotSet = 0,
  Add = 1,
  Update = 2,
  Delete = 3
};

enum class FormEnableKeyType {
  NotSet = 0,
  EnableVirtualButtonAndHardKeys = 1,
  EnableHardKeyOnly = 2
};

enum class FormSignatureBoxType {
  NotSet = 0,
  NoSignatureBox = 1,
  TerminalPreference = 2,
  HorizontalDisplay = 3,
  VerticalDisplay = 4
};

enum class FormBarcodeName {
  NotSet = 0,
  Code39 = 1,
  Code128 = 2,
  Ean13 = 3,
  Ean128 = 4,
  Pdf417 = 5,
  GridMatrix = 6,
  QrCode = 7
};

enum class FormInputTextType {
  NotSet = 0,
  NoInputText = 1,
  ShowInputText = 2
};

enum class FormLabelProperty {
  NotSet = 0,
  Unchecked = 1,
  Checked = 2
};

enum class FormButtonType {
  NotSet = 0,
  RadioButton = 1,
  CheckBox = 2
};

// Generated class from Pigeon that represents data sent in messages.
class FormRemoveCardRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormRemoveCardRequest();

  // Constructs an object setting all fields.
  explicit FormRemoveCardRequest(
    const std::string* message1,
    const std::string* message2,
    const FormContinuousScreen* continuous_screen,
    const FormPinpadType* pinpad_type,
    const std::string* icon);

  const std::string* message1() const;
  void set_message1(const std::string_view* value_arg);
  void set_message1(std::string_view value_arg);

  const std::string* message2() const;
  void set_message2(const std::string_view* value_arg);
  void set_message2(std::string_view value_arg);

  const FormContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FormContinuousScreen* value_arg);
  void set_continuous_screen(const FormContinuousScreen& value_arg);

  const FormPinpadType* pinpad_type() const;
  void set_pinpad_type(const FormPinpadType* value_arg);
  void set_pinpad_type(const FormPinpadType& value_arg);

  const std::string* icon() const;
  void set_icon(const std::string_view* value_arg);
  void set_icon(std::string_view value_arg);


 private:
  static FormRemoveCardRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> message1_;
  std::optional<std::string> message2_;
  std::optional<FormContinuousScreen> continuous_screen_;
  std::optional<FormPinpadType> pinpad_type_;
  std::optional<std::string> icon_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowDialogFormRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowDialogFormRequest();

  // Constructs an object setting all fields.
  explicit FormShowDialogFormRequest(
    const std::string* title,
    const std::string* label1,
    const FormLabelProperty* label1_property,
    const std::string* label2,
    const FormLabelProperty* label2_property,
    const std::string* label3,
    const FormLabelProperty* label3_property,
    const std::string* label4,
    const FormLabelProperty* label4_property,
    const FormButtonType* button_type,
    const std::string* timeout,
    const FormContinuousScreen* continuous_screen);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const std::string* label1() const;
  void set_label1(const std::string_view* value_arg);
  void set_label1(std::string_view value_arg);

  const FormLabelProperty* label1_property() const;
  void set_label1_property(const FormLabelProperty* value_arg);
  void set_label1_property(const FormLabelProperty& value_arg);

  const std::string* label2() const;
  void set_label2(const std::string_view* value_arg);
  void set_label2(std::string_view value_arg);

  const FormLabelProperty* label2_property() const;
  void set_label2_property(const FormLabelProperty* value_arg);
  void set_label2_property(const FormLabelProperty& value_arg);

  const std::string* label3() const;
  void set_label3(const std::string_view* value_arg);
  void set_label3(std::string_view value_arg);

  const FormLabelProperty* label3_property() const;
  void set_label3_property(const FormLabelProperty* value_arg);
  void set_label3_property(const FormLabelProperty& value_arg);

  const std::string* label4() const;
  void set_label4(const std::string_view* value_arg);
  void set_label4(std::string_view value_arg);

  const FormLabelProperty* label4_property() const;
  void set_label4_property(const FormLabelProperty* value_arg);
  void set_label4_property(const FormLabelProperty& value_arg);

  const FormButtonType* button_type() const;
  void set_button_type(const FormButtonType* value_arg);
  void set_button_type(const FormButtonType& value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FormContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FormContinuousScreen* value_arg);
  void set_continuous_screen(const FormContinuousScreen& value_arg);


 private:
  static FormShowDialogFormRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> title_;
  std::optional<std::string> label1_;
  std::optional<FormLabelProperty> label1_property_;
  std::optional<std::string> label2_;
  std::optional<FormLabelProperty> label2_property_;
  std::optional<std::string> label3_;
  std::optional<FormLabelProperty> label3_property_;
  std::optional<std::string> label4_;
  std::optional<FormLabelProperty> label4_property_;
  std::optional<FormButtonType> button_type_;
  std::optional<std::string> timeout_;
  std::optional<FormContinuousScreen> continuous_screen_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormStbButton {
 public:
  // Constructs an object setting all non-nullable fields.
  FormStbButton();

  // Constructs an object setting all fields.
  explicit FormStbButton(
    const std::string* name,
    const std::string* color,
    const FormHardKey* hard_key);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);

  const std::string* color() const;
  void set_color(const std::string_view* value_arg);
  void set_color(std::string_view value_arg);

  const FormHardKey* hard_key() const;
  void set_hard_key(const FormHardKey* value_arg);
  void set_hard_key(const FormHardKey& value_arg);


 private:
  static FormStbButton FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FormShowTextBoxRequest;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> name_;
  std::optional<std::string> color_;
  std::optional<FormHardKey> hard_key_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowTextBoxRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowTextBoxRequest();

  // Constructs an object setting all fields.
  explicit FormShowTextBoxRequest(
    const std::string* title,
    const std::string* text,
    const FormStbButton* button1,
    const FormStbButton* button2,
    const FormStbButton* button3,
    const std::string* timeout,
    const FormEnableKeyType* enable_key_type,
    const flutter::EncodableList* hard_key_list,
    const FormSignatureBoxType* signature_box,
    const FormContinuousScreen* continuous_screen,
    const FormBarcodeName* barcode_name,
    const std::string* barcode_data,
    const std::string* input_text_title,
    const FormInputTextType* input_text,
    const FormInputType* input_type,
    const std::string* min_length,
    const std::string* max_length);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const std::string* text() const;
  void set_text(const std::string_view* value_arg);
  void set_text(std::string_view value_arg);

  const FormStbButton* button1() const;
  void set_button1(const FormStbButton* value_arg);
  void set_button1(const FormStbButton& value_arg);

  const FormStbButton* button2() const;
  void set_button2(const FormStbButton* value_arg);
  void set_button2(const FormStbButton& value_arg);

  const FormStbButton* button3() const;
  void set_button3(const FormStbButton* value_arg);
  void set_button3(const FormStbButton& value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FormEnableKeyType* enable_key_type() const;
  void set_enable_key_type(const FormEnableKeyType* value_arg);
  void set_enable_key_type(const FormEnableKeyType& value_arg);

  const flutter::EncodableList* hard_key_list() const;
  void set_hard_key_list(const flutter::EncodableList* value_arg);
  void set_hard_key_list(const flutter::EncodableList& value_arg);

  const FormSignatureBoxType* signature_box() const;
  void set_signature_box(const FormSignatureBoxType* value_arg);
  void set_signature_box(const FormSignatureBoxType& value_arg);

  const FormContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FormContinuousScreen* value_arg);
  void set_continuous_screen(const FormContinuousScreen& value_arg);

  const FormBarcodeName* barcode_name() const;
  void set_barcode_name(const FormBarcodeName* value_arg);
  void set_barcode_name(const FormBarcodeName& value_arg);

  const std::string* barcode_data() const;
  void set_barcode_data(const std::string_view* value_arg);
  void set_barcode_data(std::string_view value_arg);

  const std::string* input_text_title() const;
  void set_input_text_title(const std::string_view* value_arg);
  void set_input_text_title(std::string_view value_arg);

  const FormInputTextType* input_text() const;
  void set_input_text(const FormInputTextType* value_arg);
  void set_input_text(const FormInputTextType& value_arg);

  const FormInputType* input_type() const;
  void set_input_type(const FormInputType* value_arg);
  void set_input_type(const FormInputType& value_arg);

  const std::string* min_length() const;
  void set_min_length(const std::string_view* value_arg);
  void set_min_length(std::string_view value_arg);

  const std::string* max_length() const;
  void set_max_length(const std::string_view* value_arg);
  void set_max_length(std::string_view value_arg);


 private:
  static FormShowTextBoxRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> title_;
  std::optional<std::string> text_;
  std::optional<FormStbButton> button1_;
  std::optional<FormStbButton> button2_;
  std::optional<FormStbButton> button3_;
  std::optional<std::string> timeout_;
  std::optional<FormEnableKeyType> enable_key_type_;
  std::optional<flutter::EncodableList> hard_key_list_;
  std::optional<FormSignatureBoxType> signature_box_;
  std::optional<FormContinuousScreen> continuous_screen_;
  std::optional<FormBarcodeName> barcode_name_;
  std::optional<std::string> barcode_data_;
  std::optional<std::string> input_text_title_;
  std::optional<FormInputTextType> input_text_;
  std::optional<FormInputType> input_type_;
  std::optional<std::string> min_length_;
  std::optional<std::string> max_length_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormSdButton {
 public:
  // Constructs an object setting all non-nullable fields.
  FormSdButton();

  // Constructs an object setting all fields.
  explicit FormSdButton(const std::string* name);

  const std::string* name() const;
  void set_name(const std::string_view* value_arg);
  void set_name(std::string_view value_arg);


 private:
  static FormSdButton FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FormShowDialogRequest;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> name_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowDialogRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowDialogRequest();

  // Constructs an object setting all fields.
  explicit FormShowDialogRequest(
    const std::string* title,
    const FormSdButton* button1,
    const FormSdButton* button2,
    const FormSdButton* button3,
    const FormSdButton* button4,
    const std::string* timeout,
    const FormContinuousScreen* continuous_screen);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const FormSdButton* button1() const;
  void set_button1(const FormSdButton* value_arg);
  void set_button1(const FormSdButton& value_arg);

  const FormSdButton* button2() const;
  void set_button2(const FormSdButton* value_arg);
  void set_button2(const FormSdButton& value_arg);

  const FormSdButton* button3() const;
  void set_button3(const FormSdButton* value_arg);
  void set_button3(const FormSdButton& value_arg);

  const FormSdButton* button4() const;
  void set_button4(const FormSdButton* value_arg);
  void set_button4(const FormSdButton& value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FormContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FormContinuousScreen* value_arg);
  void set_continuous_screen(const FormContinuousScreen& value_arg);


 private:
  static FormShowDialogRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> title_;
  std::optional<FormSdButton> button1_;
  std::optional<FormSdButton> button2_;
  std::optional<FormSdButton> button3_;
  std::optional<FormSdButton> button4_;
  std::optional<std::string> timeout_;
  std::optional<FormContinuousScreen> continuous_screen_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowMessageRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowMessageRequest();

  // Constructs an object setting all fields.
  explicit FormShowMessageRequest(
    const std::string* display_message1,
    const std::string* title,
    const std::string* display_message2,
    const FormTextPushedMode* text_pushed_mode,
    const std::string* tax_line,
    const std::string* total_line,
    const std::string* image_name,
    const std::string* image_description,
    const FormLineItemAction* line_item_action,
    const flutter::EncodableList* item_indices);

  const std::string* display_message1() const;
  void set_display_message1(const std::string_view* value_arg);
  void set_display_message1(std::string_view value_arg);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const std::string* display_message2() const;
  void set_display_message2(const std::string_view* value_arg);
  void set_display_message2(std::string_view value_arg);

  const FormTextPushedMode* text_pushed_mode() const;
  void set_text_pushed_mode(const FormTextPushedMode* value_arg);
  void set_text_pushed_mode(const FormTextPushedMode& value_arg);

  const std::string* tax_line() const;
  void set_tax_line(const std::string_view* value_arg);
  void set_tax_line(std::string_view value_arg);

  const std::string* total_line() const;
  void set_total_line(const std::string_view* value_arg);
  void set_total_line(std::string_view value_arg);

  const std::string* image_name() const;
  void set_image_name(const std::string_view* value_arg);
  void set_image_name(std::string_view value_arg);

  const std::string* image_description() const;
  void set_image_description(const std::string_view* value_arg);
  void set_image_description(std::string_view value_arg);

  const FormLineItemAction* line_item_action() const;
  void set_line_item_action(const FormLineItemAction* value_arg);
  void set_line_item_action(const FormLineItemAction& value_arg);

  const flutter::EncodableList* item_indices() const;
  void set_item_indices(const flutter::EncodableList* value_arg);
  void set_item_indices(const flutter::EncodableList& value_arg);


 private:
  static FormShowMessageRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> display_message1_;
  std::optional<std::string> title_;
  std::optional<std::string> display_message2_;
  std::optional<FormTextPushedMode> text_pushed_mode_;
  std::optional<std::string> tax_line_;
  std::optional<std::string> total_line_;
  std::optional<std::string> image_name_;
  std::optional<std::string> image_description_;
  std::optional<FormLineItemAction> line_item_action_;
  std::optional<flutter::EncodableList> item_indices_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormItemDetail {
 public:
  // Constructs an object setting all non-nullable fields.
  FormItemDetail();

  // Constructs an object setting all fields.
  explicit FormItemDetail(
    const std::string* product_name,
    const std::string* plu_code,
    const std::string* price,
    const FormItemDetailUnit* unit,
    const std::string* unit_price,
    const std::string* tax,
    const std::string* quantity,
    const std::string* product_image_name,
    const std::string* product_image_description);

  const std::string* product_name() const;
  void set_product_name(const std::string_view* value_arg);
  void set_product_name(std::string_view value_arg);

  const std::string* plu_code() const;
  void set_plu_code(const std::string_view* value_arg);
  void set_plu_code(std::string_view value_arg);

  const std::string* price() const;
  void set_price(const std::string_view* value_arg);
  void set_price(std::string_view value_arg);

  const FormItemDetailUnit* unit() const;
  void set_unit(const FormItemDetailUnit* value_arg);
  void set_unit(const FormItemDetailUnit& value_arg);

  const std::string* unit_price() const;
  void set_unit_price(const std::string_view* value_arg);
  void set_unit_price(std::string_view value_arg);

  const std::string* tax() const;
  void set_tax(const std::string_view* value_arg);
  void set_tax(std::string_view value_arg);

  const std::string* quantity() const;
  void set_quantity(const std::string_view* value_arg);
  void set_quantity(std::string_view value_arg);

  const std::string* product_image_name() const;
  void set_product_image_name(const std::string_view* value_arg);
  void set_product_image_name(std::string_view value_arg);

  const std::string* product_image_description() const;
  void set_product_image_description(const std::string_view* value_arg);
  void set_product_image_description(std::string_view value_arg);


 private:
  static FormItemDetail FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> product_name_;
  std::optional<std::string> plu_code_;
  std::optional<std::string> price_;
  std::optional<FormItemDetailUnit> unit_;
  std::optional<std::string> unit_price_;
  std::optional<std::string> tax_;
  std::optional<std::string> quantity_;
  std::optional<std::string> product_image_name_;
  std::optional<std::string> product_image_description_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowItemRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowItemRequest();

  // Constructs an object setting all fields.
  explicit FormShowItemRequest(
    const std::string* title,
    const FormTextPushedMode* text_pushed_mode,
    const std::string* tax_line,
    const std::string* total_line,
    const flutter::EncodableList* item_details,
    const FormLineItemAction* line_item_action,
    const flutter::EncodableList* item_indices);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const FormTextPushedMode* text_pushed_mode() const;
  void set_text_pushed_mode(const FormTextPushedMode* value_arg);
  void set_text_pushed_mode(const FormTextPushedMode& value_arg);

  const std::string* tax_line() const;
  void set_tax_line(const std::string_view* value_arg);
  void set_tax_line(std::string_view value_arg);

  const std::string* total_line() const;
  void set_total_line(const std::string_view* value_arg);
  void set_total_line(std::string_view value_arg);

  const flutter::EncodableList* item_details() const;
  void set_item_details(const flutter::EncodableList* value_arg);
  void set_item_details(const flutter::EncodableList& value_arg);

  const FormLineItemAction* line_item_action() const;
  void set_line_item_action(const FormLineItemAction* value_arg);
  void set_line_item_action(const FormLineItemAction& value_arg);

  const flutter::EncodableList* item_indices() const;
  void set_item_indices(const flutter::EncodableList* value_arg);
  void set_item_indices(const flutter::EncodableList& value_arg);


 private:
  static FormShowItemRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> title_;
  std::optional<FormTextPushedMode> text_pushed_mode_;
  std::optional<std::string> tax_line_;
  std::optional<std::string> total_line_;
  std::optional<flutter::EncodableList> item_details_;
  std::optional<FormLineItemAction> line_item_action_;
  std::optional<flutter::EncodableList> item_indices_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormClearMessageRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormClearMessageRequest();

  // Constructs an object setting all fields.
  explicit FormClearMessageRequest(const std::string* class_i_d);

  const std::string* class_i_d() const;
  void set_class_i_d(const std::string_view* value_arg);
  void set_class_i_d(std::string_view value_arg);


 private:
  static FormClearMessageRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> class_i_d_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormInputTextRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormInputTextRequest();

  // Constructs an object setting all fields.
  explicit FormInputTextRequest(
    const FormInputTextPrompt* title,
    const FormInputType* input_type,
    const std::string* min_length,
    const std::string* max_length,
    const std::string* default_value,
    const std::string* timeout,
    const FormContinuousScreen* continuous_screen);

  const FormInputTextPrompt* title() const;
  void set_title(const FormInputTextPrompt* value_arg);
  void set_title(const FormInputTextPrompt& value_arg);

  const FormInputType* input_type() const;
  void set_input_type(const FormInputType* value_arg);
  void set_input_type(const FormInputType& value_arg);

  const std::string* min_length() const;
  void set_min_length(const std::string_view* value_arg);
  void set_min_length(std::string_view value_arg);

  const std::string* max_length() const;
  void set_max_length(const std::string_view* value_arg);
  void set_max_length(std::string_view value_arg);

  const std::string* default_value() const;
  void set_default_value(const std::string_view* value_arg);
  void set_default_value(std::string_view value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FormContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FormContinuousScreen* value_arg);
  void set_continuous_screen(const FormContinuousScreen& value_arg);


 private:
  static FormInputTextRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<FormInputTextPrompt> title_;
  std::optional<FormInputType> input_type_;
  std::optional<std::string> min_length_;
  std::optional<std::string> max_length_;
  std::optional<std::string> default_value_;
  std::optional<std::string> timeout_;
  std::optional<FormContinuousScreen> continuous_screen_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowMessageCenterRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowMessageCenterRequest();

  // Constructs an object setting all fields.
  explicit FormShowMessageCenterRequest(
    const std::string* title,
    const std::string* message1,
    const std::string* message2,
    const std::string* timeout,
    const FormPinpadType* pinpad_type,
    const std::string* icon_name);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const std::string* message1() const;
  void set_message1(const std::string_view* value_arg);
  void set_message1(std::string_view value_arg);

  const std::string* message2() const;
  void set_message2(const std::string_view* value_arg);
  void set_message2(std::string_view value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FormPinpadType* pinpad_type() const;
  void set_pinpad_type(const FormPinpadType* value_arg);
  void set_pinpad_type(const FormPinpadType& value_arg);

  const std::string* icon_name() const;
  void set_icon_name(const std::string_view* value_arg);
  void set_icon_name(std::string_view value_arg);


 private:
  static FormShowMessageCenterRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> title_;
  std::optional<std::string> message1_;
  std::optional<std::string> message2_;
  std::optional<std::string> timeout_;
  std::optional<FormPinpadType> pinpad_type_;
  std::optional<std::string> icon_name_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowMessageCenterResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowMessageCenterResponse();

  // Constructs an object setting all fields.
  explicit FormShowMessageCenterResponse(
    const std::string* response_code,
    const std::string* response_message,
    const FormPinpadType* pinpad_type);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const FormPinpadType* pinpad_type() const;
  void set_pinpad_type(const FormPinpadType* value_arg);
  void set_pinpad_type(const FormPinpadType& value_arg);


 private:
  static FormShowMessageCenterResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<FormPinpadType> pinpad_type_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormClearMessageResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormClearMessageResponse();

  // Constructs an object setting all fields.
  explicit FormClearMessageResponse(
    const std::string* response_code,
    const std::string* response_message);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);


 private:
  static FormClearMessageResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormInputTextResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormInputTextResponse();

  // Constructs an object setting all fields.
  explicit FormInputTextResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* text);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* text() const;
  void set_text(const std::string_view* value_arg);
  void set_text(std::string_view value_arg);


 private:
  static FormInputTextResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> text_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormRemoveCardResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormRemoveCardResponse();

  // Constructs an object setting all fields.
  explicit FormRemoveCardResponse(
    const std::string* response_code,
    const std::string* response_message,
    const FormPinpadType* pinpad_type);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const FormPinpadType* pinpad_type() const;
  void set_pinpad_type(const FormPinpadType* value_arg);
  void set_pinpad_type(const FormPinpadType& value_arg);


 private:
  static FormRemoveCardResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<FormPinpadType> pinpad_type_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowDialogFormResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowDialogFormResponse();

  // Constructs an object setting all fields.
  explicit FormShowDialogFormResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* label_selected);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* label_selected() const;
  void set_label_selected(const std::string_view* value_arg);
  void set_label_selected(std::string_view value_arg);


 private:
  static FormShowDialogFormResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> label_selected_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowDialogResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowDialogResponse();

  // Constructs an object setting all fields.
  explicit FormShowDialogResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* button_number);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* button_number() const;
  void set_button_number(const std::string_view* value_arg);
  void set_button_number(std::string_view value_arg);


 private:
  static FormShowDialogResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> button_number_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowMessageResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowMessageResponse();

  // Constructs an object setting all fields.
  explicit FormShowMessageResponse(
    const std::string* response_code,
    const std::string* response_message);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);


 private:
  static FormShowMessageResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowItemResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowItemResponse();

  // Constructs an object setting all fields.
  explicit FormShowItemResponse(
    const std::string* response_code,
    const std::string* response_message);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);


 private:
  static FormShowItemResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;

};


// Generated class from Pigeon that represents data sent in messages.
class FormShowTextBoxResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FormShowTextBoxResponse();

  // Constructs an object setting all fields.
  explicit FormShowTextBoxResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* button_number,
    const FormSignatureStatus* sign_status,
    const std::string* signature_data,
    const std::string* text);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* button_number() const;
  void set_button_number(const std::string_view* value_arg);
  void set_button_number(std::string_view value_arg);

  const FormSignatureStatus* sign_status() const;
  void set_sign_status(const FormSignatureStatus* value_arg);
  void set_sign_status(const FormSignatureStatus& value_arg);

  const std::string* signature_data() const;
  void set_signature_data(const std::string_view* value_arg);
  void set_signature_data(std::string_view value_arg);

  const std::string* text() const;
  void set_text(const std::string_view* value_arg);
  void set_text(std::string_view value_arg);


 private:
  static FormShowTextBoxResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFormApi;
  friend class POSLinkFormApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> button_number_;
  std::optional<FormSignatureStatus> sign_status_;
  std::optional<std::string> signature_data_;
  std::optional<std::string> text_;

};

class POSLinkFormApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  POSLinkFormApiCodecSerializer();
  inline static POSLinkFormApiCodecSerializer& GetInstance() {
    static POSLinkFormApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class POSLinkFormApi {
 public:
  POSLinkFormApi(const POSLinkFormApi&) = delete;
  POSLinkFormApi& operator=(const POSLinkFormApi&) = delete;
  virtual ~POSLinkFormApi() {}
  virtual void ShowMessageCenter(
    const FormShowMessageCenterRequest& req,
    std::function<void(ErrorOr<FormShowMessageCenterResponse> reply)> result) = 0;
  virtual void InputText(
    const FormInputTextRequest& req,
    std::function<void(ErrorOr<FormInputTextResponse> reply)> result) = 0;
  virtual void ClearMessage(
    const FormClearMessageRequest& req,
    std::function<void(ErrorOr<FormClearMessageResponse> reply)> result) = 0;
  virtual void ShowItem(
    const FormShowItemRequest& req,
    std::function<void(ErrorOr<FormShowItemResponse> reply)> result) = 0;
  virtual void ShowMessage(
    const FormShowMessageRequest& req,
    std::function<void(ErrorOr<FormShowMessageResponse> reply)> result) = 0;
  virtual void ShowDialog(
    const FormShowDialogRequest& req,
    std::function<void(ErrorOr<FormShowDialogResponse> reply)> result) = 0;
  virtual void ShowTextBox(
    const FormShowTextBoxRequest& req,
    std::function<void(ErrorOr<FormShowTextBoxResponse> reply)> result) = 0;
  virtual void ShowDialogForm(
    const FormShowDialogFormRequest& req,
    std::function<void(ErrorOr<FormShowDialogFormResponse> reply)> result) = 0;
  virtual void RemoveCard(
    const FormRemoveCardRequest& req,
    std::function<void(ErrorOr<FormRemoveCardResponse> reply)> result) = 0;

  // The codec used by POSLinkFormApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `POSLinkFormApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    POSLinkFormApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  POSLinkFormApi() = default;

};
}  // namespace POSLinkForm
#endif  // PIGEON_POSLINKFORM_H_
