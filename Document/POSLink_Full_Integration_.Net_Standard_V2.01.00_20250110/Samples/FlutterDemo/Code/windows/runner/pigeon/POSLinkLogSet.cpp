// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkLogSet.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkLogSet {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// LogSetting

LogSetting::LogSetting() {}

LogSetting::LogSetting(
  const std::string* file_name,
  const std::string* file_path,
  const int64_t* days,
  const bool* enable,
  const LogLevel* level)
 : file_name_(file_name ? std::optional<std::string>(*file_name) : std::nullopt),
    file_path_(file_path ? std::optional<std::string>(*file_path) : std::nullopt),
    days_(days ? std::optional<int64_t>(*days) : std::nullopt),
    enable_(enable ? std::optional<bool>(*enable) : std::nullopt),
    level_(level ? std::optional<LogLevel>(*level) : std::nullopt) {}

const std::string* LogSetting::file_name() const {
  return file_name_ ? &(*file_name_) : nullptr;
}

void LogSetting::set_file_name(const std::string_view* value_arg) {
  file_name_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void LogSetting::set_file_name(std::string_view value_arg) {
  file_name_ = value_arg;
}


const std::string* LogSetting::file_path() const {
  return file_path_ ? &(*file_path_) : nullptr;
}

void LogSetting::set_file_path(const std::string_view* value_arg) {
  file_path_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void LogSetting::set_file_path(std::string_view value_arg) {
  file_path_ = value_arg;
}


const int64_t* LogSetting::days() const {
  return days_ ? &(*days_) : nullptr;
}

void LogSetting::set_days(const int64_t* value_arg) {
  days_ = value_arg ? std::optional<int64_t>(*value_arg) : std::nullopt;
}

void LogSetting::set_days(int64_t value_arg) {
  days_ = value_arg;
}


const bool* LogSetting::enable() const {
  return enable_ ? &(*enable_) : nullptr;
}

void LogSetting::set_enable(const bool* value_arg) {
  enable_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void LogSetting::set_enable(bool value_arg) {
  enable_ = value_arg;
}


const LogLevel* LogSetting::level() const {
  return level_ ? &(*level_) : nullptr;
}

void LogSetting::set_level(const LogLevel* value_arg) {
  level_ = value_arg ? std::optional<LogLevel>(*value_arg) : std::nullopt;
}

void LogSetting::set_level(const LogLevel& value_arg) {
  level_ = value_arg;
}


EncodableList LogSetting::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(file_name_ ? EncodableValue(*file_name_) : EncodableValue());
  list.push_back(file_path_ ? EncodableValue(*file_path_) : EncodableValue());
  list.push_back(days_ ? EncodableValue(*days_) : EncodableValue());
  list.push_back(enable_ ? EncodableValue(*enable_) : EncodableValue());
  list.push_back(level_ ? EncodableValue((int)(*level_)) : EncodableValue());
  return list;
}

LogSetting LogSetting::FromEncodableList(const EncodableList& list) {
  LogSetting decoded;
  auto& encodable_file_name = list[0];
  if (!encodable_file_name.IsNull()) {
    decoded.set_file_name(std::get<std::string>(encodable_file_name));
  }
  auto& encodable_file_path = list[1];
  if (!encodable_file_path.IsNull()) {
    decoded.set_file_path(std::get<std::string>(encodable_file_path));
  }
  auto& encodable_days = list[2];
  if (!encodable_days.IsNull()) {
    decoded.set_days(encodable_days.LongValue());
  }
  auto& encodable_enable = list[3];
  if (!encodable_enable.IsNull()) {
    decoded.set_enable(std::get<bool>(encodable_enable));
  }
  auto& encodable_level = list[4];
  if (!encodable_level.IsNull()) {
    decoded.set_level((LogLevel)(std::get<int32_t>(encodable_level)));
  }
  return decoded;
}

// UploadResult

UploadResult::UploadResult() {}

UploadResult::UploadResult(
  const bool* is_successful,
  const std::string* sn,
  const std::string* terminal_upload_error_code,
  const std::string* pos_link_upload_error_code)
 : is_successful_(is_successful ? std::optional<bool>(*is_successful) : std::nullopt),
    sn_(sn ? std::optional<std::string>(*sn) : std::nullopt),
    terminal_upload_error_code_(terminal_upload_error_code ? std::optional<std::string>(*terminal_upload_error_code) : std::nullopt),
    pos_link_upload_error_code_(pos_link_upload_error_code ? std::optional<std::string>(*pos_link_upload_error_code) : std::nullopt) {}

const bool* UploadResult::is_successful() const {
  return is_successful_ ? &(*is_successful_) : nullptr;
}

void UploadResult::set_is_successful(const bool* value_arg) {
  is_successful_ = value_arg ? std::optional<bool>(*value_arg) : std::nullopt;
}

void UploadResult::set_is_successful(bool value_arg) {
  is_successful_ = value_arg;
}


const std::string* UploadResult::sn() const {
  return sn_ ? &(*sn_) : nullptr;
}

void UploadResult::set_sn(const std::string_view* value_arg) {
  sn_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UploadResult::set_sn(std::string_view value_arg) {
  sn_ = value_arg;
}


const std::string* UploadResult::terminal_upload_error_code() const {
  return terminal_upload_error_code_ ? &(*terminal_upload_error_code_) : nullptr;
}

void UploadResult::set_terminal_upload_error_code(const std::string_view* value_arg) {
  terminal_upload_error_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UploadResult::set_terminal_upload_error_code(std::string_view value_arg) {
  terminal_upload_error_code_ = value_arg;
}


const std::string* UploadResult::pos_link_upload_error_code() const {
  return pos_link_upload_error_code_ ? &(*pos_link_upload_error_code_) : nullptr;
}

void UploadResult::set_pos_link_upload_error_code(const std::string_view* value_arg) {
  pos_link_upload_error_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void UploadResult::set_pos_link_upload_error_code(std::string_view value_arg) {
  pos_link_upload_error_code_ = value_arg;
}


EncodableList UploadResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(is_successful_ ? EncodableValue(*is_successful_) : EncodableValue());
  list.push_back(sn_ ? EncodableValue(*sn_) : EncodableValue());
  list.push_back(terminal_upload_error_code_ ? EncodableValue(*terminal_upload_error_code_) : EncodableValue());
  list.push_back(pos_link_upload_error_code_ ? EncodableValue(*pos_link_upload_error_code_) : EncodableValue());
  return list;
}

UploadResult UploadResult::FromEncodableList(const EncodableList& list) {
  UploadResult decoded;
  auto& encodable_is_successful = list[0];
  if (!encodable_is_successful.IsNull()) {
    decoded.set_is_successful(std::get<bool>(encodable_is_successful));
  }
  auto& encodable_sn = list[1];
  if (!encodable_sn.IsNull()) {
    decoded.set_sn(std::get<std::string>(encodable_sn));
  }
  auto& encodable_terminal_upload_error_code = list[2];
  if (!encodable_terminal_upload_error_code.IsNull()) {
    decoded.set_terminal_upload_error_code(std::get<std::string>(encodable_terminal_upload_error_code));
  }
  auto& encodable_pos_link_upload_error_code = list[3];
  if (!encodable_pos_link_upload_error_code.IsNull()) {
    decoded.set_pos_link_upload_error_code(std::get<std::string>(encodable_pos_link_upload_error_code));
  }
  return decoded;
}


POSLinkLogSetApiCodecSerializer::POSLinkLogSetApiCodecSerializer() {}

EncodableValue POSLinkLogSetApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(LogSetting::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(UploadResult::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkLogSetApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(LogSetting)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<LogSetting>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(UploadResult)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<UploadResult>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkLogSetApi.
const flutter::StandardMessageCodec& POSLinkLogSetApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkLogSetApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkLogSetApi` to handle messages through the `binary_messenger`.
void POSLinkLogSetApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkLogSetApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkLogSetApi.setLogSetting", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_log_setting_arg = args.at(0);
          if (encodable_log_setting_arg.IsNull()) {
            reply(WrapError("log_setting_arg unexpectedly null."));
            return;
          }
          const auto& log_setting_arg = std::any_cast<const LogSetting&>(std::get<CustomEncodableValue>(encodable_log_setting_arg));
          std::optional<FlutterError> output = api->SetLogSetting(log_setting_arg);
          if (output.has_value()) {
            reply(WrapError(output.value()));
            return;
          }
          EncodableList wrapped;
          wrapped.push_back(EncodableValue());
          reply(EncodableValue(std::move(wrapped)));
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkLogSetApi.upload", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          api->Upload([reply](ErrorOr<UploadResult>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkLogSetApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkLogSetApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkLogSet
