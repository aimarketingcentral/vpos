// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_POSLINKLOGSET_H_
#define PIGEON_POSLINKLOGSET_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkLogSet {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class POSLinkLogSetApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class LogLevel {
  LOG_LEVEL_ERROR = 0,
  LOG_LEVEL_DEBUG = 1
};

// Generated class from Pigeon that represents data sent in messages.
class LogSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  LogSetting();

  // Constructs an object setting all fields.
  explicit LogSetting(
    const std::string* file_name,
    const std::string* file_path,
    const int64_t* days,
    const bool* enable,
    const LogLevel* level);

  const std::string* file_name() const;
  void set_file_name(const std::string_view* value_arg);
  void set_file_name(std::string_view value_arg);

  const std::string* file_path() const;
  void set_file_path(const std::string_view* value_arg);
  void set_file_path(std::string_view value_arg);

  const int64_t* days() const;
  void set_days(const int64_t* value_arg);
  void set_days(int64_t value_arg);

  const bool* enable() const;
  void set_enable(const bool* value_arg);
  void set_enable(bool value_arg);

  const LogLevel* level() const;
  void set_level(const LogLevel* value_arg);
  void set_level(const LogLevel& value_arg);


 private:
  static LogSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkLogSetApi;
  friend class POSLinkLogSetApiCodecSerializer;
  std::optional<std::string> file_name_;
  std::optional<std::string> file_path_;
  std::optional<int64_t> days_;
  std::optional<bool> enable_;
  std::optional<LogLevel> level_;

};


// Generated class from Pigeon that represents data sent in messages.
class UploadResult {
 public:
  // Constructs an object setting all non-nullable fields.
  UploadResult();

  // Constructs an object setting all fields.
  explicit UploadResult(
    const bool* is_successful,
    const std::string* sn,
    const std::string* terminal_upload_error_code,
    const std::string* pos_link_upload_error_code);

  const bool* is_successful() const;
  void set_is_successful(const bool* value_arg);
  void set_is_successful(bool value_arg);

  const std::string* sn() const;
  void set_sn(const std::string_view* value_arg);
  void set_sn(std::string_view value_arg);

  const std::string* terminal_upload_error_code() const;
  void set_terminal_upload_error_code(const std::string_view* value_arg);
  void set_terminal_upload_error_code(std::string_view value_arg);

  const std::string* pos_link_upload_error_code() const;
  void set_pos_link_upload_error_code(const std::string_view* value_arg);
  void set_pos_link_upload_error_code(std::string_view value_arg);


 private:
  static UploadResult FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkLogSetApi;
  friend class POSLinkLogSetApiCodecSerializer;
  std::optional<bool> is_successful_;
  std::optional<std::string> sn_;
  std::optional<std::string> terminal_upload_error_code_;
  std::optional<std::string> pos_link_upload_error_code_;

};

class POSLinkLogSetApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  POSLinkLogSetApiCodecSerializer();
  inline static POSLinkLogSetApiCodecSerializer& GetInstance() {
    static POSLinkLogSetApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class POSLinkLogSetApi {
 public:
  POSLinkLogSetApi(const POSLinkLogSetApi&) = delete;
  POSLinkLogSetApi& operator=(const POSLinkLogSetApi&) = delete;
  virtual ~POSLinkLogSetApi() {}
  virtual std::optional<FlutterError> SetLogSetting(const LogSetting& log_setting) = 0;
  virtual void Upload(std::function<void(ErrorOr<UploadResult> reply)> result) = 0;

  // The codec used by POSLinkLogSetApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `POSLinkLogSetApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    POSLinkLogSetApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  POSLinkLogSetApi() = default;

};
}  // namespace POSLinkLogSet
#endif  // PIGEON_POSLINKLOGSET_H_
