// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_POSLINKFULLINTEGRATION_H_
#define PIGEON_POSLINKFULLINTEGRATION_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkFullIntegration {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class POSLinkFullIntegrationApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


enum class FullIntegrationEntryMode {
  NotSet = 0,
  Manual = 1,
  Swipe = 2,
  Contactless = 3,
  LaserScanner = 4,
  Chip = 5,
  ChipFallBackSwipe = 6,
  FrontCamera = 7,
  RearCamera = 8
};

enum class FullIntegrationBarcodeType {
  NotSet = 0,
  QrCode = 1,
  TwoDimensionalBarcode = 2,
  ThreeDimensionalBarcode = 3
};

enum class FullIntegrationContactlessTransactionPath {
  NotSet = 0,
  PaypassMsd = 1,
  PaypassMchip = 2,
  PaywaveMsd = 3,
  PaywaveQvsdc = 4,
  PaywaveContact = 5,
  PaywaveWave2 = 6,
  PaywaveMsdCvn17 = 7,
  PaywaveMsdLegacy = 8,
  PaywaveVsdc = 9,
  DpasMsd = 10,
  DpasEmv = 11,
  DpasZip = 12,
  ExpressPayMsd = 13,
  ExpressPayEmv = 14,
  JcbMsd = 15,
  JcbEmv = 16,
  JcbLegacy = 17,
  JcbWave2 = 18,
  QPbocQvsdc = 19,
  QPbocVsdc = 20,
  FlashEmv = 21
};

enum class FullIntegrationFirstGacResult {
  NotSet = 0,
  TransactionOfflineApproved = 1,
  TransactionOfflineDeclined = 2,
  TransactionOnlineAuthorizationNeeded = 3
};

enum class FullIntegrationSignatureFlag {
  NotSet = 0,
  NotNeeded = 1,
  Needed = 2
};

enum class FullIntegrationOnlinePinFlag {
  NotSet = 0,
  NotNeeded = 1,
  Needed = 2
};

enum class FullIntegrationCardholderVerificationMethod {
  NotSet = 0,
  FailCvmProcessing = 1,
  PlaintextOfflinePinVerification = 2,
  OnlinePin = 3,
  PlaintextOfflinePinAndSignature = 4,
  EncipheredOfflinePinVerification = 5,
  EncipheredOfflinePinVerificationAndSignature = 6,
  Signature = 7,
  NoCvmRequired = 8,
  OnDeviceCvm = 9
};

enum class FullIntegrationVasResponseCode {
  NotSet = 0,
  VasOk = 1,
  VasOseError = 2,
  VasGetDataCommandError = 3,
  VasIssueNeedToStartPayment = 4,
  AppVersionTooLow = 5,
  SkipProtocolInVasMode = 6,
  SkipProtocolAndNoDataForthcomingInDualMode = 7,
  SkipProtocolAndNoDataForthcomingInSingleMode = 8,
  VasDataNotFound = 9,
  VasDataNotActive = 10,
  UserInterventionRequiredOnMobileDevice = 11,
  TheMerchantIdIsNull = 12,
  VasGetKeyError = 13,
  VasDataDecryptionError = 14,
  UnknownError = 15
};

enum class FullIntegrationPinpadType {
  NotSet = 0,
  InternalPinpad = 1,
  ExternalPinpad = 2,
  RnibPinpad = 3,
  ExternalPinpadFirst = 4
};

enum class FullIntegrationLuhnValidationResult {
  NotSet = 0,
  NotPerformed = 1,
  Passed = 2,
  Failed = 3
};

enum class FullIntegrationSecondGacResult {
  NotSet = 0,
  TransactionApproved = 1,
  TransactionDeclined = 2,
  PartialEmvApprove = 3,
  PartialEmvDecline = 4
};

enum class FullIntegrationPinBypassStatus {
  NotSet = 0,
  NotBypassed = 1,
  Bypassed = 2
};

enum class FullIntegrationPrompt {
  NotSet = 0,
  NoPrompt = 1,
  NeedPrompt = 2,
  PromptBypassNotAllowed = 3
};

enum class FullIntegrationTlvType {
  NotSet = 0,
  EmvContact = 1,
  EmvContactless = 2
};

enum class FullIntegrationEdcType {
  NotSet = 0,
  All = 1,
  Credit = 2,
  Debit = 3,
  Ebt = 4,
  Gift = 5,
  Loyalty = 6,
  Cash = 7,
  QrPayment = 8
};

enum class FullIntegrationTransactionType {
  NotSet = 0,
  Unknown = 1,
  Sale = 2,
  Return = 3,
  Authorization = 4,
  PostAuthorization = 5,
  ForceAuthorization = 6,
  Adjust = 7,
  Withdrawal = 8,
  Activate = 9,
  Issue = 10,
  Reload = 11,
  Cashout = 12,
  Deactivate = 13,
  Replace = 14,
  Merge = 15,
  ReportLost = 16,
  Void = 17,
  VoidSale = 18,
  VoidReturn = 19,
  VoidAuthorization = 20,
  VoidPostAuthorization = 21,
  VoidForceAuthorization = 22,
  VoidWithdrawal = 23,
  Inquiry = 24,
  Verify = 25,
  Reactivate = 26,
  ForcedIssue = 27,
  ForcedAdd = 28,
  Unload = 29,
  Renew = 30,
  GetConvertDetail = 31,
  Convert = 32,
  Tokenize = 33,
  IncrementalAuthorization = 34,
  BalanceWithLock = 35,
  RedemptionWithUnlock = 36,
  Rewards = 37,
  Reenter = 38,
  TransactionAdjustment = 39,
  Transfer = 40,
  Finalize = 41,
  Deposit = 42,
  AccountPayment = 43,
  Reversal = 44
};

enum class FullIntegrationPinpadEnableFlag {
  NotSet = 0,
  NotAllowed = 1,
  Allowed = 2
};

enum class FullIntegrationPinpadTypeFlag {
  NotSet = 0,
  InternalPinpad = 1,
  ExternalPinpad = 2,
  ExternalPinpadFirst = 3
};

enum class FullIntegrationLaserScannerFlag {
  NotSet = 0,
  NotAllowed = 1,
  Allowed = 2
};

enum class FullIntegrationFrontCameraFlag {
  NotSet = 0,
  NotAllowed = 1,
  Allowed = 2
};

enum class FullIntegrationRearCameraFlag {
  NotSet = 0,
  NotAllowed = 1,
  Allowed = 2
};

enum class FullIntegrationDataEncryptionFlag {
  NotSet = 0,
  NotEncrypted = 1,
  DukptTripleDesKeyWithCbcMode = 2,
  DukptTripleDesKeyWithEcbMode = 3,
  DesOrTdesMethod = 4,
  VoltageE2ee = 5,
  AesCbcDukpt = 6,
  AesEcbDukpt = 7,
  Aes192CbcDukpt = 8,
  Aes192EcbDukpt = 9,
  Aes256CbcDukpt = 10,
  Aes256EcbDukpt = 11
};

enum class FullIntegrationTrackDataSentinel {
  NotSet = 0,
  ExcludeStartEnd = 1,
  IncludeStartEnd = 2
};

enum class FullIntegrationStatusReportFlag {
  NotSet = 0,
  NotToReport = 1,
  ToReport = 2
};

enum class FullIntegrationContinuousScreen {
  NotSet = 0,
  Default = 1,
  NotGoToIdleScreen = 2
};

enum class FullIntegrationKsnFlag {
  NotSet = 0,
  NotIncrease = 1,
  Increase = 2
};

enum class FullIntegrationMacKeyType {
  NotSet = 0,
  Tak = 1,
  DesDukptKey = 2,
  AesDukptKey = 3,
  Hmac = 4,
  Aes192DukptKey = 5,
  Aes256DukptKey = 6
};

enum class FullIntegrationMacWorkMode {
  NotSet = 0,
  AnsiX99 = 1,
  HypercomFastMode = 2,
  AnsiX919 = 3,
  Sha1 = 4,
  Sha256 = 5
};

enum class FullIntegrationOnlineAuthorizationResult {
  NotSet = 0,
  TransactionApprovedOnline = 1,
  TransactionDeclinedOnline = 2,
  ConnectHostFailed = 3,
  RequestPartialEmv = 4
};

enum class FullIntegrationMerchantDecision {
  NotSet = 0,
  NoMerchantDecision = 1,
  ForceOnline = 2,
  ForceDecline = 3
};

enum class FullIntegrationEncryptionType {
  NotSet = 0,
  DesDukpt = 1,
  MasterSession = 2,
  AesDukpt = 3,
  Aes192Dukpt = 4,
  Aes256Dukpt = 5
};

enum class FullIntegrationPinBypass {
  NotSet = 0,
  NotAllowPinBypass = 1,
  BypassOfflinePinAutomatically = 2,
  BypassOnlinePinAutomatically = 3,
  BothOfflineAndOnlineAutomatically = 4,
  AllowUserToBypass = 5
};

enum class FullIntegrationPinAlgorithm {
  NotSet = 0,
  Iso9564_0 = 1,
  Iso9564_1 = 2,
  Iso9564_3 = 3
};

enum class FullIntegrationAllowOnlinePinBypass {
  NotSet = 0,
  Yes = 1
};

// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationSetEmvTlvDataRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationSetEmvTlvDataRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationSetEmvTlvDataRequest(
    const FullIntegrationTlvType* tlv_type,
    const std::string* emv_tlv_data);

  const FullIntegrationTlvType* tlv_type() const;
  void set_tlv_type(const FullIntegrationTlvType* value_arg);
  void set_tlv_type(const FullIntegrationTlvType& value_arg);

  const std::string* emv_tlv_data() const;
  void set_emv_tlv_data(const std::string_view* value_arg);
  void set_emv_tlv_data(std::string_view value_arg);


 private:
  static FullIntegrationSetEmvTlvDataRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationTlvType> tlv_type_;
  std::optional<std::string> emv_tlv_data_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationGetPinBlockRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationGetPinBlockRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationGetPinBlockRequest(
    const std::string* account_number,
    const FullIntegrationEncryptionType* encryption_type,
    const std::string* key_slot,
    const std::string* pin_min_length,
    const std::string* pin_max_length,
    const FullIntegrationAllowOnlinePinBypass* allow_online_pin_bypass,
    const FullIntegrationPinAlgorithm* pin_algorithm,
    const std::string* timeout,
    const FullIntegrationEdcType* edc_type,
    const FullIntegrationTransactionType* transaction_type,
    const std::string* title,
    const FullIntegrationPinpadType* pinpad_type,
    const FullIntegrationKsnFlag* ksn_flag);

  const std::string* account_number() const;
  void set_account_number(const std::string_view* value_arg);
  void set_account_number(std::string_view value_arg);

  const FullIntegrationEncryptionType* encryption_type() const;
  void set_encryption_type(const FullIntegrationEncryptionType* value_arg);
  void set_encryption_type(const FullIntegrationEncryptionType& value_arg);

  const std::string* key_slot() const;
  void set_key_slot(const std::string_view* value_arg);
  void set_key_slot(std::string_view value_arg);

  const std::string* pin_min_length() const;
  void set_pin_min_length(const std::string_view* value_arg);
  void set_pin_min_length(std::string_view value_arg);

  const std::string* pin_max_length() const;
  void set_pin_max_length(const std::string_view* value_arg);
  void set_pin_max_length(std::string_view value_arg);

  const FullIntegrationAllowOnlinePinBypass* allow_online_pin_bypass() const;
  void set_allow_online_pin_bypass(const FullIntegrationAllowOnlinePinBypass* value_arg);
  void set_allow_online_pin_bypass(const FullIntegrationAllowOnlinePinBypass& value_arg);

  const FullIntegrationPinAlgorithm* pin_algorithm() const;
  void set_pin_algorithm(const FullIntegrationPinAlgorithm* value_arg);
  void set_pin_algorithm(const FullIntegrationPinAlgorithm& value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FullIntegrationEdcType* edc_type() const;
  void set_edc_type(const FullIntegrationEdcType* value_arg);
  void set_edc_type(const FullIntegrationEdcType& value_arg);

  const FullIntegrationTransactionType* transaction_type() const;
  void set_transaction_type(const FullIntegrationTransactionType* value_arg);
  void set_transaction_type(const FullIntegrationTransactionType& value_arg);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);

  const FullIntegrationPinpadType* pinpad_type() const;
  void set_pinpad_type(const FullIntegrationPinpadType* value_arg);
  void set_pinpad_type(const FullIntegrationPinpadType& value_arg);

  const FullIntegrationKsnFlag* ksn_flag() const;
  void set_ksn_flag(const FullIntegrationKsnFlag* value_arg);
  void set_ksn_flag(const FullIntegrationKsnFlag& value_arg);


 private:
  static FullIntegrationGetPinBlockRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> account_number_;
  std::optional<FullIntegrationEncryptionType> encryption_type_;
  std::optional<std::string> key_slot_;
  std::optional<std::string> pin_min_length_;
  std::optional<std::string> pin_max_length_;
  std::optional<FullIntegrationAllowOnlinePinBypass> allow_online_pin_bypass_;
  std::optional<FullIntegrationPinAlgorithm> pin_algorithm_;
  std::optional<std::string> timeout_;
  std::optional<FullIntegrationEdcType> edc_type_;
  std::optional<FullIntegrationTransactionType> transaction_type_;
  std::optional<std::string> title_;
  std::optional<FullIntegrationPinpadType> pinpad_type_;
  std::optional<FullIntegrationKsnFlag> ksn_flag_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationTerminalConfiguration {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationTerminalConfiguration();

  // Constructs an object setting all fields.
  explicit FullIntegrationTerminalConfiguration(
    const std::string* emv_kernel_configuration_selection,
    const std::string* transaction_date,
    const std::string* transaction_time,
    const std::string* currency_code,
    const std::string* currency_exponent,
    const std::string* merchant_category_code,
    const std::string* transaction_sequence_number,
    const std::string* transaction_cvm_limit);

  const std::string* emv_kernel_configuration_selection() const;
  void set_emv_kernel_configuration_selection(const std::string_view* value_arg);
  void set_emv_kernel_configuration_selection(std::string_view value_arg);

  const std::string* transaction_date() const;
  void set_transaction_date(const std::string_view* value_arg);
  void set_transaction_date(std::string_view value_arg);

  const std::string* transaction_time() const;
  void set_transaction_time(const std::string_view* value_arg);
  void set_transaction_time(std::string_view value_arg);

  const std::string* currency_code() const;
  void set_currency_code(const std::string_view* value_arg);
  void set_currency_code(std::string_view value_arg);

  const std::string* currency_exponent() const;
  void set_currency_exponent(const std::string_view* value_arg);
  void set_currency_exponent(std::string_view value_arg);

  const std::string* merchant_category_code() const;
  void set_merchant_category_code(const std::string_view* value_arg);
  void set_merchant_category_code(std::string_view value_arg);

  const std::string* transaction_sequence_number() const;
  void set_transaction_sequence_number(const std::string_view* value_arg);
  void set_transaction_sequence_number(std::string_view value_arg);

  const std::string* transaction_cvm_limit() const;
  void set_transaction_cvm_limit(const std::string_view* value_arg);
  void set_transaction_cvm_limit(std::string_view value_arg);


 private:
  static FullIntegrationTerminalConfiguration FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationAuthorizeCardRequest;
  friend class FullIntegrationInputAccountWithEmvRequest;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> emv_kernel_configuration_selection_;
  std::optional<std::string> transaction_date_;
  std::optional<std::string> transaction_time_;
  std::optional<std::string> currency_code_;
  std::optional<std::string> currency_exponent_;
  std::optional<std::string> merchant_category_code_;
  std::optional<std::string> transaction_sequence_number_;
  std::optional<std::string> transaction_cvm_limit_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationAmountRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationAmountRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationAmountRequest(
    const std::string* transaction_amount,
    const std::string* tip_amount,
    const std::string* cash_back_amount,
    const std::string* merchant_fee,
    const std::string* tax_amount,
    const std::string* fuel_amount,
    const std::string* service_fee,
    const std::string* original_amount);

  const std::string* transaction_amount() const;
  void set_transaction_amount(const std::string_view* value_arg);
  void set_transaction_amount(std::string_view value_arg);

  const std::string* tip_amount() const;
  void set_tip_amount(const std::string_view* value_arg);
  void set_tip_amount(std::string_view value_arg);

  const std::string* cash_back_amount() const;
  void set_cash_back_amount(const std::string_view* value_arg);
  void set_cash_back_amount(std::string_view value_arg);

  const std::string* merchant_fee() const;
  void set_merchant_fee(const std::string_view* value_arg);
  void set_merchant_fee(std::string_view value_arg);

  const std::string* tax_amount() const;
  void set_tax_amount(const std::string_view* value_arg);
  void set_tax_amount(std::string_view value_arg);

  const std::string* fuel_amount() const;
  void set_fuel_amount(const std::string_view* value_arg);
  void set_fuel_amount(std::string_view value_arg);

  const std::string* service_fee() const;
  void set_service_fee(const std::string_view* value_arg);
  void set_service_fee(std::string_view value_arg);

  const std::string* original_amount() const;
  void set_original_amount(const std::string_view* value_arg);
  void set_original_amount(std::string_view value_arg);


 private:
  static FullIntegrationAmountRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationAuthorizeCardRequest;
  friend class FullIntegrationInputAccountWithEmvRequest;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> transaction_amount_;
  std::optional<std::string> tip_amount_;
  std::optional<std::string> cash_back_amount_;
  std::optional<std::string> merchant_fee_;
  std::optional<std::string> tax_amount_;
  std::optional<std::string> fuel_amount_;
  std::optional<std::string> service_fee_;
  std::optional<std::string> original_amount_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationAuthorizeCardRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationAuthorizeCardRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationAuthorizeCardRequest(
    const FullIntegrationAmountRequest* amount_information,
    const FullIntegrationMerchantDecision* merchant_decision,
    const FullIntegrationEncryptionType* pin_encryption_type,
    const std::string* pin_key_slot,
    const std::string* pin_min_length,
    const std::string* pin_max_length,
    const FullIntegrationPinBypass* pin_bypass,
    const FullIntegrationPinAlgorithm* pin_algorithm,
    const FullIntegrationTerminalConfiguration* terminal_configuration,
    const std::string* tag_list,
    const std::string* timeout,
    const FullIntegrationContinuousScreen* continuous_screen,
    const FullIntegrationPinpadType* pinpad_type,
    const FullIntegrationKsnFlag* ksn_flag,
    const std::string* title);

  const FullIntegrationAmountRequest* amount_information() const;
  void set_amount_information(const FullIntegrationAmountRequest* value_arg);
  void set_amount_information(const FullIntegrationAmountRequest& value_arg);

  const FullIntegrationMerchantDecision* merchant_decision() const;
  void set_merchant_decision(const FullIntegrationMerchantDecision* value_arg);
  void set_merchant_decision(const FullIntegrationMerchantDecision& value_arg);

  const FullIntegrationEncryptionType* pin_encryption_type() const;
  void set_pin_encryption_type(const FullIntegrationEncryptionType* value_arg);
  void set_pin_encryption_type(const FullIntegrationEncryptionType& value_arg);

  const std::string* pin_key_slot() const;
  void set_pin_key_slot(const std::string_view* value_arg);
  void set_pin_key_slot(std::string_view value_arg);

  const std::string* pin_min_length() const;
  void set_pin_min_length(const std::string_view* value_arg);
  void set_pin_min_length(std::string_view value_arg);

  const std::string* pin_max_length() const;
  void set_pin_max_length(const std::string_view* value_arg);
  void set_pin_max_length(std::string_view value_arg);

  const FullIntegrationPinBypass* pin_bypass() const;
  void set_pin_bypass(const FullIntegrationPinBypass* value_arg);
  void set_pin_bypass(const FullIntegrationPinBypass& value_arg);

  const FullIntegrationPinAlgorithm* pin_algorithm() const;
  void set_pin_algorithm(const FullIntegrationPinAlgorithm* value_arg);
  void set_pin_algorithm(const FullIntegrationPinAlgorithm& value_arg);

  const FullIntegrationTerminalConfiguration* terminal_configuration() const;
  void set_terminal_configuration(const FullIntegrationTerminalConfiguration* value_arg);
  void set_terminal_configuration(const FullIntegrationTerminalConfiguration& value_arg);

  const std::string* tag_list() const;
  void set_tag_list(const std::string_view* value_arg);
  void set_tag_list(std::string_view value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FullIntegrationContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FullIntegrationContinuousScreen* value_arg);
  void set_continuous_screen(const FullIntegrationContinuousScreen& value_arg);

  const FullIntegrationPinpadType* pinpad_type() const;
  void set_pinpad_type(const FullIntegrationPinpadType* value_arg);
  void set_pinpad_type(const FullIntegrationPinpadType& value_arg);

  const FullIntegrationKsnFlag* ksn_flag() const;
  void set_ksn_flag(const FullIntegrationKsnFlag* value_arg);
  void set_ksn_flag(const FullIntegrationKsnFlag& value_arg);

  const std::string* title() const;
  void set_title(const std::string_view* value_arg);
  void set_title(std::string_view value_arg);


 private:
  static FullIntegrationAuthorizeCardRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationAmountRequest> amount_information_;
  std::optional<FullIntegrationMerchantDecision> merchant_decision_;
  std::optional<FullIntegrationEncryptionType> pin_encryption_type_;
  std::optional<std::string> pin_key_slot_;
  std::optional<std::string> pin_min_length_;
  std::optional<std::string> pin_max_length_;
  std::optional<FullIntegrationPinBypass> pin_bypass_;
  std::optional<FullIntegrationPinAlgorithm> pin_algorithm_;
  std::optional<FullIntegrationTerminalConfiguration> terminal_configuration_;
  std::optional<std::string> tag_list_;
  std::optional<std::string> timeout_;
  std::optional<FullIntegrationContinuousScreen> continuous_screen_;
  std::optional<FullIntegrationPinpadType> pinpad_type_;
  std::optional<FullIntegrationKsnFlag> ksn_flag_;
  std::optional<std::string> title_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationCompleteOnlineEmvRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationCompleteOnlineEmvRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationCompleteOnlineEmvRequest(
    const FullIntegrationOnlineAuthorizationResult* online_authorization_result,
    const std::string* response_code,
    const std::string* authorization_code,
    const std::string* issuer_authentication_data,
    const std::string* issuer_script1,
    const std::string* issuer_script2,
    const std::string* tag_list,
    const FullIntegrationContinuousScreen* continuous_screen);

  const FullIntegrationOnlineAuthorizationResult* online_authorization_result() const;
  void set_online_authorization_result(const FullIntegrationOnlineAuthorizationResult* value_arg);
  void set_online_authorization_result(const FullIntegrationOnlineAuthorizationResult& value_arg);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* authorization_code() const;
  void set_authorization_code(const std::string_view* value_arg);
  void set_authorization_code(std::string_view value_arg);

  const std::string* issuer_authentication_data() const;
  void set_issuer_authentication_data(const std::string_view* value_arg);
  void set_issuer_authentication_data(std::string_view value_arg);

  const std::string* issuer_script1() const;
  void set_issuer_script1(const std::string_view* value_arg);
  void set_issuer_script1(std::string_view value_arg);

  const std::string* issuer_script2() const;
  void set_issuer_script2(const std::string_view* value_arg);
  void set_issuer_script2(std::string_view value_arg);

  const std::string* tag_list() const;
  void set_tag_list(const std::string_view* value_arg);
  void set_tag_list(std::string_view value_arg);

  const FullIntegrationContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FullIntegrationContinuousScreen* value_arg);
  void set_continuous_screen(const FullIntegrationContinuousScreen& value_arg);


 private:
  static FullIntegrationCompleteOnlineEmvRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationOnlineAuthorizationResult> online_authorization_result_;
  std::optional<std::string> response_code_;
  std::optional<std::string> authorization_code_;
  std::optional<std::string> issuer_authentication_data_;
  std::optional<std::string> issuer_script1_;
  std::optional<std::string> issuer_script2_;
  std::optional<std::string> tag_list_;
  std::optional<FullIntegrationContinuousScreen> continuous_screen_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationCustomMacInformationRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationCustomMacInformationRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationCustomMacInformationRequest(
    const FullIntegrationMacKeyType* key_type,
    const FullIntegrationMacWorkMode* work_mode,
    const std::string* key_slot,
    const flutter::EncodableList* data);

  const FullIntegrationMacKeyType* key_type() const;
  void set_key_type(const FullIntegrationMacKeyType* value_arg);
  void set_key_type(const FullIntegrationMacKeyType& value_arg);

  const FullIntegrationMacWorkMode* work_mode() const;
  void set_work_mode(const FullIntegrationMacWorkMode* value_arg);
  void set_work_mode(const FullIntegrationMacWorkMode& value_arg);

  const std::string* key_slot() const;
  void set_key_slot(const std::string_view* value_arg);
  void set_key_slot(std::string_view value_arg);

  const flutter::EncodableList* data() const;
  void set_data(const flutter::EncodableList* value_arg);
  void set_data(const flutter::EncodableList& value_arg);


 private:
  static FullIntegrationCustomMacInformationRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationInputAccountWithEmvRequest;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationMacKeyType> key_type_;
  std::optional<FullIntegrationMacWorkMode> work_mode_;
  std::optional<std::string> key_slot_;
  std::optional<flutter::EncodableList> data_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationAdditionalPrompts {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationAdditionalPrompts();

  // Constructs an object setting all fields.
  explicit FullIntegrationAdditionalPrompts(
    const FullIntegrationPrompt* expiry_date_prompt,
    const FullIntegrationPrompt* cvv_prompt,
    const FullIntegrationPrompt* zip_code_prompt);

  const FullIntegrationPrompt* expiry_date_prompt() const;
  void set_expiry_date_prompt(const FullIntegrationPrompt* value_arg);
  void set_expiry_date_prompt(const FullIntegrationPrompt& value_arg);

  const FullIntegrationPrompt* cvv_prompt() const;
  void set_cvv_prompt(const FullIntegrationPrompt* value_arg);
  void set_cvv_prompt(const FullIntegrationPrompt& value_arg);

  const FullIntegrationPrompt* zip_code_prompt() const;
  void set_zip_code_prompt(const FullIntegrationPrompt* value_arg);
  void set_zip_code_prompt(const FullIntegrationPrompt& value_arg);


 private:
  static FullIntegrationAdditionalPrompts FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationInputAccountWithEmvRequest;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationPrompt> expiry_date_prompt_;
  std::optional<FullIntegrationPrompt> cvv_prompt_;
  std::optional<FullIntegrationPrompt> zip_code_prompt_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationInputAccountWithEmvRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationInputAccountWithEmvRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationInputAccountWithEmvRequest(
    const FullIntegrationEdcType* edc_type,
    const FullIntegrationTransactionType* transaction_type,
    const FullIntegrationAmountRequest* amount_information,
    const FullIntegrationPinpadEnableFlag* magnetic_swipe_pinpad_enable_flag,
    const FullIntegrationPinpadTypeFlag* magnetic_swipe_pinpad_type_flag,
    const FullIntegrationPinpadEnableFlag* manual_pinpad_enable_flag,
    const FullIntegrationPinpadEnableFlag* contactless_pinpad_enable_flag,
    const FullIntegrationPinpadTypeFlag* contactless_pinpad_type_flag,
    const FullIntegrationPinpadEnableFlag* contact_emv_pinpad_enable_flag,
    const FullIntegrationPinpadTypeFlag* contact_emv_pinpad_type_flag,
    const FullIntegrationPinpadEnableFlag* fallback_swipe_pinpad_enable_flag,
    const FullIntegrationLaserScannerFlag* laser_scanner_flag,
    const FullIntegrationFrontCameraFlag* front_camera_flag,
    const FullIntegrationRearCameraFlag* rear_camera_flag,
    const FullIntegrationAdditionalPrompts* additional_prompts,
    const FullIntegrationDataEncryptionFlag* encryption_flag,
    const std::string* key_slot,
    const std::string* padding_char,
    const FullIntegrationTrackDataSentinel* track_data_sentinel,
    const std::string* min_account_length,
    const std::string* max_account_length,
    const FullIntegrationTerminalConfiguration* terminal_configuration,
    const std::string* tag_list,
    const std::string* timeout,
    const FullIntegrationStatusReportFlag* status_report_flag,
    const FullIntegrationContinuousScreen* continuous_screen,
    const FullIntegrationPinpadEnableFlag* fallback_insert_pinpad_enable_flag,
    const FullIntegrationKsnFlag* ksn_flag,
    const flutter::EncodableList* custom_data,
    const FullIntegrationPinpadEnableFlag* fallback_to_manual_pinpad_enable_flag,
    const FullIntegrationCustomMacInformationRequest* custom_mac_information);

  const FullIntegrationEdcType* edc_type() const;
  void set_edc_type(const FullIntegrationEdcType* value_arg);
  void set_edc_type(const FullIntegrationEdcType& value_arg);

  const FullIntegrationTransactionType* transaction_type() const;
  void set_transaction_type(const FullIntegrationTransactionType* value_arg);
  void set_transaction_type(const FullIntegrationTransactionType& value_arg);

  const FullIntegrationAmountRequest* amount_information() const;
  void set_amount_information(const FullIntegrationAmountRequest* value_arg);
  void set_amount_information(const FullIntegrationAmountRequest& value_arg);

  const FullIntegrationPinpadEnableFlag* magnetic_swipe_pinpad_enable_flag() const;
  void set_magnetic_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_magnetic_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationPinpadTypeFlag* magnetic_swipe_pinpad_type_flag() const;
  void set_magnetic_swipe_pinpad_type_flag(const FullIntegrationPinpadTypeFlag* value_arg);
  void set_magnetic_swipe_pinpad_type_flag(const FullIntegrationPinpadTypeFlag& value_arg);

  const FullIntegrationPinpadEnableFlag* manual_pinpad_enable_flag() const;
  void set_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationPinpadEnableFlag* contactless_pinpad_enable_flag() const;
  void set_contactless_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_contactless_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationPinpadTypeFlag* contactless_pinpad_type_flag() const;
  void set_contactless_pinpad_type_flag(const FullIntegrationPinpadTypeFlag* value_arg);
  void set_contactless_pinpad_type_flag(const FullIntegrationPinpadTypeFlag& value_arg);

  const FullIntegrationPinpadEnableFlag* contact_emv_pinpad_enable_flag() const;
  void set_contact_emv_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_contact_emv_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationPinpadTypeFlag* contact_emv_pinpad_type_flag() const;
  void set_contact_emv_pinpad_type_flag(const FullIntegrationPinpadTypeFlag* value_arg);
  void set_contact_emv_pinpad_type_flag(const FullIntegrationPinpadTypeFlag& value_arg);

  const FullIntegrationPinpadEnableFlag* fallback_swipe_pinpad_enable_flag() const;
  void set_fallback_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_fallback_swipe_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationLaserScannerFlag* laser_scanner_flag() const;
  void set_laser_scanner_flag(const FullIntegrationLaserScannerFlag* value_arg);
  void set_laser_scanner_flag(const FullIntegrationLaserScannerFlag& value_arg);

  const FullIntegrationFrontCameraFlag* front_camera_flag() const;
  void set_front_camera_flag(const FullIntegrationFrontCameraFlag* value_arg);
  void set_front_camera_flag(const FullIntegrationFrontCameraFlag& value_arg);

  const FullIntegrationRearCameraFlag* rear_camera_flag() const;
  void set_rear_camera_flag(const FullIntegrationRearCameraFlag* value_arg);
  void set_rear_camera_flag(const FullIntegrationRearCameraFlag& value_arg);

  const FullIntegrationAdditionalPrompts* additional_prompts() const;
  void set_additional_prompts(const FullIntegrationAdditionalPrompts* value_arg);
  void set_additional_prompts(const FullIntegrationAdditionalPrompts& value_arg);

  const FullIntegrationDataEncryptionFlag* encryption_flag() const;
  void set_encryption_flag(const FullIntegrationDataEncryptionFlag* value_arg);
  void set_encryption_flag(const FullIntegrationDataEncryptionFlag& value_arg);

  const std::string* key_slot() const;
  void set_key_slot(const std::string_view* value_arg);
  void set_key_slot(std::string_view value_arg);

  const std::string* padding_char() const;
  void set_padding_char(const std::string_view* value_arg);
  void set_padding_char(std::string_view value_arg);

  const FullIntegrationTrackDataSentinel* track_data_sentinel() const;
  void set_track_data_sentinel(const FullIntegrationTrackDataSentinel* value_arg);
  void set_track_data_sentinel(const FullIntegrationTrackDataSentinel& value_arg);

  const std::string* min_account_length() const;
  void set_min_account_length(const std::string_view* value_arg);
  void set_min_account_length(std::string_view value_arg);

  const std::string* max_account_length() const;
  void set_max_account_length(const std::string_view* value_arg);
  void set_max_account_length(std::string_view value_arg);

  const FullIntegrationTerminalConfiguration* terminal_configuration() const;
  void set_terminal_configuration(const FullIntegrationTerminalConfiguration* value_arg);
  void set_terminal_configuration(const FullIntegrationTerminalConfiguration& value_arg);

  const std::string* tag_list() const;
  void set_tag_list(const std::string_view* value_arg);
  void set_tag_list(std::string_view value_arg);

  const std::string* timeout() const;
  void set_timeout(const std::string_view* value_arg);
  void set_timeout(std::string_view value_arg);

  const FullIntegrationStatusReportFlag* status_report_flag() const;
  void set_status_report_flag(const FullIntegrationStatusReportFlag* value_arg);
  void set_status_report_flag(const FullIntegrationStatusReportFlag& value_arg);

  const FullIntegrationContinuousScreen* continuous_screen() const;
  void set_continuous_screen(const FullIntegrationContinuousScreen* value_arg);
  void set_continuous_screen(const FullIntegrationContinuousScreen& value_arg);

  const FullIntegrationPinpadEnableFlag* fallback_insert_pinpad_enable_flag() const;
  void set_fallback_insert_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_fallback_insert_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationKsnFlag* ksn_flag() const;
  void set_ksn_flag(const FullIntegrationKsnFlag* value_arg);
  void set_ksn_flag(const FullIntegrationKsnFlag& value_arg);

  const flutter::EncodableList* custom_data() const;
  void set_custom_data(const flutter::EncodableList* value_arg);
  void set_custom_data(const flutter::EncodableList& value_arg);

  const FullIntegrationPinpadEnableFlag* fallback_to_manual_pinpad_enable_flag() const;
  void set_fallback_to_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag* value_arg);
  void set_fallback_to_manual_pinpad_enable_flag(const FullIntegrationPinpadEnableFlag& value_arg);

  const FullIntegrationCustomMacInformationRequest* custom_mac_information() const;
  void set_custom_mac_information(const FullIntegrationCustomMacInformationRequest* value_arg);
  void set_custom_mac_information(const FullIntegrationCustomMacInformationRequest& value_arg);


 private:
  static FullIntegrationInputAccountWithEmvRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationEdcType> edc_type_;
  std::optional<FullIntegrationTransactionType> transaction_type_;
  std::optional<FullIntegrationAmountRequest> amount_information_;
  std::optional<FullIntegrationPinpadEnableFlag> magnetic_swipe_pinpad_enable_flag_;
  std::optional<FullIntegrationPinpadTypeFlag> magnetic_swipe_pinpad_type_flag_;
  std::optional<FullIntegrationPinpadEnableFlag> manual_pinpad_enable_flag_;
  std::optional<FullIntegrationPinpadEnableFlag> contactless_pinpad_enable_flag_;
  std::optional<FullIntegrationPinpadTypeFlag> contactless_pinpad_type_flag_;
  std::optional<FullIntegrationPinpadEnableFlag> contact_emv_pinpad_enable_flag_;
  std::optional<FullIntegrationPinpadTypeFlag> contact_emv_pinpad_type_flag_;
  std::optional<FullIntegrationPinpadEnableFlag> fallback_swipe_pinpad_enable_flag_;
  std::optional<FullIntegrationLaserScannerFlag> laser_scanner_flag_;
  std::optional<FullIntegrationFrontCameraFlag> front_camera_flag_;
  std::optional<FullIntegrationRearCameraFlag> rear_camera_flag_;
  std::optional<FullIntegrationAdditionalPrompts> additional_prompts_;
  std::optional<FullIntegrationDataEncryptionFlag> encryption_flag_;
  std::optional<std::string> key_slot_;
  std::optional<std::string> padding_char_;
  std::optional<FullIntegrationTrackDataSentinel> track_data_sentinel_;
  std::optional<std::string> min_account_length_;
  std::optional<std::string> max_account_length_;
  std::optional<FullIntegrationTerminalConfiguration> terminal_configuration_;
  std::optional<std::string> tag_list_;
  std::optional<std::string> timeout_;
  std::optional<FullIntegrationStatusReportFlag> status_report_flag_;
  std::optional<FullIntegrationContinuousScreen> continuous_screen_;
  std::optional<FullIntegrationPinpadEnableFlag> fallback_insert_pinpad_enable_flag_;
  std::optional<FullIntegrationKsnFlag> ksn_flag_;
  std::optional<flutter::EncodableList> custom_data_;
  std::optional<FullIntegrationPinpadEnableFlag> fallback_to_manual_pinpad_enable_flag_;
  std::optional<FullIntegrationCustomMacInformationRequest> custom_mac_information_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationGetEmvTlvDataRequest {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationGetEmvTlvDataRequest();

  // Constructs an object setting all fields.
  explicit FullIntegrationGetEmvTlvDataRequest(
    const FullIntegrationTlvType* tlv_type,
    const std::string* tag_list);

  const FullIntegrationTlvType* tlv_type() const;
  void set_tlv_type(const FullIntegrationTlvType* value_arg);
  void set_tlv_type(const FullIntegrationTlvType& value_arg);

  const std::string* tag_list() const;
  void set_tag_list(const std::string_view* value_arg);
  void set_tag_list(std::string_view value_arg);


 private:
  static FullIntegrationGetEmvTlvDataRequest FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationTlvType> tlv_type_;
  std::optional<std::string> tag_list_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationAuthorizeCardResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationAuthorizeCardResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationAuthorizeCardResponse(
    const std::string* response_code,
    const std::string* response_message,
    const FullIntegrationFirstGacResult* authorization_result,
    const FullIntegrationSignatureFlag* signature_flag,
    const FullIntegrationPinBypassStatus* pin_bypass_status,
    const std::string* pin_block,
    const std::string* ksn,
    const std::string* emv_tlv_data,
    const FullIntegrationCardholderVerificationMethod* cvm,
    const FullIntegrationPinpadType* pinpad_type);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const FullIntegrationFirstGacResult* authorization_result() const;
  void set_authorization_result(const FullIntegrationFirstGacResult* value_arg);
  void set_authorization_result(const FullIntegrationFirstGacResult& value_arg);

  const FullIntegrationSignatureFlag* signature_flag() const;
  void set_signature_flag(const FullIntegrationSignatureFlag* value_arg);
  void set_signature_flag(const FullIntegrationSignatureFlag& value_arg);

  const FullIntegrationPinBypassStatus* pin_bypass_status() const;
  void set_pin_bypass_status(const FullIntegrationPinBypassStatus* value_arg);
  void set_pin_bypass_status(const FullIntegrationPinBypassStatus& value_arg);

  const std::string* pin_block() const;
  void set_pin_block(const std::string_view* value_arg);
  void set_pin_block(std::string_view value_arg);

  const std::string* ksn() const;
  void set_ksn(const std::string_view* value_arg);
  void set_ksn(std::string_view value_arg);

  const std::string* emv_tlv_data() const;
  void set_emv_tlv_data(const std::string_view* value_arg);
  void set_emv_tlv_data(std::string_view value_arg);

  const FullIntegrationCardholderVerificationMethod* cvm() const;
  void set_cvm(const FullIntegrationCardholderVerificationMethod* value_arg);
  void set_cvm(const FullIntegrationCardholderVerificationMethod& value_arg);

  const FullIntegrationPinpadType* pinpad_type() const;
  void set_pinpad_type(const FullIntegrationPinpadType* value_arg);
  void set_pinpad_type(const FullIntegrationPinpadType& value_arg);


 private:
  static FullIntegrationAuthorizeCardResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<FullIntegrationFirstGacResult> authorization_result_;
  std::optional<FullIntegrationSignatureFlag> signature_flag_;
  std::optional<FullIntegrationPinBypassStatus> pin_bypass_status_;
  std::optional<std::string> pin_block_;
  std::optional<std::string> ksn_;
  std::optional<std::string> emv_tlv_data_;
  std::optional<FullIntegrationCardholderVerificationMethod> cvm_;
  std::optional<FullIntegrationPinpadType> pinpad_type_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationCompleteOnlineEmvResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationCompleteOnlineEmvResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationCompleteOnlineEmvResponse(
    const std::string* response_code,
    const std::string* response_message,
    const FullIntegrationSecondGacResult* authorization_result,
    const std::string* emv_tlv_data,
    const std::string* issuer_script_results);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const FullIntegrationSecondGacResult* authorization_result() const;
  void set_authorization_result(const FullIntegrationSecondGacResult* value_arg);
  void set_authorization_result(const FullIntegrationSecondGacResult& value_arg);

  const std::string* emv_tlv_data() const;
  void set_emv_tlv_data(const std::string_view* value_arg);
  void set_emv_tlv_data(std::string_view value_arg);

  const std::string* issuer_script_results() const;
  void set_issuer_script_results(const std::string_view* value_arg);
  void set_issuer_script_results(std::string_view value_arg);


 private:
  static FullIntegrationCompleteOnlineEmvResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<FullIntegrationSecondGacResult> authorization_result_;
  std::optional<std::string> emv_tlv_data_;
  std::optional<std::string> issuer_script_results_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationSetEmvTlvDataResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationSetEmvTlvDataResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationSetEmvTlvDataResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* tag_list);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* tag_list() const;
  void set_tag_list(const std::string_view* value_arg);
  void set_tag_list(std::string_view value_arg);


 private:
  static FullIntegrationSetEmvTlvDataResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> tag_list_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationGetPinBlockResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationGetPinBlockResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationGetPinBlockResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* pin_block,
    const std::string* ksn,
    const FullIntegrationPinpadType* pinpad_type);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* pin_block() const;
  void set_pin_block(const std::string_view* value_arg);
  void set_pin_block(std::string_view value_arg);

  const std::string* ksn() const;
  void set_ksn(const std::string_view* value_arg);
  void set_ksn(std::string_view value_arg);

  const FullIntegrationPinpadType* pinpad_type() const;
  void set_pinpad_type(const FullIntegrationPinpadType* value_arg);
  void set_pinpad_type(const FullIntegrationPinpadType& value_arg);


 private:
  static FullIntegrationGetPinBlockResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> pin_block_;
  std::optional<std::string> ksn_;
  std::optional<FullIntegrationPinpadType> pinpad_type_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationCustomMacDataResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationCustomMacDataResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationCustomMacDataResponse(
    const flutter::EncodableList* data,
    const std::string* ksn);

  const flutter::EncodableList* data() const;
  void set_data(const flutter::EncodableList* value_arg);
  void set_data(const flutter::EncodableList& value_arg);

  const std::string* ksn() const;
  void set_ksn(const std::string_view* value_arg);
  void set_ksn(std::string_view value_arg);


 private:
  static FullIntegrationCustomMacDataResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationInputAccountWithEmvResponse;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<flutter::EncodableList> data_;
  std::optional<std::string> ksn_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationVasResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationVasResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationVasResponse(
    const FullIntegrationVasResponseCode* vas_code,
    const flutter::EncodableList* vas_data,
    const std::string* ndef_data);

  const FullIntegrationVasResponseCode* vas_code() const;
  void set_vas_code(const FullIntegrationVasResponseCode* value_arg);
  void set_vas_code(const FullIntegrationVasResponseCode& value_arg);

  const flutter::EncodableList* vas_data() const;
  void set_vas_data(const flutter::EncodableList* value_arg);
  void set_vas_data(const flutter::EncodableList& value_arg);

  const std::string* ndef_data() const;
  void set_ndef_data(const std::string_view* value_arg);
  void set_ndef_data(std::string_view value_arg);


 private:
  static FullIntegrationVasResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationInputAccountWithEmvResponse;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<FullIntegrationVasResponseCode> vas_code_;
  std::optional<flutter::EncodableList> vas_data_;
  std::optional<std::string> ndef_data_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationAdditionalAccountResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationAdditionalAccountResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationAdditionalAccountResponse(
    const std::string* expiry_date,
    const std::string* card_holder_name,
    const std::string* service_code,
    const std::string* cvv_code,
    const std::string* zip_code);

  const std::string* expiry_date() const;
  void set_expiry_date(const std::string_view* value_arg);
  void set_expiry_date(std::string_view value_arg);

  const std::string* card_holder_name() const;
  void set_card_holder_name(const std::string_view* value_arg);
  void set_card_holder_name(std::string_view value_arg);

  const std::string* service_code() const;
  void set_service_code(const std::string_view* value_arg);
  void set_service_code(std::string_view value_arg);

  const std::string* cvv_code() const;
  void set_cvv_code(const std::string_view* value_arg);
  void set_cvv_code(std::string_view value_arg);

  const std::string* zip_code() const;
  void set_zip_code(const std::string_view* value_arg);
  void set_zip_code(std::string_view value_arg);


 private:
  static FullIntegrationAdditionalAccountResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class FullIntegrationInputAccountWithEmvResponse;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> expiry_date_;
  std::optional<std::string> card_holder_name_;
  std::optional<std::string> service_code_;
  std::optional<std::string> cvv_code_;
  std::optional<std::string> zip_code_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationInputAccountWithEmvResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationInputAccountWithEmvResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationInputAccountWithEmvResponse(
    const std::string* response_code,
    const std::string* response_message,
    const FullIntegrationEntryMode* entry_mode,
    const std::string* track1_data,
    const std::string* track2_data,
    const std::string* track3_data,
    const std::string* pan,
    const std::string* masked_pan,
    const FullIntegrationBarcodeType* barcode_type,
    const std::string* barcode_data,
    const std::string* ksn,
    const std::string* etb,
    const FullIntegrationContactlessTransactionPath* contactless_transaction_path,
    const FullIntegrationFirstGacResult* authorization_result,
    const FullIntegrationSignatureFlag* signature_flag,
    const FullIntegrationOnlinePinFlag* online_pin_flag,
    const std::string* emv_tlv_data,
    const std::string* encrypted_emv_tlv_data,
    const std::string* encrypted_sensitive_tlv_data,
    const FullIntegrationAdditionalAccountResponse* additional_account_information,
    const FullIntegrationCardholderVerificationMethod* cvm,
    const FullIntegrationVasResponse* vas_information,
    const FullIntegrationPinpadType* pinpad_type,
    const FullIntegrationLuhnValidationResult* luhn_validation_result,
    const flutter::EncodableList* custom_encrypted_data,
    const FullIntegrationCustomMacDataResponse* custom_mac_data);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const FullIntegrationEntryMode* entry_mode() const;
  void set_entry_mode(const FullIntegrationEntryMode* value_arg);
  void set_entry_mode(const FullIntegrationEntryMode& value_arg);

  const std::string* track1_data() const;
  void set_track1_data(const std::string_view* value_arg);
  void set_track1_data(std::string_view value_arg);

  const std::string* track2_data() const;
  void set_track2_data(const std::string_view* value_arg);
  void set_track2_data(std::string_view value_arg);

  const std::string* track3_data() const;
  void set_track3_data(const std::string_view* value_arg);
  void set_track3_data(std::string_view value_arg);

  const std::string* pan() const;
  void set_pan(const std::string_view* value_arg);
  void set_pan(std::string_view value_arg);

  const std::string* masked_pan() const;
  void set_masked_pan(const std::string_view* value_arg);
  void set_masked_pan(std::string_view value_arg);

  const FullIntegrationBarcodeType* barcode_type() const;
  void set_barcode_type(const FullIntegrationBarcodeType* value_arg);
  void set_barcode_type(const FullIntegrationBarcodeType& value_arg);

  const std::string* barcode_data() const;
  void set_barcode_data(const std::string_view* value_arg);
  void set_barcode_data(std::string_view value_arg);

  const std::string* ksn() const;
  void set_ksn(const std::string_view* value_arg);
  void set_ksn(std::string_view value_arg);

  const std::string* etb() const;
  void set_etb(const std::string_view* value_arg);
  void set_etb(std::string_view value_arg);

  const FullIntegrationContactlessTransactionPath* contactless_transaction_path() const;
  void set_contactless_transaction_path(const FullIntegrationContactlessTransactionPath* value_arg);
  void set_contactless_transaction_path(const FullIntegrationContactlessTransactionPath& value_arg);

  const FullIntegrationFirstGacResult* authorization_result() const;
  void set_authorization_result(const FullIntegrationFirstGacResult* value_arg);
  void set_authorization_result(const FullIntegrationFirstGacResult& value_arg);

  const FullIntegrationSignatureFlag* signature_flag() const;
  void set_signature_flag(const FullIntegrationSignatureFlag* value_arg);
  void set_signature_flag(const FullIntegrationSignatureFlag& value_arg);

  const FullIntegrationOnlinePinFlag* online_pin_flag() const;
  void set_online_pin_flag(const FullIntegrationOnlinePinFlag* value_arg);
  void set_online_pin_flag(const FullIntegrationOnlinePinFlag& value_arg);

  const std::string* emv_tlv_data() const;
  void set_emv_tlv_data(const std::string_view* value_arg);
  void set_emv_tlv_data(std::string_view value_arg);

  const std::string* encrypted_emv_tlv_data() const;
  void set_encrypted_emv_tlv_data(const std::string_view* value_arg);
  void set_encrypted_emv_tlv_data(std::string_view value_arg);

  const std::string* encrypted_sensitive_tlv_data() const;
  void set_encrypted_sensitive_tlv_data(const std::string_view* value_arg);
  void set_encrypted_sensitive_tlv_data(std::string_view value_arg);

  const FullIntegrationAdditionalAccountResponse* additional_account_information() const;
  void set_additional_account_information(const FullIntegrationAdditionalAccountResponse* value_arg);
  void set_additional_account_information(const FullIntegrationAdditionalAccountResponse& value_arg);

  const FullIntegrationCardholderVerificationMethod* cvm() const;
  void set_cvm(const FullIntegrationCardholderVerificationMethod* value_arg);
  void set_cvm(const FullIntegrationCardholderVerificationMethod& value_arg);

  const FullIntegrationVasResponse* vas_information() const;
  void set_vas_information(const FullIntegrationVasResponse* value_arg);
  void set_vas_information(const FullIntegrationVasResponse& value_arg);

  const FullIntegrationPinpadType* pinpad_type() const;
  void set_pinpad_type(const FullIntegrationPinpadType* value_arg);
  void set_pinpad_type(const FullIntegrationPinpadType& value_arg);

  const FullIntegrationLuhnValidationResult* luhn_validation_result() const;
  void set_luhn_validation_result(const FullIntegrationLuhnValidationResult* value_arg);
  void set_luhn_validation_result(const FullIntegrationLuhnValidationResult& value_arg);

  const flutter::EncodableList* custom_encrypted_data() const;
  void set_custom_encrypted_data(const flutter::EncodableList* value_arg);
  void set_custom_encrypted_data(const flutter::EncodableList& value_arg);

  const FullIntegrationCustomMacDataResponse* custom_mac_data() const;
  void set_custom_mac_data(const FullIntegrationCustomMacDataResponse* value_arg);
  void set_custom_mac_data(const FullIntegrationCustomMacDataResponse& value_arg);


 private:
  static FullIntegrationInputAccountWithEmvResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<FullIntegrationEntryMode> entry_mode_;
  std::optional<std::string> track1_data_;
  std::optional<std::string> track2_data_;
  std::optional<std::string> track3_data_;
  std::optional<std::string> pan_;
  std::optional<std::string> masked_pan_;
  std::optional<FullIntegrationBarcodeType> barcode_type_;
  std::optional<std::string> barcode_data_;
  std::optional<std::string> ksn_;
  std::optional<std::string> etb_;
  std::optional<FullIntegrationContactlessTransactionPath> contactless_transaction_path_;
  std::optional<FullIntegrationFirstGacResult> authorization_result_;
  std::optional<FullIntegrationSignatureFlag> signature_flag_;
  std::optional<FullIntegrationOnlinePinFlag> online_pin_flag_;
  std::optional<std::string> emv_tlv_data_;
  std::optional<std::string> encrypted_emv_tlv_data_;
  std::optional<std::string> encrypted_sensitive_tlv_data_;
  std::optional<FullIntegrationAdditionalAccountResponse> additional_account_information_;
  std::optional<FullIntegrationCardholderVerificationMethod> cvm_;
  std::optional<FullIntegrationVasResponse> vas_information_;
  std::optional<FullIntegrationPinpadType> pinpad_type_;
  std::optional<FullIntegrationLuhnValidationResult> luhn_validation_result_;
  std::optional<flutter::EncodableList> custom_encrypted_data_;
  std::optional<FullIntegrationCustomMacDataResponse> custom_mac_data_;

};


// Generated class from Pigeon that represents data sent in messages.
class FullIntegrationGetEmvTlvDataResponse {
 public:
  // Constructs an object setting all non-nullable fields.
  FullIntegrationGetEmvTlvDataResponse();

  // Constructs an object setting all fields.
  explicit FullIntegrationGetEmvTlvDataResponse(
    const std::string* response_code,
    const std::string* response_message,
    const std::string* emv_tlv_data);

  const std::string* response_code() const;
  void set_response_code(const std::string_view* value_arg);
  void set_response_code(std::string_view value_arg);

  const std::string* response_message() const;
  void set_response_message(const std::string_view* value_arg);
  void set_response_message(std::string_view value_arg);

  const std::string* emv_tlv_data() const;
  void set_emv_tlv_data(const std::string_view* value_arg);
  void set_emv_tlv_data(std::string_view value_arg);


 private:
  static FullIntegrationGetEmvTlvDataResponse FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkFullIntegrationApi;
  friend class POSLinkFullIntegrationApiCodecSerializer;
  std::optional<std::string> response_code_;
  std::optional<std::string> response_message_;
  std::optional<std::string> emv_tlv_data_;

};

class POSLinkFullIntegrationApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  POSLinkFullIntegrationApiCodecSerializer();
  inline static POSLinkFullIntegrationApiCodecSerializer& GetInstance() {
    static POSLinkFullIntegrationApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class POSLinkFullIntegrationApi {
 public:
  POSLinkFullIntegrationApi(const POSLinkFullIntegrationApi&) = delete;
  POSLinkFullIntegrationApi& operator=(const POSLinkFullIntegrationApi&) = delete;
  virtual ~POSLinkFullIntegrationApi() {}
  virtual void GetEmvTlvData(
    const FullIntegrationGetEmvTlvDataRequest& req,
    std::function<void(ErrorOr<FullIntegrationGetEmvTlvDataResponse> reply)> result) = 0;
  virtual void InputAccountWithEmv(
    const FullIntegrationInputAccountWithEmvRequest& req,
    std::function<void(ErrorOr<FullIntegrationInputAccountWithEmvResponse> reply)> result) = 0;
  virtual void CompleteOnlineEmv(
    const FullIntegrationCompleteOnlineEmvRequest& req,
    std::function<void(ErrorOr<FullIntegrationCompleteOnlineEmvResponse> reply)> result) = 0;
  virtual void AuthorizeCard(
    const FullIntegrationAuthorizeCardRequest& req,
    std::function<void(ErrorOr<FullIntegrationAuthorizeCardResponse> reply)> result) = 0;
  virtual void GetPinBlock(
    const FullIntegrationGetPinBlockRequest& req,
    std::function<void(ErrorOr<FullIntegrationGetPinBlockResponse> reply)> result) = 0;
  virtual void SetEmvTlvData(
    const FullIntegrationSetEmvTlvDataRequest& req,
    std::function<void(ErrorOr<FullIntegrationSetEmvTlvDataResponse> reply)> result) = 0;

  // The codec used by POSLinkFullIntegrationApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `POSLinkFullIntegrationApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    POSLinkFullIntegrationApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  POSLinkFullIntegrationApi() = default;

};
}  // namespace POSLinkFullIntegration
#endif  // PIGEON_POSLINKFULLINTEGRATION_H_
