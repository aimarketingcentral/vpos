// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkPayload.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkPayload {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// PayloadPayloadRequest

PayloadPayloadRequest::PayloadPayloadRequest() {}

PayloadPayloadRequest::PayloadPayloadRequest(const std::string* payload)
 : payload_(payload ? std::optional<std::string>(*payload) : std::nullopt) {}

const std::string* PayloadPayloadRequest::payload() const {
  return payload_ ? &(*payload_) : nullptr;
}

void PayloadPayloadRequest::set_payload(const std::string_view* value_arg) {
  payload_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PayloadPayloadRequest::set_payload(std::string_view value_arg) {
  payload_ = value_arg;
}


EncodableList PayloadPayloadRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(payload_ ? EncodableValue(*payload_) : EncodableValue());
  return list;
}

PayloadPayloadRequest PayloadPayloadRequest::FromEncodableList(const EncodableList& list) {
  PayloadPayloadRequest decoded;
  auto& encodable_payload = list[0];
  if (!encodable_payload.IsNull()) {
    decoded.set_payload(std::get<std::string>(encodable_payload));
  }
  return decoded;
}

// PayloadPayloadResponse

PayloadPayloadResponse::PayloadPayloadResponse() {}

PayloadPayloadResponse::PayloadPayloadResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* payload)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    payload_(payload ? std::optional<std::string>(*payload) : std::nullopt) {}

const std::string* PayloadPayloadResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void PayloadPayloadResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PayloadPayloadResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* PayloadPayloadResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void PayloadPayloadResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PayloadPayloadResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* PayloadPayloadResponse::payload() const {
  return payload_ ? &(*payload_) : nullptr;
}

void PayloadPayloadResponse::set_payload(const std::string_view* value_arg) {
  payload_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PayloadPayloadResponse::set_payload(std::string_view value_arg) {
  payload_ = value_arg;
}


EncodableList PayloadPayloadResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(payload_ ? EncodableValue(*payload_) : EncodableValue());
  return list;
}

PayloadPayloadResponse PayloadPayloadResponse::FromEncodableList(const EncodableList& list) {
  PayloadPayloadResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_payload = list[2];
  if (!encodable_payload.IsNull()) {
    decoded.set_payload(std::get<std::string>(encodable_payload));
  }
  return decoded;
}


POSLinkPayloadApiCodecSerializer::POSLinkPayloadApiCodecSerializer() {}

EncodableValue POSLinkPayloadApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(PayloadPayloadRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(PayloadPayloadResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkPayloadApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PayloadPayloadRequest)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<PayloadPayloadRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(PayloadPayloadResponse)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<PayloadPayloadResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkPayloadApi.
const flutter::StandardMessageCodec& POSLinkPayloadApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkPayloadApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkPayloadApi` to handle messages through the `binary_messenger`.
void POSLinkPayloadApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkPayloadApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkPayloadApi.payload", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const PayloadPayloadRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->Payload(req_arg, [reply](ErrorOr<PayloadPayloadResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkPayloadApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkPayloadApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkPayload
