// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "POSLinkDevice.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkDevice {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// DeviceCardInsertDetectionRequest

DeviceCardInsertDetectionRequest::DeviceCardInsertDetectionRequest() {}

DeviceCardInsertDetectionRequest::DeviceCardInsertDetectionRequest(const std::string* class_i_d)
 : class_i_d_(class_i_d ? std::optional<std::string>(*class_i_d) : std::nullopt) {}

const std::string* DeviceCardInsertDetectionRequest::class_i_d() const {
  return class_i_d_ ? &(*class_i_d_) : nullptr;
}

void DeviceCardInsertDetectionRequest::set_class_i_d(const std::string_view* value_arg) {
  class_i_d_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCardInsertDetectionRequest::set_class_i_d(std::string_view value_arg) {
  class_i_d_ = value_arg;
}


EncodableList DeviceCardInsertDetectionRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(class_i_d_ ? EncodableValue(*class_i_d_) : EncodableValue());
  return list;
}

DeviceCardInsertDetectionRequest DeviceCardInsertDetectionRequest::FromEncodableList(const EncodableList& list) {
  DeviceCardInsertDetectionRequest decoded;
  auto& encodable_class_i_d = list[0];
  if (!encodable_class_i_d.IsNull()) {
    decoded.set_class_i_d(std::get<std::string>(encodable_class_i_d));
  }
  return decoded;
}

// DevicePrinterRequest

DevicePrinterRequest::DevicePrinterRequest() {}

DevicePrinterRequest::DevicePrinterRequest(
  const std::string* print_copy,
  const std::string* print_data)
 : print_copy_(print_copy ? std::optional<std::string>(*print_copy) : std::nullopt),
    print_data_(print_data ? std::optional<std::string>(*print_data) : std::nullopt) {}

const std::string* DevicePrinterRequest::print_copy() const {
  return print_copy_ ? &(*print_copy_) : nullptr;
}

void DevicePrinterRequest::set_print_copy(const std::string_view* value_arg) {
  print_copy_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DevicePrinterRequest::set_print_copy(std::string_view value_arg) {
  print_copy_ = value_arg;
}


const std::string* DevicePrinterRequest::print_data() const {
  return print_data_ ? &(*print_data_) : nullptr;
}

void DevicePrinterRequest::set_print_data(const std::string_view* value_arg) {
  print_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DevicePrinterRequest::set_print_data(std::string_view value_arg) {
  print_data_ = value_arg;
}


EncodableList DevicePrinterRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(print_copy_ ? EncodableValue(*print_copy_) : EncodableValue());
  list.push_back(print_data_ ? EncodableValue(*print_data_) : EncodableValue());
  return list;
}

DevicePrinterRequest DevicePrinterRequest::FromEncodableList(const EncodableList& list) {
  DevicePrinterRequest decoded;
  auto& encodable_print_copy = list[0];
  if (!encodable_print_copy.IsNull()) {
    decoded.set_print_copy(std::get<std::string>(encodable_print_copy));
  }
  auto& encodable_print_data = list[1];
  if (!encodable_print_data.IsNull()) {
    decoded.set_print_data(std::get<std::string>(encodable_print_data));
  }
  return decoded;
}

// DeviceCameraScanRequest

DeviceCameraScanRequest::DeviceCameraScanRequest() {}

DeviceCameraScanRequest::DeviceCameraScanRequest(
  const DeviceReaderType* reader,
  const std::string* timeout)
 : reader_(reader ? std::optional<DeviceReaderType>(*reader) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt) {}

const DeviceReaderType* DeviceCameraScanRequest::reader() const {
  return reader_ ? &(*reader_) : nullptr;
}

void DeviceCameraScanRequest::set_reader(const DeviceReaderType* value_arg) {
  reader_ = value_arg ? std::optional<DeviceReaderType>(*value_arg) : std::nullopt;
}

void DeviceCameraScanRequest::set_reader(const DeviceReaderType& value_arg) {
  reader_ = value_arg;
}


const std::string* DeviceCameraScanRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void DeviceCameraScanRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCameraScanRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


EncodableList DeviceCameraScanRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(reader_ ? EncodableValue((int)(*reader_)) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  return list;
}

DeviceCameraScanRequest DeviceCameraScanRequest::FromEncodableList(const EncodableList& list) {
  DeviceCameraScanRequest decoded;
  auto& encodable_reader = list[0];
  if (!encodable_reader.IsNull()) {
    decoded.set_reader((DeviceReaderType)(std::get<int32_t>(encodable_reader)));
  }
  auto& encodable_timeout = list[1];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  return decoded;
}

// DeviceMifareCardRequest

DeviceMifareCardRequest::DeviceMifareCardRequest() {}

DeviceMifareCardRequest::DeviceMifareCardRequest(
  const DeviceM1CommandType* m1_command,
  const std::string* block_number,
  const std::string* password,
  const DevicePasswordType* password_type,
  const std::string* block_value,
  const std::string* update_block_number,
  const std::string* timeout)
 : m1_command_(m1_command ? std::optional<DeviceM1CommandType>(*m1_command) : std::nullopt),
    block_number_(block_number ? std::optional<std::string>(*block_number) : std::nullopt),
    password_(password ? std::optional<std::string>(*password) : std::nullopt),
    password_type_(password_type ? std::optional<DevicePasswordType>(*password_type) : std::nullopt),
    block_value_(block_value ? std::optional<std::string>(*block_value) : std::nullopt),
    update_block_number_(update_block_number ? std::optional<std::string>(*update_block_number) : std::nullopt),
    timeout_(timeout ? std::optional<std::string>(*timeout) : std::nullopt) {}

const DeviceM1CommandType* DeviceMifareCardRequest::m1_command() const {
  return m1_command_ ? &(*m1_command_) : nullptr;
}

void DeviceMifareCardRequest::set_m1_command(const DeviceM1CommandType* value_arg) {
  m1_command_ = value_arg ? std::optional<DeviceM1CommandType>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_m1_command(const DeviceM1CommandType& value_arg) {
  m1_command_ = value_arg;
}


const std::string* DeviceMifareCardRequest::block_number() const {
  return block_number_ ? &(*block_number_) : nullptr;
}

void DeviceMifareCardRequest::set_block_number(const std::string_view* value_arg) {
  block_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_block_number(std::string_view value_arg) {
  block_number_ = value_arg;
}


const std::string* DeviceMifareCardRequest::password() const {
  return password_ ? &(*password_) : nullptr;
}

void DeviceMifareCardRequest::set_password(const std::string_view* value_arg) {
  password_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_password(std::string_view value_arg) {
  password_ = value_arg;
}


const DevicePasswordType* DeviceMifareCardRequest::password_type() const {
  return password_type_ ? &(*password_type_) : nullptr;
}

void DeviceMifareCardRequest::set_password_type(const DevicePasswordType* value_arg) {
  password_type_ = value_arg ? std::optional<DevicePasswordType>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_password_type(const DevicePasswordType& value_arg) {
  password_type_ = value_arg;
}


const std::string* DeviceMifareCardRequest::block_value() const {
  return block_value_ ? &(*block_value_) : nullptr;
}

void DeviceMifareCardRequest::set_block_value(const std::string_view* value_arg) {
  block_value_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_block_value(std::string_view value_arg) {
  block_value_ = value_arg;
}


const std::string* DeviceMifareCardRequest::update_block_number() const {
  return update_block_number_ ? &(*update_block_number_) : nullptr;
}

void DeviceMifareCardRequest::set_update_block_number(const std::string_view* value_arg) {
  update_block_number_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_update_block_number(std::string_view value_arg) {
  update_block_number_ = value_arg;
}


const std::string* DeviceMifareCardRequest::timeout() const {
  return timeout_ ? &(*timeout_) : nullptr;
}

void DeviceMifareCardRequest::set_timeout(const std::string_view* value_arg) {
  timeout_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardRequest::set_timeout(std::string_view value_arg) {
  timeout_ = value_arg;
}


EncodableList DeviceMifareCardRequest::ToEncodableList() const {
  EncodableList list;
  list.reserve(7);
  list.push_back(m1_command_ ? EncodableValue((int)(*m1_command_)) : EncodableValue());
  list.push_back(block_number_ ? EncodableValue(*block_number_) : EncodableValue());
  list.push_back(password_ ? EncodableValue(*password_) : EncodableValue());
  list.push_back(password_type_ ? EncodableValue((int)(*password_type_)) : EncodableValue());
  list.push_back(block_value_ ? EncodableValue(*block_value_) : EncodableValue());
  list.push_back(update_block_number_ ? EncodableValue(*update_block_number_) : EncodableValue());
  list.push_back(timeout_ ? EncodableValue(*timeout_) : EncodableValue());
  return list;
}

DeviceMifareCardRequest DeviceMifareCardRequest::FromEncodableList(const EncodableList& list) {
  DeviceMifareCardRequest decoded;
  auto& encodable_m1_command = list[0];
  if (!encodable_m1_command.IsNull()) {
    decoded.set_m1_command((DeviceM1CommandType)(std::get<int32_t>(encodable_m1_command)));
  }
  auto& encodable_block_number = list[1];
  if (!encodable_block_number.IsNull()) {
    decoded.set_block_number(std::get<std::string>(encodable_block_number));
  }
  auto& encodable_password = list[2];
  if (!encodable_password.IsNull()) {
    decoded.set_password(std::get<std::string>(encodable_password));
  }
  auto& encodable_password_type = list[3];
  if (!encodable_password_type.IsNull()) {
    decoded.set_password_type((DevicePasswordType)(std::get<int32_t>(encodable_password_type)));
  }
  auto& encodable_block_value = list[4];
  if (!encodable_block_value.IsNull()) {
    decoded.set_block_value(std::get<std::string>(encodable_block_value));
  }
  auto& encodable_update_block_number = list[5];
  if (!encodable_update_block_number.IsNull()) {
    decoded.set_update_block_number(std::get<std::string>(encodable_update_block_number));
  }
  auto& encodable_timeout = list[6];
  if (!encodable_timeout.IsNull()) {
    decoded.set_timeout(std::get<std::string>(encodable_timeout));
  }
  return decoded;
}

// DeviceCameraScanResponse

DeviceCameraScanResponse::DeviceCameraScanResponse() {}

DeviceCameraScanResponse::DeviceCameraScanResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* barcode_data,
  const DeviceBarcodeType* barcode_type)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    barcode_data_(barcode_data ? std::optional<std::string>(*barcode_data) : std::nullopt),
    barcode_type_(barcode_type ? std::optional<DeviceBarcodeType>(*barcode_type) : std::nullopt) {}

const std::string* DeviceCameraScanResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void DeviceCameraScanResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCameraScanResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* DeviceCameraScanResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void DeviceCameraScanResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCameraScanResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* DeviceCameraScanResponse::barcode_data() const {
  return barcode_data_ ? &(*barcode_data_) : nullptr;
}

void DeviceCameraScanResponse::set_barcode_data(const std::string_view* value_arg) {
  barcode_data_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCameraScanResponse::set_barcode_data(std::string_view value_arg) {
  barcode_data_ = value_arg;
}


const DeviceBarcodeType* DeviceCameraScanResponse::barcode_type() const {
  return barcode_type_ ? &(*barcode_type_) : nullptr;
}

void DeviceCameraScanResponse::set_barcode_type(const DeviceBarcodeType* value_arg) {
  barcode_type_ = value_arg ? std::optional<DeviceBarcodeType>(*value_arg) : std::nullopt;
}

void DeviceCameraScanResponse::set_barcode_type(const DeviceBarcodeType& value_arg) {
  barcode_type_ = value_arg;
}


EncodableList DeviceCameraScanResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(barcode_data_ ? EncodableValue(*barcode_data_) : EncodableValue());
  list.push_back(barcode_type_ ? EncodableValue((int)(*barcode_type_)) : EncodableValue());
  return list;
}

DeviceCameraScanResponse DeviceCameraScanResponse::FromEncodableList(const EncodableList& list) {
  DeviceCameraScanResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_barcode_data = list[2];
  if (!encodable_barcode_data.IsNull()) {
    decoded.set_barcode_data(std::get<std::string>(encodable_barcode_data));
  }
  auto& encodable_barcode_type = list[3];
  if (!encodable_barcode_type.IsNull()) {
    decoded.set_barcode_type((DeviceBarcodeType)(std::get<int32_t>(encodable_barcode_type)));
  }
  return decoded;
}

// DeviceCardInsertDetectionResponse

DeviceCardInsertDetectionResponse::DeviceCardInsertDetectionResponse() {}

DeviceCardInsertDetectionResponse::DeviceCardInsertDetectionResponse(
  const std::string* response_code,
  const std::string* response_message,
  const DeviceCardInsertStatus* card_insert_status)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    card_insert_status_(card_insert_status ? std::optional<DeviceCardInsertStatus>(*card_insert_status) : std::nullopt) {}

const std::string* DeviceCardInsertDetectionResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void DeviceCardInsertDetectionResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCardInsertDetectionResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* DeviceCardInsertDetectionResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void DeviceCardInsertDetectionResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceCardInsertDetectionResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const DeviceCardInsertStatus* DeviceCardInsertDetectionResponse::card_insert_status() const {
  return card_insert_status_ ? &(*card_insert_status_) : nullptr;
}

void DeviceCardInsertDetectionResponse::set_card_insert_status(const DeviceCardInsertStatus* value_arg) {
  card_insert_status_ = value_arg ? std::optional<DeviceCardInsertStatus>(*value_arg) : std::nullopt;
}

void DeviceCardInsertDetectionResponse::set_card_insert_status(const DeviceCardInsertStatus& value_arg) {
  card_insert_status_ = value_arg;
}


EncodableList DeviceCardInsertDetectionResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(card_insert_status_ ? EncodableValue((int)(*card_insert_status_)) : EncodableValue());
  return list;
}

DeviceCardInsertDetectionResponse DeviceCardInsertDetectionResponse::FromEncodableList(const EncodableList& list) {
  DeviceCardInsertDetectionResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_card_insert_status = list[2];
  if (!encodable_card_insert_status.IsNull()) {
    decoded.set_card_insert_status((DeviceCardInsertStatus)(std::get<int32_t>(encodable_card_insert_status)));
  }
  return decoded;
}

// DeviceMifareCardResponse

DeviceMifareCardResponse::DeviceMifareCardResponse() {}

DeviceMifareCardResponse::DeviceMifareCardResponse(
  const std::string* response_code,
  const std::string* response_message,
  const std::string* block_value)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt),
    block_value_(block_value ? std::optional<std::string>(*block_value) : std::nullopt) {}

const std::string* DeviceMifareCardResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void DeviceMifareCardResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* DeviceMifareCardResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void DeviceMifareCardResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


const std::string* DeviceMifareCardResponse::block_value() const {
  return block_value_ ? &(*block_value_) : nullptr;
}

void DeviceMifareCardResponse::set_block_value(const std::string_view* value_arg) {
  block_value_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DeviceMifareCardResponse::set_block_value(std::string_view value_arg) {
  block_value_ = value_arg;
}


EncodableList DeviceMifareCardResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  list.push_back(block_value_ ? EncodableValue(*block_value_) : EncodableValue());
  return list;
}

DeviceMifareCardResponse DeviceMifareCardResponse::FromEncodableList(const EncodableList& list) {
  DeviceMifareCardResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  auto& encodable_block_value = list[2];
  if (!encodable_block_value.IsNull()) {
    decoded.set_block_value(std::get<std::string>(encodable_block_value));
  }
  return decoded;
}

// DevicePrinterResponse

DevicePrinterResponse::DevicePrinterResponse() {}

DevicePrinterResponse::DevicePrinterResponse(
  const std::string* response_code,
  const std::string* response_message)
 : response_code_(response_code ? std::optional<std::string>(*response_code) : std::nullopt),
    response_message_(response_message ? std::optional<std::string>(*response_message) : std::nullopt) {}

const std::string* DevicePrinterResponse::response_code() const {
  return response_code_ ? &(*response_code_) : nullptr;
}

void DevicePrinterResponse::set_response_code(const std::string_view* value_arg) {
  response_code_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DevicePrinterResponse::set_response_code(std::string_view value_arg) {
  response_code_ = value_arg;
}


const std::string* DevicePrinterResponse::response_message() const {
  return response_message_ ? &(*response_message_) : nullptr;
}

void DevicePrinterResponse::set_response_message(const std::string_view* value_arg) {
  response_message_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void DevicePrinterResponse::set_response_message(std::string_view value_arg) {
  response_message_ = value_arg;
}


EncodableList DevicePrinterResponse::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(response_code_ ? EncodableValue(*response_code_) : EncodableValue());
  list.push_back(response_message_ ? EncodableValue(*response_message_) : EncodableValue());
  return list;
}

DevicePrinterResponse DevicePrinterResponse::FromEncodableList(const EncodableList& list) {
  DevicePrinterResponse decoded;
  auto& encodable_response_code = list[0];
  if (!encodable_response_code.IsNull()) {
    decoded.set_response_code(std::get<std::string>(encodable_response_code));
  }
  auto& encodable_response_message = list[1];
  if (!encodable_response_message.IsNull()) {
    decoded.set_response_message(std::get<std::string>(encodable_response_message));
  }
  return decoded;
}


POSLinkDeviceApiCodecSerializer::POSLinkDeviceApiCodecSerializer() {}

EncodableValue POSLinkDeviceApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(DeviceCameraScanRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(DeviceCameraScanResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(DeviceCardInsertDetectionRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(DeviceCardInsertDetectionResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(DeviceMifareCardRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(DeviceMifareCardResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(DevicePrinterRequest::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(DevicePrinterResponse::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void POSLinkDeviceApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(DeviceCameraScanRequest)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<DeviceCameraScanRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DeviceCameraScanResponse)) {
      stream->WriteByte(129);
      WriteValue(EncodableValue(std::any_cast<DeviceCameraScanResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DeviceCardInsertDetectionRequest)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(std::any_cast<DeviceCardInsertDetectionRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DeviceCardInsertDetectionResponse)) {
      stream->WriteByte(131);
      WriteValue(EncodableValue(std::any_cast<DeviceCardInsertDetectionResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DeviceMifareCardRequest)) {
      stream->WriteByte(132);
      WriteValue(EncodableValue(std::any_cast<DeviceMifareCardRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DeviceMifareCardResponse)) {
      stream->WriteByte(133);
      WriteValue(EncodableValue(std::any_cast<DeviceMifareCardResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DevicePrinterRequest)) {
      stream->WriteByte(134);
      WriteValue(EncodableValue(std::any_cast<DevicePrinterRequest>(*custom_value).ToEncodableList()), stream);
      return;
    }
    if (custom_value->type() == typeid(DevicePrinterResponse)) {
      stream->WriteByte(135);
      WriteValue(EncodableValue(std::any_cast<DevicePrinterResponse>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by POSLinkDeviceApi.
const flutter::StandardMessageCodec& POSLinkDeviceApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&POSLinkDeviceApiCodecSerializer::GetInstance());
}

// Sets up an instance of `POSLinkDeviceApi` to handle messages through the `binary_messenger`.
void POSLinkDeviceApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  POSLinkDeviceApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkDeviceApi.mifareCard", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const DeviceMifareCardRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->MifareCard(req_arg, [reply](ErrorOr<DeviceMifareCardResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkDeviceApi.cameraScan", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const DeviceCameraScanRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->CameraScan(req_arg, [reply](ErrorOr<DeviceCameraScanResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkDeviceApi.printer", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const DevicePrinterRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->Printer(req_arg, [reply](ErrorOr<DevicePrinterResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.POSLinkDeviceApi.cardInsertDetection", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_req_arg = args.at(0);
          if (encodable_req_arg.IsNull()) {
            reply(WrapError("req_arg unexpectedly null."));
            return;
          }
          const auto& req_arg = std::any_cast<const DeviceCardInsertDetectionRequest&>(std::get<CustomEncodableValue>(encodable_req_arg));
          api->CardInsertDetection(req_arg, [reply](ErrorOr<DeviceCardInsertDetectionResponse>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(CustomEncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue POSLinkDeviceApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue POSLinkDeviceApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace POSLinkDevice
