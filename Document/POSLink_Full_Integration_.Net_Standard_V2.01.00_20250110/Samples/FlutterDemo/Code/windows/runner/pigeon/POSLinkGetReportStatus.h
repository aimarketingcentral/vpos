// Autogenerated from Pigeon (v4.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_POSLINKGETREPORTSTATUS_POSLINKGETREPORTSTATUS_H_
#define PIGEON_POSLINKGETREPORTSTATUS_POSLINKGETREPORTSTATUS_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkGetReportStatus {

// Generated class from Pigeon.

class FlutterError {
 public:
  FlutterError(const std::string& code)
    : code_(code) {}
  FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) { new(&v_) T(rhs); }
  ErrorOr(const T&& rhs) { v_ = std::move(rhs); }
  ErrorOr(const FlutterError& rhs) {
    new(&v_) FlutterError(rhs);
  }
  ErrorOr(const FlutterError&& rhs) { v_ = std::move(rhs); }

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class POSLinkGetReportStatusApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated interface from Pigeon that represents a handler of messages from Flutter.
class POSLinkGetReportStatusApi {
 public:
  POSLinkGetReportStatusApi(const POSLinkGetReportStatusApi&) = delete;
  POSLinkGetReportStatusApi& operator=(const POSLinkGetReportStatusApi&) = delete;
  virtual ~POSLinkGetReportStatusApi() { };
  virtual void GetReportStatus(std::function<void(ErrorOr<int64_t> reply)> result) = 0;

  // The codec used by POSLinkGetReportStatusApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `POSLinkGetReportStatusApi` to handle messages through the `binary_messenger`.
  static void SetUp(flutter::BinaryMessenger* binary_messenger, POSLinkGetReportStatusApi* api);
  static flutter::EncodableMap WrapError(std::string_view error_message);
  static flutter::EncodableMap WrapError(const FlutterError& error);

 protected:
  POSLinkGetReportStatusApi() = default;

};
}  // namespace POSLinkGetReportStatus
#endif  // PIGEON_POSLINKGETREPORTSTATUS_POSLINKGETREPORTSTATUS_H_
