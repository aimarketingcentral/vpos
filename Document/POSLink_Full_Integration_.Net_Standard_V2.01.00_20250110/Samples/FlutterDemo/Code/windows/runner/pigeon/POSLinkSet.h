// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_POSLINKSET_H_
#define PIGEON_POSLINKSET_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace POSLinkSet {


// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code)
    : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
    : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message, const flutter::EncodableValue& details)
    : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template<class T> class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class POSLinkSetApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};


// Generated class from Pigeon that represents data sent in messages.
class TCPSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  TCPSetting();

  // Constructs an object setting all fields.
  explicit TCPSetting(
    const int64_t* timeout,
    const std::string* ip,
    const std::string* port);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* ip() const;
  void set_ip(const std::string_view* value_arg);
  void set_ip(std::string_view value_arg);

  const std::string* port() const;
  void set_port(const std::string_view* value_arg);
  void set_port(std::string_view value_arg);


 private:
  static TCPSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> ip_;
  std::optional<std::string> port_;

};


// Generated class from Pigeon that represents data sent in messages.
class HttpSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  HttpSetting();

  // Constructs an object setting all fields.
  explicit HttpSetting(
    const int64_t* timeout,
    const std::string* ip,
    const std::string* port);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* ip() const;
  void set_ip(const std::string_view* value_arg);
  void set_ip(std::string_view value_arg);

  const std::string* port() const;
  void set_port(const std::string_view* value_arg);
  void set_port(std::string_view value_arg);


 private:
  static HttpSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> ip_;
  std::optional<std::string> port_;

};


// Generated class from Pigeon that represents data sent in messages.
class HttpsSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  HttpsSetting();

  // Constructs an object setting all fields.
  explicit HttpsSetting(
    const int64_t* timeout,
    const std::string* ip,
    const std::string* port);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* ip() const;
  void set_ip(const std::string_view* value_arg);
  void set_ip(std::string_view value_arg);

  const std::string* port() const;
  void set_port(const std::string_view* value_arg);
  void set_port(std::string_view value_arg);


 private:
  static HttpsSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> ip_;
  std::optional<std::string> port_;

};


// Generated class from Pigeon that represents data sent in messages.
class SslSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  SslSetting();

  // Constructs an object setting all fields.
  explicit SslSetting(
    const int64_t* timeout,
    const std::string* ip,
    const std::string* port);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* ip() const;
  void set_ip(const std::string_view* value_arg);
  void set_ip(std::string_view value_arg);

  const std::string* port() const;
  void set_port(const std::string_view* value_arg);
  void set_port(std::string_view value_arg);


 private:
  static SslSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> ip_;
  std::optional<std::string> port_;

};


// Generated class from Pigeon that represents data sent in messages.
class UsbSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  UsbSetting();

  // Constructs an object setting all fields.
  explicit UsbSetting(
    const int64_t* timeout,
    const std::string* channel,
    const std::string* device_name);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* channel() const;
  void set_channel(const std::string_view* value_arg);
  void set_channel(std::string_view value_arg);

  const std::string* device_name() const;
  void set_device_name(const std::string_view* value_arg);
  void set_device_name(std::string_view value_arg);


 private:
  static UsbSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> channel_;
  std::optional<std::string> device_name_;

};


// Generated class from Pigeon that represents data sent in messages.
class UartSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  UartSetting();

  // Constructs an object setting all fields.
  explicit UartSetting(
    const int64_t* timeout,
    const std::string* serial_port,
    const std::string* baud_rate);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* serial_port() const;
  void set_serial_port(const std::string_view* value_arg);
  void set_serial_port(std::string_view value_arg);

  const std::string* baud_rate() const;
  void set_baud_rate(const std::string_view* value_arg);
  void set_baud_rate(std::string_view value_arg);


 private:
  static UartSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> serial_port_;
  std::optional<std::string> baud_rate_;

};


// Generated class from Pigeon that represents data sent in messages.
class BTSetting {
 public:
  // Constructs an object setting all non-nullable fields.
  BTSetting();

  // Constructs an object setting all fields.
  explicit BTSetting(
    const int64_t* timeout,
    const std::string* mac_addr);

  const int64_t* timeout() const;
  void set_timeout(const int64_t* value_arg);
  void set_timeout(int64_t value_arg);

  const std::string* mac_addr() const;
  void set_mac_addr(const std::string_view* value_arg);
  void set_mac_addr(std::string_view value_arg);


 private:
  static BTSetting FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class POSLinkSetApi;
  friend class POSLinkSetApiCodecSerializer;
  std::optional<int64_t> timeout_;
  std::optional<std::string> mac_addr_;

};

class POSLinkSetApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  POSLinkSetApiCodecSerializer();
  inline static POSLinkSetApiCodecSerializer& GetInstance() {
    static POSLinkSetApiCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(
    const flutter::EncodableValue& value,
    flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
    uint8_t type,
    flutter::ByteStreamReader* stream) const override;

};

// Generated interface from Pigeon that represents a handler of messages from Flutter.
class POSLinkSetApi {
 public:
  POSLinkSetApi(const POSLinkSetApi&) = delete;
  POSLinkSetApi& operator=(const POSLinkSetApi&) = delete;
  virtual ~POSLinkSetApi() {}
  virtual std::optional<FlutterError> SetAIDLSetting() = 0;
  virtual std::optional<FlutterError> SetTCPSetting(const TCPSetting& setting) = 0;
  virtual std::optional<FlutterError> SetHttpSetting(const HttpSetting& setting) = 0;
  virtual std::optional<FlutterError> SetHttpsSetting(const HttpsSetting& setting) = 0;
  virtual std::optional<FlutterError> SetSslSetting(const SslSetting& setting) = 0;
  virtual std::optional<FlutterError> SetUsbSetting(const UsbSetting& setting) = 0;
  virtual std::optional<FlutterError> SetUartSetting(const UartSetting& setting) = 0;
  virtual ErrorOr<flutter::EncodableList> GetUartDevices() = 0;
  virtual std::optional<FlutterError> SetBTSetting(const BTSetting& setting) = 0;
  virtual std::optional<FlutterError> Cancel() = 0;
  virtual void Handshake(std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual std::optional<FlutterError> Remove() = 0;

  // The codec used by POSLinkSetApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `POSLinkSetApi` to handle messages through the `binary_messenger`.
  static void SetUp(
    flutter::BinaryMessenger* binary_messenger,
    POSLinkSetApi* api);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  POSLinkSetApi() = default;

};
}  // namespace POSLinkSet
#endif  // PIGEON_POSLINKSET_H_
